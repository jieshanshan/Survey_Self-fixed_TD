[
  {
    "code": "L72uusBqI7w",
    "email": "madhan@apache.org",
    "name": "Madhan Neethiraj",
    "project": "Apache/Altlas",
    "first_commit": "2016",
    "cqs": [
        {
            "td_type": "Design Debt",
            "td_issue": "Cognitive Complexity of methods should not be too high",
            "commit": {
                "hash": "f8cb6f76cc8851848225ea35417bebdbc85ad6f7",
                "msg": "ATLAS-3492: updated object-id attributes in audit logs to replace unassigned-guids with assigned-guids",
                "file": "EntityGraphMapper.java",
                "lang": "java",
                "diff": [
                    " - private static void setAssignedGuid(Object val, Map<String, String> guidAssignements) {",
                    " - if (val != null && MapUtils.isNotEmpty(guidAssignements)) {",
                    " - if (val instanceof AtlasObjectId) {",
                    " - AtlasObjectId objId = (AtlasObjectId) val;",
                    " - String guid  = objId.getGuid();",
                    " + private static void setAssignedGuid(Object val, EntityMutationContext context) {",
                    " + if (val != null) {",
                    " + Map<String, String> guidAssignements = context.getGuidAssignments();",
                    " - if (StringUtils.isNotEmpty(guid) && !AtlasTypeUtil.isAssignedGuid(guid)) {",
                    " - String assignedGuid = guidAssignements.get(guid);",
                    " + if (val instanceof AtlasObjectId) {",
                    " + AtlasObjectId objId = (AtlasObjectId) val;",
                    " + String guid = objId.getGuid();",
                    " + String assignedGuid = null;"
                ]
            }
        }
    ]
  },
  {
    "code": "01X7QZGozg4",
    "email": "ekirpichov@gmail.com",
    "name": "Eugene Kirpichov",
    "project": "Apache/Beam",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused type parameters should be removed",
        "commit": {
          "hash": "3b24183e90fe769911d04ca8508537411f7df896",
          "msg": "Makes ReaderIterator have the same interface as Source.Reader...",
          "file": "SourceTestUtils.java",
          "lang": "java",
          "diff": [
            " - List<T> currentItems = new ArrayList<>();",
            " - currentItems.addAll(readNItemsFromUnstartedReader(reader, numItemsToReadBeforeSplit));",
            " + List<T> currentItems = readNItemsFromUnstartedReader(reader, numItemsToReadBeforeSplit);"
          ]
        }
      },
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "62e23b71e3b964033c15707629b560dfc8204654",
          "msg": "Removes DoFn.ProcessContinuation completely",
          "file": "DoFn.java",
          "lang": "java",
          "diff": [
            " - /** Do not use. See https://issues.apache.org/jira/browse/BEAM-1904 */",
            " - @Deprecated",
            " - public class ProcessContinuation {}"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "78772d58d838e7967f1c29c68940888a9af8ba1e",
          "msg": "Introduces RangeTracker for thread-safe dynamic splitting",
          "file": "ByteOffsetBasedSource.java",
          "lang": "java",
          "diff": [
            " @Override",
            " public void validate() {",
            " - Preconditions.checkArgument(this.startOffset >= 0,",
            " - \"Start offset has value \" + this.startOffset + \", must be non-negative\");",
            " - Preconditions.checkArgument(this.endOffset >= 0,",
            " - \"End offset has value \" + this.endOffset + \", must be non-negative\");",
            " - Preconditions.checkArgument(this.startOffset < this.endOffset,",
            " - \"Start offset \" + this.startOffset + \" must be before end offset \" + this.endOffset);",
            " - Preconditions.checkArgument(this.minBundleSize >= 0,",
            " - \"minBundleSize has value \" + this.minBundleSize + \", must be non-negative\");",
            " + Preconditions.checkArgument(",
            " + this.startOffset >= 0,",
            " + \"Start offset has value %s, must be non-negative\", this.startOffset);",
            " + Preconditions.checkArgument(",
            " + this.endOffset >= 0,",
            " + \"End offset has value %s, must be non-negative\", this.endOffset);",
            " + Preconditions.checkArgument(",
            " + this.startOffset < this.endOffset,",
            " + \"Start offset %s must be before end offset %s\",",
            " + this.startOffset, this.endOffset);",
            " + Preconditions.checkArgument(",
            " + this.minBundleSize >= 0,",
            " + \"minBundleSize has value %s, must be non-negative\",",
            " + this.minBundleSize);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "Akfe9bWQYoQ",
    "email": "sitnikov.vladimir@gmail.com",
    "name": "Vladimir Sitnikov",
    "project": "Apache/Calcite",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "194f6488859f7c3460fc201cab8b4a20d4cbe79a",
          "msg": "Fix julianhyde/linq4j#17, \"Assign constant expressions to 'static final' members\".",
          "file": "BlockBuilder.java",
          "lang": "java",
          "diff": [
            " + private static final Visitor OPTIMIZE_VISITOR = new OptimizeVisitor();",
            " for (int i = 0; i < 10; i++) {",
            " - if (!optimize()) {",
            " + if (!optimize(createOptimizeVisitor(), true)) {",
            " break;",
            " }",
            " }",
            " + optimize(createFinishingOptimizeVisitor(), false);",
            " }",
            " return Expressions.block(statements);",
            " }",
            " -  private boolean optimize() {",
            " + private boolean optimize(Visitor optimizer, boolean performInline) {",
            " boolean optimized = false;",
            " final UseCounter useCounter = new UseCounter();",
            " for (Statement statement : statements) {",
            " - if (statement instanceof DeclarationStatement) {",
            " + if (statement instanceof DeclarationStatement && performInline) {"
          ]
        }
      }
    ]
  },
  {
    "code": "X52uZuirzSE",
    "email": "olamy@apache.org",
    "name": "Olivier Lamy",
    "project": "Apache/Commons IO",
    "first_commit": "2013",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Collapsible \"if\" statements should be merged",
        "commit": {
          "hash": "c6edda83ce73bd42f5dbdb92eba7f9e4a9264d58",
          "msg": "use spaces not tabs",
          "file": "WindowsLineEndingInputStream.java",
          "lang": "java",
          "diff": [
            " - /**",
            " - * @inheritDoc",
            " - */",
            " - @Override",
            " - public int read() throws IOException {",
            " - if (eofSeen) {",
            " - return eofGame();",
            " - } else if (injectSlashN) {",
            " - injectSlashN = false;",
            " - return '\n';",
            " - } else {",
            " - boolean prevWasSlashR = slashRSeen;",
            " - int target = readWithUpdate();",
            " - if (eofSeen) {",
            " - return eofGame();",
            " - }",
            " - if (target == '\n') {",
            " - if (!prevWasSlashR) {",
            " - injectSlashN = true;",
            " - return '\r';",
            " - }",
            " - }",
            " - return target;",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "Z870aoqN31Y",
    "email": "mpercy@cloudera.com",
    "name": "Mike Percy",
    "project": "Apache/Flume",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "215d75eb15362f34cd3246107cbea7ace247af10",
          "msg": "FLUME-1940. Log a snapshot of Flume metrics on shutdown.",
          "file": "MonitoredCounterGroup.java",
          "lang": "java",
          "diff": [
            " - LOG.error(\"Failed to register monitored counter group for type: \"}",
            " + logger.error(\"Failed to register monitored counter group for type: \"}"
          ]
        }
      },
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Code Debt",
        "td_issue": "Preconditions and logging arguments should not require evaluation",
        "commit": {
          "hash": "0e0e6346d77d6d55b29c2a87c35aaa7f4779f73f",
          "msg": "FLUME-1575. FileChannel Encryption should disallow a null key.",
          "file": "FileChannel.java",
          "lang": "java",
          "diff": [
            " @@ -307,7 +310,15 @@ public String toString() {",
            " @Override",
            " protected BasicTransactionSemantics createTransaction() {",
            " - Preconditions.checkState(open, \"Channel closed \" + channelNameDescriptor);",
            " + if(!open) {",
            " + String msg = \"Channel closed \" + channelNameDescriptor;",
            " + if(startupError != null) {",
            " + msg += \". Due to \" + startupError.getClass().getName() + \": \" +",
            " + startupError.getMessage();",
            " + throw new IllegalStateException(msg, startupError);",
            " + }",
            " + throw new IllegalStateException(msg);",
            " + }"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "c72a3b1a5a2548f9157fe7913611c4318ce5e64d",
          "msg": "FLUME-1974. Thrift compatibility issue with hbase-0.92.",
          "file": "ThriftFlumeEvent.java",
          "lang": "java",
          "diff": [" - @Deprecated"]
        }
      }
    ]
  },
  {
    "code": "NM9WRVvDJ1g",
    "email": "smolnar@apache.org",
    "name": "Sandor Molnar",
    "project": "Apache/Knox",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Standard outputs should not be used directly to log anything",
        "commit": {
          "hash": "5c2c7a727d8e88e47ce1d14cb803c9a9f4473c29",
          "msg": "KNOX-2022 - KnoxShellTable contains Comparables instead of Strings",
          "file": "JDBCKnoxShellTableBuilder.java",
          "lang": "java",
          "diff": [
            " @@ -53,13 +54,13 @@ public class JDBCKnoxShellTableBuilder extends KnoxShellTableBuilder {",
            " try {",
            " Class.forName(driver).newInstance();",
            " } catch (ClassNotFoundException e) {",
            " - System.out.println(String.format(\"Unable to load the JDBC driver %s. Check your CLASSPATH.\", driver));",
            " +System.out.println(String.format(Locale.US, \"Unable to load the JDBC driver %s. Check your CLASSPATH.\", driver));",
            " throw e;",
            " } catch (InstantiationException e) {",
            " - System.out.println(String.format(\"Unable to instantiate the JDBC driver %s\", driver));",
            " + System.out.println(String.format(Locale.US, \"Unable to instantiate the JDBC driver %s\", driver));"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Boolean expressions should not be gratuitous",
        "commit": {
          "hash": "45043b488624c85cc16b518d674b7513323a29a1",
          "msg": "KNOX-2057 - Unique ID is set when creating a new instance of KnoxShellTable instead of setting it in the builder/filter (#165)",
          "file": "JDBCKnoxShellTableBuilder.java",
          "lang": "java",
          "diff": [
            " public KnoxShellTable sql(String sql) throws IOException, SQLException {",
            " - KnoxShellTable table = null;",
            " conn = conn == null ? DriverManager.getConnection(connectionUrl) : conn;",
            " if (conn != null) {",
            " try (Statement statement = conn.createStatement(); ResultSet resultSet = statement.executeQuery(sql);) {",
            " - table = new KnoxShellTable();",
            " - processResultSet(table, resultSet);",
            " + processResultSet(resultSet);",
            " } finally {",
            " if (conn != null && tableManagedConnection) {",
            " conn.close();",
            " }",
            " }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "926adc68691d751ad89261313ea54a5007d95787",
          "msg": "KNOX-2269 - The Knox Home page is available as a regular app via the homepage topology (#281)",
          "file": "GatewayServer.java",
          "lang": "java",
          "diff": [
            " - private synchronized void activateHomeApp() {",
            " - try {",
            " - // UI",
            " - activateHomepageContext(\"/\", \"homepage/%2Fhome\");",
            " -",
            " - // API",
            " - activateHomepageContext(\"/homepage\", \"homepage/%2F\");",
            " - } catch (Throwable e) {",
            " - auditor.audit(Action.DEPLOY, \"home\", ResourceType.URI, ActionOutcome.FAILURE);",
            " - log.failedToDeployTopology(\"home\", e);",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "Yi6cHwURiFI",
    "email": "jerry.boyang.peng@gmail.com",
    "name": "Boyang Jerry Peng",
    "project": "Apache/Pulsar",
    "first_commit": "2017",
    "cqs": [
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "d4794bd5e100a946780ff562bf45ef44a7dc5281",
          "msg": "fixing and refactoring function status (#3102), * fixing and refactoring function status, * further refactoring, * cleaning up",
          "file": "FunctionsImplBase.java",
          "lang": "java",
          "diff": [
            " - FunctionMetaDataManager functionMetaDataManager = worker().getFunctionMetaDataManager();",
            " - if (!functionMetaDataManager.containsFunction(tenant, namespace, componentName)) {",
            " - log.error(\"{} in get {} Status does not exist @ /{}/{}/{}\", componentType, componentType, tenant, namespace, componentName);",
            " - throw new RestException(Status.NOT_FOUND, String.format(\"%s %s doesn't exist\", componentType, componentName));",
            " - }",
            " - FunctionMetaData functionMetaData = functionMetaDataManager.getFunctionMetaData(tenant, namespace, componentName);",
            " - if (!calculateSubjectType(functionMetaData).equals(componentType)) {",
            " - log.error(\"{}/{}/{} is not a {}\", tenant, namespace, componentName, componentType);",
            " - throw new RestException(Status.NOT_FOUND, String.format(\"%s %s doesn't exist\", componentType, componentName));",
            " - }"
          ]
        }
      },
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "6be584f6a35e727377f0bc0968de57c50478164d",
          "msg": "improving source and sink validation (#1897)",
          "file": "ValidatorImpls.java",
          "lang": "java",
          "diff": [
            " } catch (ClassNotFoundException e) {",
            " - throw new RuntimeException(e);",
            " + throw new IllegalArgumentException(\"Cannot find/load class \" + className);",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Methods should not have too many parameters",
        "commit": {
          "hash": "a514ec7525c1190adc2614fec012e3c3f4e03928",
          "msg": "remove function details from v3 function endpoints (#3271)",
          "file": "FunctionApiV3Resource.java",
          "lang": "java",
          "diff": [
            " functions.updateFunction(tenant, namespace, functionName, uploadedInputStream, fileDetail,",
            " - functionPkgUrl, functionDetailsJson, functionConfigJson, clientAppId());",
            " + functionPkgUrl, null, functionConfigJson, clientAppId());"
          ]
        }
      }
    ]
  },
  {
    "code": "DoGeMNysObc",
    "email": "sanjeevrk@gmail.com",
    "name": "Sanjeev Kulkarni",
    "project": "Apache/Pulsar",
    "first_commit": "2017",
    "cqs": [
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "a7310ee7e62f9d70d41ebc21bd196cbba259eeb0",
          "msg": "Function Serverside validation Part 2 (#2752)",
          "file": "SourceConfigUtils.java",
          "lang": "java",
          "diff": [
            " } else {",
            " - sourceClassName = ConnectorUtils.getIOSourceClass(sourceConfig.getArchive());",
            " - ",
            " - try (NarClassLoader ncl = NarClassLoader.getFromArchive(new File(sourceConfig.getArchive()),",
            " - Collections.emptySet())) {",
            " - typeArg = getSourceType(sourceClassName, ncl).getName();",
            " - }",
            " + sourceClassName = ConnectorUtils.getIOSourceClass(classLoader);",
            " + typeArg = getSourceType(sourceClassName, classLoader).getName();",
            " }"
          ]
        }
      },
      {
        "EXAMPLE_IS_GOOD": true,
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "3db8b7392b1be22544117ea336dd46cc85c61ba0",
          "msg": "Allow the ability to specify which artifactory to download dep from (#2824)",
          "file": "RuntimeUtils.java",
          "lang": "java",
          "diff": [
            " - Boolean installUserCodeDepdendencies) throws Exception {"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Methods should not have too many parameters",
        "commit": {
          "hash": "1386e6dfdba16bb1ee0a3c7649cb7daed50a5d8c",
          "msg": "Source/Sink Endpoint validations (#2807)",
          "file": "FunctionsImpl.java",
          "lang": "java",
          "diff": [
            " - public Response updateFunction(final String tenant, final String namespace, final String functionName,",
            " + public Response updateFunction(final String tenant, final String namespace, final String componentName,",
            " final InputStream uploadedInputStream, final FormDataContentDisposition fileDetail,",
            " - final String functionPkgUrl, final String functionDetailsJson, final String functionConfigJson,",
            " - final String sourceConfigJson, final String sinkConfigJson, final String clientRole) {",
            " + final String functionPkgUrl, final String functionDetailsJson, final String componentConfigJson,",
            " + final String componentType, final String clientRole) {"
          ]
        }
      }
    ]
  }
]