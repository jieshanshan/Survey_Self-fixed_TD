[
  {
    "code": "zpH_NGJOLts",
    "email": "daniel.markwat@gmail.com",
    "name": "Dan Markwat",
    "project": "Apache/Altlas",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "caac858f4218a9b2c3e9e742c3dd2ff5268eb233",
          "msg": "Sweeping changes to the Service implementations.",
          "file": "TitanGraphService.java",
          "lang": "java",
          "diff": [
            " @Inject",
            " TitanGraphService(GraphProvider<TitanGraph> graph) throws ConfigurationException {",
            " + // TODO reimplement to save the Provider and initialize the graph inside the start() method",
            " this.titanGraph = graph.get();",
            " - // TODO decouple from Service class and run start() here",
            " - // can use a shutdown hook to run the stop() method",
            " - // this.start();",
            " -}"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "caac858f4218a9b2c3e9e742c3dd2ff5268eb233",
          "msg": "Sweeping changes to the Service implementations.",
          "file": "GraphBackedMetadataRepositoryService.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void start() throws Exception {",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "WO3R50dI28U",
    "email": "greg.senia@gmail.com",
    "name": "Greg Senia",
    "project": "Apache/Altlas",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" classes should be removed",
        "commit": {
          "hash": "13aa58b66d596587ced3efde6132e2c0ba0f89dc",
          "msg": "removed log.error options",
          "file": "Hook.java",
          "lang": "java",
          "diff": [
            " @@ -49,12 +49,6 @@",
            " public class Hook implements ExecuteWithHookContext {",
            " private static final Log LOG = LogFactory.getLog(Hook.class.getName());",
            " - //private static TimelineClient timelineClient;",
            " - private enum EntityTypes { HIVE_QUERY_ID };",
            " - private enum EventTypes { QUERY_SUBMITTED, QUERY_COMPLETED };",
            " - private enum OtherInfoTypes { QUERY, STATUS, TEZ, MAPRED };",
            " - private enum PrimaryFilterTypes { user };",
            " - private static final int WAIT_TIME = 3;",
            " private HiveLineageBean hlb;"
          ]
        }
      }
    ]
  },
  {
    "code": "o0SbY4ueEOk",
    "email": "hbutani@hortonworks.com",
    "name": "Harish Butani",
    "project": "Apache/Altlas",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "4c1f4c8f97e04ca9bfa00c361f86ed568f443e92",
          "msg": "refactor: introduce concepts for ConstructableType, HierarchicalType, IInstance, ITypedInstance etc.",
          "file": "StructType.java",
          "lang": "java",
          "diff": [
            " @Override",
            " public void output(IStruct s, Appendable buf, String prefix) throws MetadataException {",
            " - TypeUtils.outputVal(\"{\", buf, prefix);",
            " - if ( s == null ) {",
            " - TypeUtils.outputVal(\"<null>\n\", buf, \"\");",
            " - return;",
            " - }",
            " - TypeUtils.outputVal(\"\n\", buf, \"\");",
            " - String fieldPrefix = prefix + \"\t\";",
            " - for(AttributeInfo i : fieldMapping.fields.values()) {",
            " - Object aVal = s.get(i.name);",
            " - TypeUtils.outputVal(i.name + \" : \", buf, fieldPrefix);",
            " - i.dataType().output(aVal, buf, \"\");",
            " - TypeUtils.outputVal(\"\n\", buf, \"\");",
            " - }",
            " - TypeUtils.outputVal(\"\n}\n\", buf, \"\");",
            " + handler.output(s, buf, prefix);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "Ol8XVgZpZNY",
    "email": "lma@cloudera.com",
    "name": "Le Ma",
    "project": "Apache/Atlas",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" methods should be removed",
        "commit": {
          "hash": "5932b1af358288b07f382b40939b48150f844fd6",
          "msg": "ATLAS-3482 Enhance basic search to enable search on entity system attributes",
          "file": "SearchContext.java",
          "lang": "java",
          "diff": [
            " @@ -285,7 +282,7 @@",
            " private void validateAttributes(final AtlasStructType structType, final String..",
            " }",
            " }",
            " - private boolean hasAttributeFilter(FilterCriteria filterCriteria) {",
            " + public boolean hasAttributeFilter(FilterCriteria filterCriteria) {",
            " return filterCriteria != null &&",
            " (CollectionUtils.isNotEmpty(filterCriteria.getCriterion()) || StringUtils.isNotEmpty(filterCriteria.getAttributeName()));",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "gFaQJl5Jy7Q",
    "email": "mandar.ambawane@freestoneinfotech.com",
    "name": "Mandar Ambawane",
    "project": "Apache/Altlas",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "80135a8dbedfbaff444267681aa13d958e867c7e",
          "msg": "ATLAS-3689: added entity-audit entries on business attributes add/update/delete to an entity",
          "file": "EntityGraphMapper.java",
          "lang": "java",
          "diff": [
            " - private void updateLabels(AtlasVertex vertex, Set<String> labels) {",
            " - if (CollectionUtils.isNotEmpty(labels)) {",
            " - AtlasGraphUtilsV2.setEncodedProperty(vertex, LABELS_PROPERTY_KEY, getLabelString(labels));",
            " - } else {",
            " - vertex.removeProperty(LABELS_PROPERTY_KEY);",
            " - }",
            " - }",
            " - private String getLabelString(Collection<String> labels) {",
            " - String ret = null;",
            " - if (!labels.isEmpty()) {",
            " - ret = LABEL_NAME_DELIMITER + String.join(LABEL_NAME_DELIMITER, labels) + LABEL_NAME_DELIMITER;",
            " - }",
            " - return ret;",
            " -}"
          ]
        }
      }
    ]
  },
  {
    "code": "qmw5CH03cTc",
    "email": "nikhil.bonte@freestoneinfotech.com",
    "name": "Nikhil Bonte",
    "project": "Apache/Altlas",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "8ada5d400ea994a0ffd3c67fa0f66719de1e4138",
          "msg": "ATLAS-3324 Incremental export with hive_table for table-level replication.",
          "file": "IncrementalExportEntityProvider.java",
          "lang": "java",
          "diff": [
            " @@ -67,7 +71,10 @@ public void fullFetch(AtlasEntity entity, ExportService.ExportContext context) {",
            " @Override",
            " public void connectedFetch(AtlasEntity entity, ExportService.ExportContext context) {",
            " -",
            " + //starting entity is hive_table",
            " + context.guidsToProcess.addAll(fetchGuids(entity.getGuid(), QUERY_TABLE_DB, context.changeMarker));",
            " + context.guidsToProcess.addAll(fetchGuids(entity.getGuid(), QUERY_TABLE_SD, context.changeMarker));",
            " + context.guidsToProcess.addAll(fetchGuids(entity.getGuid(), QUERY_TABLE_COLUMNS, context.changeMarker));",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "o1Nv-Up4KkI",
    "email": "sarath@apache.org",
    "name": "Sarath Subramanian",
    "project": "Apache/Altlas",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Strings and Boxed types should be compared using \"equals()\"",
        "commit": {
          "hash": "b823084aadd870f8f14df8f01838fac8347e72bb",
          "msg": "ATLAS-3405: Handling of references to non-existing entities in notifications",
          "file": "GraphHelper.java",
          "lang": "java",
          "diff": [
            " @@ -1060,7 +1060,7 @@ public static Boolean isProxy(AtlasElement element) {",
            " public static Boolean isEntityIncomplete(AtlasElement element) {",
            " Integer value = element.getProperty(Constants.IS_INCOMPLETE_PROPERTY_KEY, Integer.class);",
            " - Boolean ret = (value != null && value == INCOMPLETE_ENTITY_VALUE) ? Boolean.TRUE : Boolean.FALSE;",
            " + Boolean ret = value != null && value.equals(INCOMPLETE_ENTITY_VALUE) ? Boolean.TRUE : Boolean.FALSE;",
            " return ret;",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "clr8dE_vx6c",
    "email": "sidharthkmishra@gmail.com",
    "name": "Sid",
    "project": "Apache/Altlas",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "\"Thread.sleep\" should not be used in tests",
        "commit": {
          "hash": "371f967f605ec72e1d1a4fc2030d008cbede27fa",
          "msg": "ATLAS-3518: Added new Atlas Audit Framework with Purge Operation and Unit Test",
          "file": "EntityV2JerseyResourceIT.java",
          "lang": "java",
          "diff": [" - Thread.sleep(1000);"]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "371f967f605ec72e1d1a4fc2030d008cbede27fa",
          "msg": "ATLAS-3518: Added new Atlas Audit Framework with Purge Operation and Unit Test",
          "file": "DeleteHandlerV1.java",
          "lang": "java",
          "diff": [
            " @@ -105,24 +88,15 @@ public void deleteEntities(Collection<AtlasVertex> instanceVertices) throws Atla",
            " for (AtlasVertex instanceVertex : instanceVertices) {",
            " final String guid  = AtlasGraphUtilsV2.getIdFromVertex(instanceVertex);",
            " - final AtlasEntity.Status state = getState(instanceVertex);",
            " - final boolean needToSkip;",
            " - if (isPurgeRequested) {",
            " - needToSkip = state == ACTIVE || requestContext.isPurgedEntity(guid);",
            " - } else {",
            " - needToSkip = state == DELETED || requestContext.isDeletedEntity(guid);",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "Q7HBkSExVfM",
    "email": "skoritala@cloudera.com",
    "name": "skoritala",
    "project": "Apache/Altlas",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "a7d8044920a81f3dbb0b8e688ddecf68505998f8",
          "msg": "ATLAS-3308: enhanced Quicksearch API to support parameters via POST method",
          "file": "SearchAggregatorImpl.java",
          "lang": "java",
          "diff": [
            " - // remove entries with 0 counts",
            " - for (List<AtlasAggregationEntry> entries : aggregatedMetrics.values()) {",
            " - for (ListIterator<AtlasAggregationEntry> iter = entries.listIterator(); iter.hasNext(); ) {",
            " - AtlasAggregationEntry entry = iter.next();",
            " - if (entry.getCount() <= 0) {",
            " - iter.remove();",
            " - }",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "sZaEMgdDQIk",
    "email": "aljoscha.krettek@gmail.com",
    "name": "Aljoscha Krettek",
    "project": "Apache/Beam",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic wildcard types should not be used in return parameters",
        "commit": {
          "hash": "4fe7010bdb7692914fc6c2821c95caea0cab770d",
          "msg": "Remove Some Code leftover from Earlier Refactoring. This only removes unused parts of code.",
          "file": "FlinkBatchTransformTranslators.java",
          "lang": "java",
          "diff": [
            " private static class Concatenate<T> extends Combine.CombineFn<T, List<T>, List<T>> {",
            " @Override",
            " public List<T> createAccumulator() {",
            " - return new ArrayList<T>();",
            " + return new ArrayList<>();",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" classes should be removed",
        "commit": {
          "hash": "4fe7010bdb7692914fc6c2821c95caea0cab770d",
          "msg": "Remove Some Code leftover from Earlier Refactoring. This only removes unused parts of code.",
          "file": "FlinkBatchTransformTranslators.java",
          "lang": "java",
          "diff": [
            " - private static class WriteSinkTranslatorBatch<T>",
            " - implements FlinkBatchPipelineTranslator.BatchTransformTranslator<Write.Bound<T>> {",
            " -",
            " - private static class AvroIOWriteTranslatorBatch<T> implements",
            " - FlinkBatchPipelineTranslator.BatchTransformTranslator<AvroIO.Write.Bound<T>> {",
            " - private static final Logger LOG = LoggerFactory.getLogger(AvroIOWriteTranslatorBatch.class);",
            " - private static class TextIOWriteTranslatorBatch<T>",
            " - implements FlinkBatchPipelineTranslator.BatchTransformTranslator<TextIO.Write.Bound<T>> {",
            " - private static final Logger LOG = LoggerFactory.getLogger(TextIOWriteTranslatorBatch.class);"
          ]
        }
      }
    ]
  },
  {
    "code": "bw9MvLqlElY",
    "email": "ansela@paypal.com",
    "name": "Sela",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "b21de69ec50d84af383252f6271fcc57fafea88b",
          "msg": "Handle test failures in \"graceful stop peroid\".",
          "file": "SparkPipelineStateTest.java ",
          "lang": "java",
          "diff": [
            " - final SparkPipelineOptions options = commonOptions.getOptions();"
          ]
        }
      }
    ]
  },
  {
    "code": "EHiA9c8WieE",
    "email": "aviemzur@gmail.com",
    "name": "Aviem Zur",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Local variables should not shadow class fields",
        "commit": {
          "hash": "d7d49ce8a1bff63d4205fd641c90e36b0f88bb17",
          "msg": "Throw UnsupportedOperationException for committed metrics results in spark runner. Added metrics support for MultiDo",
          "file": "SparkMetricsContainer.java",
          "lang": "java",
          "diff": [
            " if (metricsContainers == null) {",
            " synchronized (this) {",
            " if (metricsContainers == null) {",
            " - metricsContainers = CacheBuilder.<String, SparkMetricsContainer>newBuilder()",
            " - .build(new MetricsContainerCacheLoader());",
            " + initializeMetricsContainers();",
            " }",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "Qq3tZVhuqk0",
    "email": "bchambers@google.com",
    "name": "bchambers",
    "project": "Apache/Beam",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Package declaration should match source file directory",
        "commit": {
          "hash": "b972445412d4c7c563e57a2260e99b9b5e3c7a32",
          "msg": "Initial update of imports...",
          "file": "State.java",
          "lang": "java",
          "diff": [
            " - package com.google.cloud.dataflow.sdk.util.state;",
            " + package org.apache.beam.sdk.util.state;"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused type parameters should be removed",
        "commit": {
          "hash": "4bf8485ff9d34f4cbee1db2139d48301d5ffa0d3",
          "msg": "Organize triggers to make them easier to construct. Introduce an AtMostOnce trigger interface to enforce (at compile time) that all the arguments to a AfterFirst.of(...) are at-most once triggers. Introduce the AfterWatermark and AfterPane triggers. Give triggers the timestamp of the element.",
          "file": "TriggerTester.java",
          "lang": "java",
          "diff": [
            " -  public static <VI, VO, W extends BoundedWindow> TriggerTester<VI, VO, W> of(",
            " - WindowFn<?, W> windowFn,",
            " - Trigger<W> trigger,",
            " - AbstractWindowSet.Factory<String, VI, VO, W> windowSetFactory) throws Exception {",
            " + public static <W extends BoundedWindow> TriggerTester<Integer, Iterable<Integer>, W> buffering(",
            " + WindowFn<?, W> windowFn, Trigger<W> trigger) throws Exception {",
            " @SuppressWarnings(\"unchecked\")",
            " WindowFn<Object, W> objectWindowFn = (WindowFn<Object, W>) windowFn;",
            " ",
            " - return new TriggerTester<VI, VO, W>(objectWindowFn, trigger, windowSetFactory);",
            " + AbstractWindowSet.Factory<String, Integer, Iterable<Integer>, W> windowSetFactory =",
            " + BufferingWindowSet.<String, Integer, W>factory(VarIntCoder.of());",
            " +",
            " + return new TriggerTester<Integer, Iterable<Integer>, W>(",
            " + objectWindowFn, trigger, windowSetFactory);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "ThNOBXNvPtE",
    "email": "dhalperi@google.com",
    "name": "dhalperi",
    "project": "Apache/Beam",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "3edae9b8b4d7afefb5c803c19bb0a1c21ebba89d",
          "msg": "Closes #332",
          "file": "PubsubUnboundedSourceTest.java",
          "lang": "java",
          "diff": [
            " + import static junit.framework.TestCase.assertFalse;",
            " + import static org.hamcrest.Matchers.lessThanOrEqualTo;",
            " + import static org.junit.Assert.assertArrayEquals;",
            " + import static org.junit.Assert.assertEquals;",
            " + import static org.junit.Assert.assertNotNull;",
            " + import static org.junit.Assert.assertThat;",
            " + import static org.junit.Assert.assertTrue;",
            " ... ",
            " + assertTrue(reader.start());",
            " + assertEquals(DATA, reader.getCurrent());",
            " + assertFalse(reader.advance());"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "60f86db6ef211aedd7c7343842b68390ccf52d93",
          "msg": "[BEAM-59] Fully delete IOChannelUtils",
          "file": "IOChannelUtils.java",
          "lang": "java",
          "diff": [
            " - public static void registerIOFactoriesAllowOverride(PipelineOptions options) {}"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "6832668ac6888d3e8d56819a7a73ff05798c7082",
          "msg": "Remove Triggers.java from SDK entirely",
          "file": "Triggers.java",
          "lang": "java",
          "diff": [
            " - /** Utilities for working with {@link Triggers Triggers}. */",
            " - @Experimental(Experimental.Kind.TRIGGER)",
            " - @Deprecated",
            " - public class Triggers implements Serializable {"
          ]
        }
      }
    ]
  },
  {
    "code": "GmgYtgs6obU",
    "email": "iemejia@gmail.com",
    "name": "Isma\u00ebl Mej\u00eda",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "1ec59a08a3fab5ac0918d7f1a33b82427957b630",
          "msg": "[BEAM-2411] Make the write transform of HBaseIO simpler",
          "file": "HBaseIO.java",
          "lang": "java",
          "diff": [
            " - public void processElement(ProcessContext ctx) throws Exception {"
          ]
        }
      }
    ]
  },
  {
    "code": "LcY-_6toKBA",
    "email": "klk@google.com",
    "name": "Kenn Knowles",
    "project": "Apache/Beam",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "cfda3ff87ef04ed8603f77eca5b5fe72f900a562",
          "msg": "Update Triggers to new shouldFire() based semantics, User-facing trigger expressions are unchanged in syntax or semantics.",
          "file": "ReduceFnRunner.java",
          "lang": "java",
          "diff": [
            " - result = triggerRunner.onMerge(mergeResultContext);",
            " + triggerRunner.onMerge(mergeResultContext);",
            " } catch (Exception e) {"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "c4cf644e142b04d86088b7298a4b392e6f6131c2",
          "msg": "Add DoFnRunner.ListOutputManager",
          "file": "DoFnTester.java",
          "lang": "java",
          "diff": [
            " - DoFnRunner<InputT, OutputT, List> fnRunner;",
            " + DoFnRunner<InputT, OutputT, List<WindowedValue<?>>> fnRunner;"
          ]
        }
      }
    ]
  },
  {
    "code": "Uc5isPzwDNA",
    "email": "lcwik@google.com",
    "name": "lcwik",
    "project": "Apache/Beam",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "4eab2a1310685acdfccbe83b9ead19ebde423311",
          "msg": "Testing improvements regarding DataflowAssert and TestPipeline",
          "file": "DataflowAssert.java",
          "lang": "java",
          "diff": [
            " - .of(new DoFn<Void, Void>() {",
            " - private static final long serialVersionUID = 0;",
            " -",
            " - @Override",
            " - public void processElement(DoFn<Void, Void>.ProcessContext c) {",
            " - ActualT actualContents = c.sideInput(actual);",
            " - checkerFn.apply(actualContents);",
            " - }",
            " - }));",
            " + .of(new CheckerDoFn<>(checkerFn, actual)));"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "a752cfdc8dafa26b86cdf4343a638768e763c736",
          "msg": "[BEAM-1871] Remove deprecated org.apache.beam.sdk.options.GcsOptions after updating Dataflow worker",
          "file": "GcsOptions.java",
          "lang": "java",
          "diff": [
            " - /**",
            " - * Options used to configure Google Cloud Storage.",
            " - */",
            " - @Deprecated",
            " - public interface GcsOptions extends",
            " - ApplicationNameOptions, GcpOptions, PipelineOptions {"
          ]
        }
      }
    ]
  },
  {
    "code": "zm9RnyaGSkU",
    "email": "lzljs3620320@aliyun.com",
    "name": "JingsongLi",
    "project": "Apache/Beam",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "e8f26085e889f8f618c0961a5458cbc42b432c01",
          "msg": "Remove the FnOutputT parameter from DoFnOperator",
          "file": "FlinkStreamingTransformTranslators.java",
          "lang": "java",
          "diff": [
            " interface DoFnOperatorFactory<InputT, OutputT> {",
            " - DoFnOperator<InputT, OutputT, OutputT> createDoFnOperator(",
            " + DoFnOperator<InputT, OutputT> createDoFnOperator(",
            " DoFn<InputT, OutputT> doFn,",
            " String stepName,",
            " List<PCollectionView<?>> sideInputs,",
            " ",
            " if (sideInputs.isEmpty()) {",
            " - DoFnOperator<InputT, OutputT, OutputT> doFnOperator =",
            " + DoFnOperator<InputT, OutputT> doFnOperator =",
            " doFnOperatorFactory.createDoFnOperator("
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "f86facb27170c34cc9ef2d702a51bdcd7e53836d",
          "msg": "[BEAM-1116] Support for new Timer API in Flink runner (streaming)",
          "file": "DoFnOperator.java",
          "lang": "java",
          "diff": [
            " public void fireTimer(InternalTimer<?, TimerData> timer) {",
            " - throw new RuntimeException(\"The fireTimer should not be invoke in DoFnOperator.\");",
            " + TimerInternals.TimerData timerData = timer.getNamespace();",
            " + StateNamespace namespace = timerData.getNamespace();",
            " + // This is a user timer, so namespace must be WindowNamespace",
            " + checkArgument(namespace instanceof WindowNamespace);",
            " + BoundedWindow window = ((WindowNamespace) namespace).getWindow();",
            " + pushbackDoFnRunner.onTimer(timerData.getTimerId(), window,",
            " + timerData.getTimestamp(), timerData.getDomain());",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "aV9UA-kYpoE",
    "email": "millsd@google.com",
    "name": "Daniel Mills",
    "project": "Apache/Beam",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "\"Preconditions\" and logging arguments should not require evaluation",
        "commit": {
          "hash": "a392b2c79a642f04a2c2e0a1eb4bc0c72810dc73",
          "msg": "Uses slf4j logging in the streaming worker to enable Cloud Logging. Removes the use of MDC because it doesn't actually provide thread-local formatting parameters",
          "file": "StreamingDataflowWorker.java",
          "lang": "java",
          "diff": [
            " try {",
            " statusServer.start();",
            " - LOG.info(\"Status server started on port \" + statusPort);",
            " + LOG.info(\"Status server started on port {}\", statusPort);",
            " statusServer.join();",
            " } catch (Exception e) {",
            " - LOG.warning(\"Status server failed to start: \" + e);",
            " + LOG.warn(\"Status server failed to start: \", e);",
            " }",
            " private void addComputation(MapTask mapTask) {",
            " String computation = mapTask.getSystemName();",
            " if (!instructionMap.containsKey(computation)) {",
            " - LOG.info(\"Adding config for \" + computation + \": \" + mapTask);",
            "+ LOG.info(\"Adding config for {}: {}\", computation, mapTask);"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "fbbbe4c4eae4759ff522f22979365ddd9e89590f",
          "msg": "Adds support for unbounded custom sources",
          "file": "StreamingDataflowWorker.java",
          "lang": "java",
          "diff": [
            " + remainingCommitBytes -= request.getSerializedSize();",
            " + computationRequestBuilder.addRequests(request);",
            " + }",
            " + if (computationRequestBuilder.getRequestsCount() > 0) {",
            " + computationRequestBuilder.setComputationId(entry.getKey());",
            " + commitRequestBuilder.addRequests(computationRequestBuilder);",
            " }",
            " - remainingCommitBytes -= request.getSerializedSize();",
            " - computationRequestBuilder.addRequests(request);",
            " }",
            " - if (computationRequestBuilder.getRequestsCount() > 0) {",
            " -          computationRequestBuilder.setComputationId(entry.getKey());",
            " -          commitRequestBuilder.addRequests(computationRequestBuilder);",
            " + if (commitRequestBuilder.getRequestsCount() > 0) {",
            " + Windmill.CommitWorkRequest commitRequest = commitRequestBuilder.build();",
            " + LOG.trace(\"Commit: {}\", commitRequest);",
            " + commitWork(commitRequest);",
            " +} else {",
            " + break;",
            " }",
            " }",
            " - if (commitRequestBuilder.getRequestsCount() > 0) {",
            " - Windmill.CommitWorkRequest commitRequest = commitRequestBuilder.build();",
            " - LOG.trace(\"Commit: {}\", commitRequest);",
            " - commitWork(commitRequest);",
            " - }",
            " - if (remainingCommitBytes > 0) {",
            " - sleep(100);",
            " - }",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "spvkfYH7y6o",
    "email": "mingmxu@ebay.com",
    "name": "mingmxu",
    "project": "Apache/Beam",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "f10509e745ff234110bc50d16aba1cb6813036b6",
          "msg": "append to #2135, add 1). fix issue of NO_TIMESTAMP type in 10; 2). rename field to 'timestamp'",
          "file": "ConsumerSpEL.java",
          "lang": "java",
          "diff": [" - public ConsumerSpEL() {}"]
        }
      }
    ]
  },
  {
    "code": "u3PdN7tmm2U",
    "email": "mxm@apache.org",
    "name": "Maximilian Michels",
    "project": "Apache/Beam",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "36a27f53836475048db884aeaa70d496001f1f41",
          "msg": "This\u00a0closes\u00a0#394",
          "file": "FlinkPipelineExecutionEnvironment.java",
          "lang": "java",
          "diff": [
            " - private void createBatchExecutionEnvironment() {",
            " - if (this.flinkStreamEnv != null || this.flinkBatchEnv != null) {",
            " - throw new RuntimeException(\"FlinkPipelineExecutionEnvironment already initialized.\");",
            " - }",
            " + private ExecutionEnvironment createBatchExecutionEnvironment() {"
          ]
        }
      }
    ]
  },
  {
    "code": "fZIvpzW_-qk",
    "email": "pabloem@google.com",
    "name": "Pablo",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" methods should be removed",
        "commit": {
          "hash": "650e86854cb72258de81378a357c93ff887da338",
          "msg": "This\u00a0closes\u00a0#394",
          "file": "DoFnTester.java\u00a0",
          "lang": "java",
          "diff": [" -  private Map<String, Object> accumulators;"]
        }
      }
    ]
  },
  {
    "code": "3JWAMWe2YAA",
    "email": "pei@apache.org",
    "name": "Pei He",
    "project": "Apache/Beam",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "3cc7dfcb4e2e0123551c10f0821dd0d8f005480b",
          "msg": "Create separate factory methods for different generics types in StreamingGroupAlsoByWindowsDoFn and GroupAlsoByWindowsDoFn.",
          "file": "StreamingGroupAlsoByWindowsDoFn.java",
          "lang": "java",
          "diff": [
            " - protected StreamingGroupAlsoByWindowsDoFn(",
            " - WindowFn<?, W> windowFn,",
            " - KeyedCombineFn<K, VI, ?, VO> combineFn,",
            " - Coder<K> keyCoder,",
            " - Coder<VI> inputValueCoder) {",
            " - this.windowFn = windowFn;",
            " - this.combineFn = combineFn;",
            " - this.keyCoder = keyCoder;",
            " - this.inputValueCoder = inputValueCoder;",
            " - }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "3cc7dfcb4e2e0123551c10f0821dd0d8f005480b",
          "msg": "Create separate factory methods for different generics types in StreamingGroupAlsoByWindowsDoFn and GroupAlsoByWindowsDoFn.",
          "file": "StreamingGroupAlsoByWindowsDoFn.java",
          "lang": "java",
          "diff": [
            " - public void processElement(ProcessContext context) throws Exception {"
          ]
        }
      }
    ]
  },
  {
    "code": "0x7cA8C3RD8",
    "email": "relax@google.com",
    "name": "relax",
    "project": "Apache/Beam",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "77ba7a35cdae0b036791cce0682beefeb3fd809b",
          "msg": "Adds DynamicDestinations support to FileBasedSink",
          "file": "WriteFiles.java",
          "lang": "java",
          "diff": [
            " @@ -497,86 +578,110 @@ public void processElement(ProcessContext context) {",
            " if (computeNumShards == null && numShardsProvider == null) {",
            " numShardsView = null;",
            " - if (windowedWrites) {",
            " - TupleTag<FileResult> writtenRecordsTag = new TupleTag<>(\"writtenRecordsTag\");",
            " - TupleTag<KV<Integer, T>> unwrittedRecordsTag = new TupleTag<>(\"unwrittenRecordsTag\");",
            "- PCollectionTuple writeTuple = input.apply(\"WriteWindowedBundles\", ParDo.of(",
            " - new WriteWindowedBundles(unwrittedRecordsTag))",
            " - .withOutputTags(writtenRecordsTag, TupleTagList.of(unwrittedRecordsTag)));",
            " - PCollection<FileResult> writtenBundleFiles = writeTuple.get(writtenRecordsTag)",
            " - .setCoder(FileResultCoder.of(shardedWindowCoder));",
            " - PCollection<FileResult> writtenGroupedFiles =- writeTuple",
            " - .get(unwrittedRecordsTag)",
            " - .setCoder(KvCoder.of(VarIntCoder.of(), input.getCoder()))",
            " - .apply(\"GroupUnwritten\", GroupByKey.<Integer, T>create())",
            " - .apply(\"WriteUnwritten\", ParDo.of(",
            " - new WriteShardedBundles(ShardAssignment.ASSIGN_IN_FINALIZE)))",
            " - .setCoder(FileResultCoder.of(shardedWindowCoder));",
            " - results = PCollectionList.of(writtenBundleFiles).and(writtenGroupedFiles)",
            " - .apply(Flatten.<FileResult>pCollections());",
            " - } else {",
            " - results =",
            " - input.apply(\"WriteUnwindowedBundles\", ParDo.of(new WriteUnwindowedBundles()));",
            " - }",
            " + TupleTag<FileResult<DestinationT>> writtenRecordsTag = new TupleTag<>(\"writtenRecordsTag\");",
            " + TupleTag<KV<ShardedKey<Integer>, UserT>> unwrittedRecordsTag =",
            " + new TupleTag<>(\"unwrittenRecordsTag\");",
            " + String writeName = windowedWrites ? \"WriteWindowedBundles\" : \"WriteBundles\";",
            " + PCollectionTuple writeTuple =",
            " + input.apply(",
            " + writeName,",
            " + ParDo.of(new WriteBundles(windowedWrites, unwrittedRecordsTag, destinationCoder))",
            " + .withOutputTags(writtenRecordsTag, TupleTagList.of(unwrittedRecordsTag)));",
            " + PCollection<FileResult<DestinationT>> writtenBundleFiles =",
            " + writeTuple",
            " + .get(writtenRecordsTag)",
            " + .setCoder(FileResultCoder.of(shardedWindowCoder, destinationCoder));",
            " + PCollection<FileResult<DestinationT>> writtenGroupedFiles =",
            " + writeTuple",
            " + .get(unwrittedRecordsTag)",
            " + .setCoder(KvCoder.of(ShardedKeyCoder.of(VarIntCoder.of()), input.getCoder()))",
            " +.apply(\"GroupUnwritten\", GroupByKey.<ShardedKey<Integer>, UserT>create())",
            " + .apply(",
            " + \"WriteUnwritten\",",
            " + ParDo.of(new WriteShardedBundles(ShardAssignment.ASSIGN_IN_FINALIZE)))",
            " + .setCoder(FileResultCoder.of(shardedWindowCoder, destinationCoder));",
            " + results =",
            " + PCollectionList.of(writtenBundleFiles)",
            " + .and(writtenGroupedFiles)",
            " + .apply(Flatten.<FileResult<DestinationT>>pCollections());"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" fields should be removed",
        "commit": {
          "hash": "77ba7a35cdae0b036791cce0682beefeb3fd809b",
          "msg": "Adds DynamicDestinations support to FileBasedSink",
          "file": "DefaultFilenamePolicy.java",
          "lang": "java",
          "diff": [
            " - private static final Logger LOG = LoggerFactory.getLogger(DefaultFilenamePolicy.class);"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "7d13061cc36466c502bbc1f61d391743dd3739af",
          "msg": "Separate streaming writes into two pluggable components - CreateTables, and StreamingWriteTables. Also address many code review comments. Also merge with master.",
          "file": "WriteTables.java",
          "lang": "java",
          "diff": [
            " - List<String> partitionFiles = Lists.newArrayList(c.element().getValue()).get(0);",
            " - String jobIdPrefix = String.format(",
            " - c.sideInput(jobIdToken) + \"_0x%08x_%05d\", tableDestination.hashCode(), partition);",
            " + List<String> partitionFiles = Lists.newArrayList(c.element().getValue());",
            " + String jobIdPrefix = BigQueryHelpers.createJobId(",
            " + c.sideInput(jobIdToken), tableDestination, partition);"
          ]
        }
      }
    ]
  },
  {
    "code": "RHJsK8sU18U",
    "email": "robertwb@google.com",
    "name": "relax",
    "project": "Apache/Beam",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "44867300cb36dcad1cdfba70dbe093ec50a14388",
          "msg": "Remove en/decodeOuter and default encode/decode methods. Now only the context-free encode() and decode() methods are abstract.",
          "file": "StructuredCoder.java",
          "lang": "java",
          "diff": [
            " - @Deprecated",
            " - @Override",
            " - public void encodeOuter(T value, OutputStream outStream)",
            " - throws CoderException, IOException {",
            " - encode(value, outStream, Coder.Context.OUTER);",
            " - }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "b2e302239603b8d10aa7ce393df0dfe92cb82909",
          "msg": "Allow accessing properties of NO_FIRING pane. This pane is now considered the first, last, and only element in the window with 0 index and non-speculative index.",
          "file": "PaneInfo.java",
          "lang": "java",
          "diff": [
            " public boolean isLast() {",
            " - if (timing == Timing.UNKNOWN) {",
            " - throw new UnsupportedOperationException(\"Undefined for non-trigger-firing pane.\");",
            " - }",
            " return isLast;",
            " }",
            " public long getIndex() {",
            " - if (timing == Timing.UNKNOWN) {",
            " - throw new UnsupportedOperationException(\"Undefined for non-trigger-firing pane.\");",
            " - }",
            " return index;",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "P3iHopHs1DY",
    "email": "swegner@google.com",
    "name": "Scott Wegner",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "ac98c4a01f7e4b2bba3e99271b66e141e7555de8",
          "msg": "Evaluate display data from InProcessPipelineRunner",
          "file": "DisplayData.java",
          "lang": "java",
          "diff": [
            " try {",
            " subComponent.populateDisplayData(this);",
            " + } catch (PopulateDisplayDataException e) {",
            " + // Don't re-wrap exceptions recursively.",
            " + throw e;",
            " } catch (Throwable e) {",
            " String msg = String.format(\"Error while populating display data for component: %s\",",
            " namespace);",
            " - throw new RuntimeException(msg, e);",
            " + throw new PopulateDisplayDataException(msg, e);"
          ]
        }
      }
    ]
  },
  {
    "code": "ygsFm2rwf4w",
    "email": "tgroh@google.com",
    "name": "tgroh",
    "project": "Apache/Beam",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic wildcard types should not be used in return parameters",
        "commit": {
          "hash": "3ae94413000299908af06c712d9238023b099526",
          "msg": "This closes #2679",
          "file": "LengthPrefixCoder.java",
          "lang": "java",
          "diff": [
            " - public Coder<?> getValueCoder() {",
            " - return valueCoder;",
            " - }",
            " + /**",
            " + * Gets the value coder that will be prefixed by the length.",
            " + */",
            " + public Coder<T> getValueCoder() {",
            " + return valueCoder;",
            " + }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Standard outputs should not be used directly to log anything",
        "commit": {
          "hash": "99e60f4c0e28b28fbf3f115bedd363c93a40e930",
          "msg": "This closes #3238",
          "file": "BoundedDataset.java",
          "lang": "java",
          "diff": [
            " public void cache(String storageLevel) {",
            " - System.out.printf(",
            " - \"Persisting Dataset %s for RDD %s (id %s) at level %s. %s times before%n\",",
            " - this, getRDD(), getRDD().toDebugString(), storageLevel, timesCached++);",
            " - System.out.println(Joiner.on(\"\n\t\").join(new Throwable().getStackTrace()));",
            " // populate the rdd if needed",
            " getRDD().persist(StorageLevel.fromString(storageLevel));",
            " }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "99e60f4c0e28b28fbf3f115bedd363c93a40e930",
          "msg": "This closes #3238",
          "file": "TransformHierarchy.java",
          "lang": "java",
          "diff": [
            " - private void visit(",
            " - PipelineVisitor visitor,",
            " - Set<PValue> visitedValues,",
            " - Set<Node> visitedNodes,",
            " - Set<Node> passedComposites) {",
            " - if (getEnclosingNode() != null && !visitedNodes.contains(getEnclosingNode())) {",
            " - getEnclosingNode().visit(visitor, visitedValues, visitedNodes, passedComposites);",
            " - }",
            " - if (!visitedNodes.add(this)) {",
            " - LOG.debug(\"Not revisiting previously visited node {}\", this);",
            " - return;",
            " - } else if (childNodeOf(passedComposites)) {",
            " - LOG.debug(\"Not revisiting Node {} which is a child of a previously passed composite\", this);",
            " - return;",
            " - }",
            " + private void visit(PipelineVisitor visitor, Set<PValue> visitedValues) {",
            " if (!finishedSpecifying) {",
            " finishSpecifying();",
            " }",
            " if (!isRootNode()) {",
            " // Visit inputs.",
            " for (PValue inputValue : inputs.values()) {",
            " - Node valueProducer = getProducer(inputValue);",
            " - if (!visitedNodes.contains(valueProducer)) {",
            " - valueProducer.visit(visitor, visitedValues, visitedNodes, passedComposites);",
            " - }",
            " if (visitedValues.add(inputValue)) {",
            " - LOG.debug(\"Visiting input value {}\", inputValue);",
            " - visitor.visitValue(inputValue, valueProducer);",
            " + visitor.visitValue(inputValue, getProducer(inputValue));",
            " }",
            " }",
            " }",
            " if (isCompositeNode()) {",
            " - LOG.debug(\"Visiting composite node {}\", this);",
            " PipelineVisitor.CompositeBehavior recurse = visitor.enterCompositeTransform(this);",
            " if (recurse.equals(CompositeBehavior.ENTER_TRANSFORM)) {",
            " for (Node child : parts) {",
            " - child.visit(visitor, visitedValues, visitedNodes, passedComposites);",
            " + child.visit(visitor, visitedValues);",
            " }",
            " - } else {",
            " - passedComposites.add(this);",
            " }",
            " visitor.leaveCompositeTransform(this);",
            " } else {",
            " - LOG.debug(\"Visiting primitive node {}\", this);",
            " visitor.visitPrimitiveTransform(this);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "PIj62kfHVWk",
    "email": "jhyde@apache.org",
    "name": "Julian Hyde",
    "project": "Apache/Calcite",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Package declaration should match source file directory",
        "commit": {
          "hash": "a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55",
          "msg": "[CALCITE-306] Standardize code style for \"import package.*;\" Rename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419]. ",
          "file": "ArrayImpl.java",
          "lang": "java",
          "diff": [
            " - package net.hydromatic.avatica;",
            " -",
            " - import java.sql.*;",
            " - import java.util.*;",
            " + package org.apache.calcite.avatica;",
            " +",
            " + import java.sql.Array;",
            " + import java.sql.ResultSet;",
            " + import java.sql.SQLException;",
            " + import java.sql.Types;",
            " + import java.util.List;",
            " + import java.util.Map;"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "56cbfc3651b532e60315151d7882448ed2a1ba7d",
          "msg": "Introduce base class, Node, of Expression, and sibling class Statement. Special logic for blocks, since in a lambda function we quite often want to convert an expression to a block \"{ return expression; }\". BlockExpression, LoopExpression, WhileExpression, GotoExpression are misleadingly named, for now. Implement aggregate, sum, average, min, max on Enumerable.",
          "file": "Expressions.java",
          "lang": "java",
          "diff": [
            " - // public static <T, F extends Function<? extends T>>",
            " - // FunctionExpression<F> lambda(",
            " - // Expression body,",
            " - // boolean tailCall,",
            " - // ParameterExpression... parameters)",
            " - // {",
            " - // return lambda(body, tailCall, toList(parameters));",
            " - // }"
          ]
        }
      }
    ]
  },
  {
    "code": "Ni2y0utuASg",
    "email": "Alex.Kolonitsky@gmail.com",
    "name": "alexkolonitsky",
    "project": "Apache/Cayenne",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "09c6da925df7ea651394e6cc33251b4c20a93aa3",
          "msg": "Merge remote-tracking branch 'apache/master'",
          "file": "DbLoader.java",
          "lang": "java",
          "diff": [
            " - DbPath path = new DbPath(fkEntity.getCatalog(), fkEntity.getSchema(), fkEntity.getName());"
          ]
        }
      }
    ]
  },
  {
    "code": "q5kMpTH5i8E",
    "email": "aadamchik@apache.org",
    "name": "aadamchik",
    "project": "Apache/Cayenne",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "4e887c91a5e6a84fe2bb30119dff96ec1133b790",
          "msg": "CAY-1757 ROP: Faulting entity relationship resets uncommitted modifications made to its reverse relationship",
          "file": "PersistentObjectList.java",
          "lang": "java",
          "diff": [
            " @@ -298,10 +298,7 @@ public class PersistentObjectList extends RelationshipFault implements List, Val",
            " // now that we obtained the lock, check",
            " // if another thread just resolved the list",
            " if (isFault()) {",
            " - List localList = resolveFromDB();",
            " -",
            " - mergeLocalChanges(localList);",
            " - this.objectList = localList;",
            " +this.objectList = resolveFromDB();",
            " }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "271b040cced408b698cee51663a978d5a0b917c4",
          "msg": "  1) make token name a constructor parameter and remove all other implementations of this method\n2) I've created builders for domain objects (i.e. DataMap, DbObj Entity, DbObj Attribute, ...) and Factory for all builders; Main goal to provide easy way of construction objects and fill them partially with only data that necessary for test case, everything else required to make object valid will be generated randomly.\n3) DbMergerTest - test correct identification of DbToModel changes\n4) TokensReversTest - test compliance with the invariant token.reverse.reverse == token\n5) TokensToModelExecution - test application correctness of DbToModel tokens\n6) new dependency datafactory - in order to use random data in tests where exact value not really important",
          "file": "DbMerger.java",
          "lang": "java",
          "diff": [
            "@@ -405,52 +424,16 @@ public class DbMerger {",
            " /**",
            " /* Return true if the two unordered {@link Collection}s of {@link DbJoin}s are",
            " /* equal. Entity and Attribute names are compared case insensitively.",
            " /+*",
            " +* TODO complexity n^2; sort both collection and go through them to compare = 2*n*log(n) + n",
            "  */",
            " - private static boolean equalDbJoinCollections(",
            " - Collection<DbJoin> j1s,",
            " - Collection<DbJoin> j2s) {",
            " + private static boolean equalDbJoinCollections(Collection<DbJoin> j1s, Collection<DbJoin> j2s) {",
            " if (j1s.size() != j2s.size()) {",
            " return false;",
            " }",
            " for (DbJoin j1 : j1s) {",
            "- boolean foundPair = false;",
            "- for (DbJoin j2 : j2s) {",
            "- if ((j1.getSource() == null) || (j1.getSource().getEntity() == null)) {",
            " - continue;",
            " - }",
            " - f ((j1.getTarget() == null) || (j1.getTarget().getEntity() == null)) {",
            " - continue;",
            " - }",
            " - if ((j2.getSource() == null) || (j2.getSource().getEntity() == null)) {",
            " - continue;",
            " - }",
            " - if ((j2.getTarget() == null) || (j2.getTarget().getEntity() == null)) {",
            " - continue;",
            " - }",
            " - // check entity name",
            " - if (!j1.getSource().getEntity().getName().equalsIgnoreCase(",
            " - j2.getSource().getEntity().getName())) {",
            " - continue;",
            " - }",
            " - if (!j1.getTarget().getEntity().getName().equalsIgnoreCase(",
            " - j2.getTarget().getEntity().getName())) {",
            " - continue;",
            " - }",
            " - // check attribute name",
            " - if (!j1.getSourceName().equalsIgnoreCase(j2.getSourceName())) {",
            " - continue;",
            " - }",
            " - if (!j1.getTargetName().equalsIgnoreCase(j2.getTargetName())) {",
            " - continue;",
            " - }",
            " - foundPair = true;",
            " - break;",
            " - }",
            " - if (!foundPair) {",
            " + if (!havePair(j2s, j1)) {",
            " return false;",
            " }",
            " }",
            " @@ -458,23 +441,22 @@ public class DbMerger {",
            " return true;",
            " }",
            " - private static final class LoaderDelegate implements DbLoaderDelegate {",
            " - public void dbEntityAdded(DbEntity ent) {",
            " - }",
            " - public void dbEntityRemoved(DbEntity ent) {",
            " - }",
            " - public void objEntityAdded(ObjEntity ent) {",
            " - }",
            " + private static boolean havePair(Collection<DbJoin> j2s, DbJoin j1) {",
            " + for (DbJoin j2 : j2s) {",
            " + if (!isNull(j1.getSource()) && !isNull(j1.getTarget()) &&",
            " + !isNull(j2.getSource()) && !isNull(j2.getTarget()) &&",
            " + j1.getSource().getEntity().getName().equalsIgnoreCase(j2.getSource().getEntity().getName()) &&",
            " + j1.getTarget().getEntity().getName().equalsIgnoreCase(j2.getTarget().getEntity().getName()) &&",
            " + j1.getSourceName().equalsIgnoreCase(j2.getSourceName()) &&",
            " + j1.getTargetName().equalsIgnoreCase(j2.getTargetName())) {",
            " - public void objEntityRemoved(ObjEntity ent) {",
            " - }",
            " - public boolean overwriteDbEntity(DbEntity ent) throws CayenneException {",
            " - return false;",
            " + return true;",
            " + }",
            " }",
            " + return false;",
            " + }",
            " + private static boolean isNull(DbAttribute attribute) {",
            " + return attribute == null || attribute.getEntity() == null;",
            " }",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Nested blocks of code should not be left empty",
        "commit": {
          "hash": "26d8434d9d79e2e9756c3ec158da9386a8bfa817",
          "msg": " CAY-2026 Java 7\n* Using AutoCloseable where possible\n* Fixing closeable resource management throughout the code",
          "file": "DBCPDataSourceFactory.java",
          "lang": "java",
          "diff": [
            "@@ -71,14 +71,9 @@ public class DBCPDataSourceFactory implements DataSourceFactory {",
            " private Properties getProperties(Resource dbcp2Configuration) throws IOException {",
            " Properties properties = new Properties();",
            " - InputStream in = dbcp2Configuration.getURL().openStream();",
            " - try {",
            " + try (InputStream in = dbcp2Configuration.getURL().openStream();) {",
            " properties.load(in);",
            " - } finally {",
            " - try {",
            " - in.close();",
            " - } catch (IOException e) {",
            " - }",
            " }",
            " return properties;"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "TestCases should contain tests",
        "commit": {
          "hash": "8d8e4a60a4a6636d3c4fbfa5a8bf7520c584e400",
          "msg": " unit test refactoring fixing test inheritance",
          "file": "QueryLoggerTest.java",
          "lang": "java",
          "diff": [
            " @@ -19,12 +19,13 @@",
            " package org.apache.cayenne.access;",
            " - import org.apache.cayenne.unit.CayenneCase;",
            " + import junit.framework.TestCase;",
            " +",
            " import org.apache.cayenne.util.IDUtil;",
            " - public class QueryLoggerTest extends CayenneCase {",
            " + @Deprecated",
            " + public class QueryLoggerTest extends TestCase {",
            " +",
            " public void testSqlLiteralForObject() throws Exception {",
            " StringBuffer buf = new StringBuffer();"
          ]
        }
      }
    ]
  },
  {
    "code": "kLCSPLMHrk0",
    "email": "ancarseni@gmail.com",
    "name": "Arseni Bulatski",
    "project": "Apache/Cayenne",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "b30e5eb5d9e22f7ff0c7d3e8763d9b990bd8cb4d",
          "msg": "Cgen task refactoring",
          "file": "GeneratorController.java",
          "lang": "java",
          "diff": [
            " @@ -1,561 +0,0 @@",
            " - ///**",
            " - // * A mode-specific part of the code generation dialog.",
            " - // */",
            " - // public abstract class GeneratorController extends CayenneController {",
            " - //    protected String mode = ArtifactsGenerationMode.ALL.getLabel();",
            " - //    protected Map<DataMap, DataMapDefaults> mapPreferences;",
            " - //    private String outputPath;",
            " - //    public GeneratorController(CodeGeneratorControllerBase parent) {",
            " - //        super(parent);",
            " - //        createDefaults();",
            " - //        createView();",
            " - //        initBindings(new BindingBuilder(getApplication().getBindingFactory(), this));",
            " - //    }",
            " - //    public String getOutputPath() {",
            " - //        return outputPath;",
            " - //    }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "d9db6e3123eae9e2863058c88d455837a244821c",
          "msg": "Add loading cgen config loading from datamap to maven, ant and gradle plugins",
          "file": "CustomModePanel.java",
          "lang": "java",
          "diff": [
            "@@ -29,18 +29,23 @@",
            " public class CustomModePanel extends GeneratorControllerPanel {",
            " - private ComboBoxAdapter generationMode;",
            " - private ComboBoxAdapter subclassTemplate;",
            " - private ComboBoxAdapter superclassTemplate;",
            " - private ComboBoxAdapter embeddableTemplate;",
            " - private ComboBoxAdapter embeddableSuperTemplate;",
            " - private ComboBoxAdapter dataMapTemplate;",
            " - private ComboBoxAdapter dataMapSuperTemplate;",
            " + private ComboBoxAdapter<String> generationMode;",
            " + private ComboBoxAdapter<String> subclassTemplate;",
            " + private ComboBoxAdapter<String> superclassTemplate;",
            " + private ComboBoxAdapter<String> embeddableTemplate;",
            " + private ComboBoxAdapter<String> embeddableSuperTemplate;",
            " + private ComboBoxAdapter<String> dataMapTemplate;",
            " + private ComboBoxAdapter<String> dataMapSuperTemplate;"
          ]
        }
      }
    ]
  },
  {
    "code": "0g-I0INB-mM",
    "email": "dkazimirchyk@gmail.com",
    "name": "Dzmitry Kazimirchyk",
    "project": "Apache/Cayenne",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Local variables should not shadow class fields",
        "commit": {
          "hash": "a265b3aba5f8c2d0b4a8ef08d7d00b80a82724ab",
          "msg": "CAY-2060 Ongoing work on replacing actual query objects stored in the DataMap with query descriptors.",
          "file": "QueryType.java",
          "lang": "java",
          "diff": [
            " @@-164,38 +140,30 @@ public void createQuery() {",
            " - public Query getSelectedQuery() {",
            " - return selectedQuery;",
            " - }",
            " - public void setSelectedQuery(AbstractQuery selectedQuery) {",
            " - this.selectedQuery = selectedQuery;",
            " + public String getSelectedQuery() {",
            " + return type;",
            " }",
            " public void setObjectSelectQuery() {",
            " - selectedQuery = objectSelectQuery;",
            " + this.type = QueryDescriptor.SELECT_QUERY;",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "74f65f9756ef49b2d830fe1ef19f18f74547387d",
          "msg": "CAY-2060 Restore code which was left commented out by accident",
          "file": "RawQueryPropertiesPanel.java",
          "lang": "java",
          "diff": [
            " @@ -126,9 +123,7 @@ protected void initView() {",
            " public void initFromModel(QueryDescriptor query) {",
            " super.initFromModel(query);",
            " - // EntityResolver entRes = new EntityResolver(((DataChannelDescriptor) mediator",
            " - // .getProject()",
            " - // .getRootNode()).getDataMaps());"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "74f65f9756ef49b2d830fe1ef19f18f74547387d",
          "msg": "CAY-2060 Restore code which was left commented out by accident",
          "file": "DataMapNamespaceTest.java",
          "lang": "java",
          "diff": [
            " @@ -111,17 +110,19 @@ public class DataMapNamespaceTest {",
            " public void testGetQuery() throws Exception {",
            " MockMappingNamespace namespace = new MockMappingNamespace();",
            " map.setNamespace(namespace);",
            " + QueryDescriptor q1 = QueryDescriptor.selectQueryDescriptor();",
            " + q1.setName(\"query\");",
            " + QueryDescriptor q2 = QueryDescriptor.selectQueryDescriptor();",
            " + q2.setName(\"query\");",
            " + namespace.addQueryDescriptor(q1);",
            " + assertSame(q1, map.getQueryDescriptor(\"query\"));",
            " + map.addQueryDescriptor(q2);",
            " + assertSame(q2, map.getQueryDescriptor(\"query\"));",
            " + map.removeQueryDescriptor(\"query\");",
            " + assertSame(q1, map.getQueryDescriptor(\"query\"));",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "o3rl0fJvens",
    "email": "jotpe@posteo.de",
    "name": "jotpe",
    "project": "Apache/Cayenne",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "349fcde6ca971c7451af9979a9830e0a4a4ab111",
          "msg": "replaced NullPointerException with IllegalArguementException (checkstyle warning) replaced RuntimeExcpetion with UnsupportedOperationException (checkstyle warning) modified JavaDoc for Exception handling checked instanceof for wrong variable in line 318",
          "file": "CayenneDataObject.java",
          "lang": "java",
          "diff": [
            " - throw new RuntimeException(\"setToManyTarget only operates with Map and Collection types\");",
            " + throw new UnsupportedOperationException(\"setToManyTarget operates only with Map or Collection types\");"
          ]
        }
      }
    ]
  },
  {
    "code": "-qP1WrEmEbA",
    "email": "ollybondareva@gmail.com",
    "name": "Olga Tkachova",
    "project": "Apache/Cayenne",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "29671e75b38620811c2bfc6c0f2b0af01d4942dd",
          "msg": "Revert to the old Reverse Engineering UI style",
          "file": "CellRenderers.java",
          "lang": "java",
          "diff": [
            " @@ -121,18 +120,6 @@ else if (object instanceof Attribute) {",
            " else if (object instanceof Embeddable) {",
            " return embeddableIcon;",
            " }",
            " - else if (object instanceof DbColumn) {",
            " - return attributeIcon;",
            " - }",
            " - else if (object instanceof DbProcedure) {",
            " - return procedureIcon;",
            " - }",
            " - else if (object instanceof DbEntity) {",
            " - return dbEntityIcon;",
            " - }",
            " - else if (object instanceof DbCatalog) {",
            " - return catalogIcon;",
            " }",
            " return null;",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" fields should be removed",
        "commit": {
          "hash": "29671e75b38620811c2bfc6c0f2b0af01d4942dd",
          "msg": "Revert to the old Reverse Engineering UI style",
          "file": "ReverseEngineeringScrollPane.java",
          "lang": "java",
          "diff": [
            " @@ -1,34 +0,0 @@",
            " - import javax.swing.JScrollPane;",
            " - public class ReverseEngineeringScrollPane extends JScrollPane {",
            " - private ReverseEngineeringView reverseEngineeringView;",
            " - public ReverseEngineeringScrollPane(ReverseEngineeringView reverseEngineeringView) {",
            " - super(reverseEngineeringView);",
            " - this.reverseEngineeringView = reverseEngineeringView;",
            " - }",
            " - }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "29671e75b38620811c2bfc6c0f2b0af01d4942dd",
          "msg": "Revert to the old Reverse Engineering UI style",
          "file": "ReverseEngineeringController.java",
          "lang": "java",
          "diff": [
            " @@ -1,243 +0,0 @@",
            " - private void buildDBProperties() throws Exception {",
            " - ClassLoadingService classLoader = getApplication().getClassLoadingService();",
            " - this.dataSource = connectionInfo.makeDataSource(classLoader);",
            " - this.adapter = connectionInfo.makeAdapter(classLoader);",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "0z6BPQ8jUlk",
    "email": "stariy95@gmail.com",
    "name": "Nikita Timofeev",
    "project": "Apache/Cayenne",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Anonymous inner classes containing only one method should become lambdas",
        "commit": {
          "hash": "b34c76b24a73355fb4c1085dfc10c4741668ea60",
          "msg": "CAY-2368 ColumnSelect: Property.self() translates into wrong SQL code",
          "file": "DefaultSelectTranslator.java",
          "lang": "java",
          "diff": [
            " @@ -402,16 +402,12 @@ public class DefaultSelectTranslator extends QueryAssembler implements SelectTra ",
            " QualifierTranslator qualifierTranslator = adapter.getQualifierTranslator(this);",
            " AccumulatingBindingListener bindingListener = new AccumulatingBindingListener();",
            " final String[] joinTableAliasForProperty = {null};",
            " - joinListener = new AddJoinListener() {",
            " - @Override",
            " - public void joinAdded() {",
            " - // capture last alias for joined table, will use it to resolve object columns",
            " - joinTableAliasForProperty[0] = getCurrentAlias();",
            " - }",
            " - };",
            " + // capture last alias for joined table, will use it to resolve object columns",
            " + joinListener = () -> joinTableAliasForProperty[0] = getCurrentAlias();",
            " setAddBindingListener(bindingListener);"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "@Override should be used on overriding and implementing methods",
        "commit": {
          "hash": "ec5df09b76d0415985ea50a9b29ab77f22a4304e",
          "msg": "Minor code cleanup",
          "file": "SQLTemplatePrefetchTab.java",
          "lang": "java",
          "diff": [
            " @@ -433,6 +428,7 @@ public Object getValueAt(int row, int column) {",
            " }",
            " }",
            " + @Override",
            " public Class getColumnClass(int column) {",
            " switch (column) {",
            " case 0:"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "bc8441a06e9331fcd167c0c77acc18c6e652e493",
          "msg": "Modeler: always force run code generator",
          "file": "GeneratorController.java",
          "lang": "java",
          "diff": [
            " @@ -160,12 +160,7 @@ public abstract class GeneratorController extends CayenneController {",
            " // remove generic entities...",
            " Collection<ObjEntity> selectedEntities = new ArrayList<>(getParentController().getSelectedEntities());",
            " - Iterator<ObjEntity> it = selectedEntities.iterator();",
            " - while (it.hasNext()) {",
            " - if (it.next().isGeneric()) {",
            " - it.remove();",
            " - }",
            " - }",
            " + selectedEntities.removeIf(ObjEntity::isGeneric);"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" methods should be removed",
        "commit": {
          "hash": "040bfbce6c2e79b1686f392964c6204477ec3e59",
          "msg": "Own template render implementation: first draft",
          "file": "SQLTemplateParserTokenManager.java",
          "lang": "java",
          "diff": [
            " @@ -228,22 +235,14 @@ private int jjMoveStringLiteralDfa4_0(long old0, long active0)",
            " - private int jjStartNfaWithStates_0(int pos, int kind, int state)",
            " - {",
            " - jjmatchedKind = kind;",
            " - jjmatchedPos = pos;",
            " - try { curChar = input_stream.readChar(); }",
            " - catch(java.io.IOException e) { return pos + 1; }",
            " - return jjMoveNfa_0(state, pos + 1);",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "sfOZ34dC83w",
    "email": "gardgregory@gmail.com",
    "name": "Gary Gregory",
    "project": "Apache/Commons IO",
    "first_commit": "2006",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "7c111fecd837f22f1f8c1faa38dbef0f4a0e91ee",
          "msg": "[IO-632] Add PathUtils for operations on NIO Path. Refactor for counting longs and big integers. Add cleaning visitor.",
          "file": "PathCountsTest.java",
          "lang": "java",
          "diff": [
            " public class PathCountsTest {",
            " + @Test",
            " + public void testCtor() {",
            " + final PathCounts pathCounts = new PathCounts();",
            " + Assertions.assertEquals(pathCounts.getByteCount(), 0);",
            " + Assertions.assertEquals(pathCounts.getDirectoryCount(), 0);",
            " + Assertions.assertEquals(pathCounts.getFileCount(), 0);",
            " + }",
            " ",
            " @Test",
            " public void testToString() {",
            " // Does not blow up",
            " new PathCounts().toString();",
            " }",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Try-with-resources should be used",
        "commit": {
          "hash": "4dc97b64005f0083b2facaa70f661138a4fa3fc0",
          "msg": "[IO-505] Deprecated of all IOUtils.closeQuietly() methods and use try-with-resources internally.",
          "file": "MagicNumberFileFilter.java",
          "lang": "java",
          "diff": [
            " public boolean accept(final File file) {",
            " if (file != null && file.isFile() && file.canRead()) {",
            " - RandomAccessFile randomAccessFile = null;",
            " try {",
            " - final byte[] fileBytes = new byte[this.magicNumbers.length];",
            " - randomAccessFile = new RandomAccessFile(file, \"r\");",
            " - randomAccessFile.seek(byteOffset);",
            " - final int read = randomAccessFile.read(fileBytes);",
            " - if (read != magicNumbers.length) {",
            " - return false;",
            " + try (RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\")) {",
            " + final byte[] fileBytes = new byte[this.magicNumbers.length];",
            " + randomAccessFile.seek(byteOffset);",
            " + final int read = randomAccessFile.read(fileBytes);",
            " + if (read != magicNumbers.length) {",
            " + return false;",
            " + }",
            " + return Arrays.equals(this.magicNumbers, fileBytes);",
            " }",
            " - return Arrays.equals(this.magicNumbers, fileBytes);",
            " - } catch (final IOException ioe) {"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "154cb7648ffde863b2548eba10b330c51a103c6a",
          "msg": "[IO-632] Add PathUtils for operations on NIO Path. Refactor to add PathUtils.copyDirectory(Path, Path, CopyOption...)",
          "file": "DeletingPathVisitor.java",
          "lang": "java",
          "diff": [
            " if (PathUtils.isEmptyDirectory(dir)) {",
            " Files.deleteIfExists(dir);",
            " }",
            " - super.postVisitDirectory(dir, exc);",
            " - return FileVisitResult.CONTINUE;",
            " + return super.postVisitDirectory(dir, exc);"
          ]
        }
      }
    ]
  },
  {
    "code": "5abux2s5RX8",
    "email": "jochen.wiedmann@softwareag.com",
    "name": "Jochen Wiedmann",
    "project": "Apache/Commons IO",
    "first_commit": "2007",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "\"readResolve\" methods should be inheritable",
        "commit": {
          "hash": "186225b7d611ab2252024d4a38d8fb1091b7ebab",
          "msg": "Merged in changes from 1.3 branch.",
          "file": "FileCleaningTracker.java",
          "lang": "java",
          "diff": [
            " //",
            " - /**",
            " - * This method is called when an instance is deserialized.",
            " - * It replaces the deserialized instance with a new, fresh",
            " - * instance.",
            " - * @return A new instance, which hasn't been in use so far.",
            " - * @throws ObjectStreamException Not actually thrown.",
            " - */",
            " - private Object readResolve() throws ObjectStreamException {",
            " - return new FileCleaningTracker();",
            " - }",
            " -}"
          ]
        }
      }
    ]
  },
  {
    "code": "P49ZPxQgLW0",
    "email": "jukka@apache.org",
    "name": "Jukka Zitting",
    "project": "Apache/Commons IO",
    "first_commit": "2008",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "2853baafcb5ffc93d087efc230ce79e0bbab0536",
          "msg": "IO-192: Tagged input and output streams. Added static checker methods on TaggedIOException. This simplified the tagged stream classes and should make it easier to reuse just the TaggedIOException class. Made the tag object Serializable. Switched to using a unique id (UUID) object per tagged stream instead of the stream instance as the tag that binds thrown exceptions to the tagged stream.",
          "file": "TaggedInputStream.java ",
          "lang": "java",
          "diff": [
            " - public boolean isCauseOf(IOException exception) {",
            " - if (exception instanceof TaggedIOException) {",
            " - TaggedIOException tagged = (TaggedIOException) exception;",
            " - return this == tagged.getTag();",
            " - } else {",
            " - return false;",
            " - }",
            " + public boolean isCauseOf(Throwable exception) {",
            " + return TaggedIOException.isTaggedWith(exception, tag);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "_VZHHrFUZr8",
    "email": "krosenvold@apache.org",
    "name": "Kristian Rosenvold",
    "project": "Apache/Commons IO",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "e4e9fc66487aa7386917030810fd468856483ab4",
          "msg": "Added private and test-scoped sleep method that actually sleeps for a guaranteed minimal time",
          "file": "TailerTest.java",
          "lang": "java",
          "diff": [
            " final long testDelayMillis = delay * 10;",
            " - Thread.sleep(testDelayMillis);",
            " + TestUtils.sleep(testDelayMillis);"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "51f13c846dae950e1d27693c9e23c1063945210f",
          "msg": "Updated for Java7 features",
          "file": "Java7Support.java",
          "lang": "java",
          "diff": [
            " return result.booleanValue();",
            " - } catch (IllegalAccessException e) {",
            " - throw new RuntimeException(e);",
            " - } catch (InvocationTargetException e) {",
            " + } catch (IllegalAccessException | InvocationTargetException e) {"
          ]
        }
      }
    ]
  },
  {
    "code": "SOJUvcJTLPo",
    "email": "niallp@apache.org",
    "name": "Niall Pemberton",
    "project": "Apache/Commons IO",
    "first_commit": "2006",
    "cqs": [
      {
        "td_type": "Documentation Debt",
        "td_issue": "@Override should be used on overriding and implementing methods",
        "commit": {
          "hash": "91509112bb42d52eb4cef40f2dee16a3633b446f",
          "msg": "IO-140 annotate with @override and @deprecated",
          "file": "FileDeleteStrategy.java",
          "lang": "java",
          "diff": [
            " *",
            " * @return a string describing the delete strategy",
            " */",
            " + @Override",
            " public String toString() {",
            " return \"FileDeleteStrategy[\" + name + \"]\";",
            " }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
          "msg": "IO-140 JDK 1.5 changes: Use generics",
          "file": "FileSystemUtils.java",
          "lang": "java",
          "diff": [
            " // perform the command, asking for up to 3 lines (header, interesting, overflow)",
            " - List lines = performCommand(cmdAttribs, 3);",
            " + List<String> lines = performCommand(cmdAttribs, 3);"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
        "commit": {
          "hash": "6d6a73a689ce734d094f71723752cde23a1d9259",
          "msg": "IO-140 JDK 1.5 changes: Use StringBuilder (not-sync) instead of StringBuffer",
          "file": "PrefixFileFilter.java",
          "lang": "java",
          "diff": [
            " public String toString() {",
            " - StringBuffer buffer = new StringBuffer();",
            " +StringBuilder buffer = new StringBuilder();"
          ]
        }
      },
      {
        "code": "RZHzSiMNCQ0",
        "email": "amestry@cloudera.com",
        "name": "Ashutosh Mestry",
        "project": "Apache/Altlas",
        "first_commit": "2017",
        "cqs": [
            {
                "td_type": "Defect Debt",
                "td_issue": "Raw types should not be used",
                "commit": {
                    "hash": "2b38550b88ea201a3bd9169c44c0ede900ec1dd8",
                    "msg": "ATLAS-3737: Refactoring: Support multiple instances of AtlasGraph",
                    "file": "EntityConsumer.java",
                    "lang": "java",
                    "diff": [
                        " - for (AtlasEntity.AtlasEntityWithExtInfo e : entityBuffer) {",
                        " + List<AtlasEntity.AtlasEntityWithExtInfo> localBuffer = new ArrayList<>(entityBuffer);",
                        " + entityBuffer.clear();"
                    ]
                }
            }
        ]
      },
      {
        "code": "SDBtZyRmVEY",
        "email": "nixon@apache.org",
        "name": "nixonrodrigues",
        "project": "Apache/Altlas",
        "first_commit": "2017",
        "cqs": [
          {
            "td_type": "Defect Debt",
            "td_issue": "Raw types should not be used",
            "commit": {
              "hash": "024f5d52d0a972616362ac9b15ed7a417384026f",
              "msg": "Revert \"ATLAS-3320: Import Service. Support concurrent ingest.\"",
              "file": "EntityCreationManager.java",
              "lang": "java",
              "diff": [
                " - public int read(EntityImportStream entityStream) {",
                " - int currentIndex = 0;",
                " - AtlasEntity.AtlasEntityWithExtInfo entityWithExtInfo;",
                " - while ((entityWithExtInfo = entityStream.getNextEntityWithExtInfo()) != null) {",
                " - AtlasEntity entity = entityWithExtInfo != null ? entityWithExtInfo.getEntity() : null;",
                " - if (entity == null) {",
                " - continue;",
                " - }"
              ]
            }
          }
        ]
      },
      {
        "code": "I11ERhk32TA",
        "email": "earhart@google.com",
        "name": "earhart",
        "project": "Apache/Beam",
        "first_commit": "2014",
        "cqs": [
          {
            "td_type": "Defect Debt",
            "td_issue": "Raw types should not be used",
            "commit": {
              "hash": "3aa23436ed57daab40b2a3ce28c2c6accf8b9aff",
              "msg": "Fixing a few more warnings.",
              "file": "WindowedValue.java",
              "lang": "java",
              "diff": [
                " - return new WindowedValue(value,",
                " - new Instant(Long.MIN_VALUE),",
                " - new ArrayList<>());",
                " + return new WindowedValue<V>(value,",
                " + new Instant(Long.MIN_VALUE),",
                " + Collections.<BoundedWindow>emptyList());"
              ]
            }
          }
        ]
      },
      {
        "code": "aEh4bPfUtCk",
        "email": "peay@protonmail.com",
        "name": "peay",
        "project": "Apache/Beam",
        "first_commit": "2017",
        "cqs": [
          {
            "td_type": "Defect Debt",
            "td_issue": "Generic exceptions should never be thrown",
            "commit": {
              "hash": "10fc5f86fac066423c77d9b6d9e7ed87ab32ef01",
              "msg": "[BEAM-2114] Throw instead of warning when KafkaIO cannot infer coder",
              "file": "KafkaIO.java",
              "lang": "java",
              "diff": [
                " - throw new RuntimeException(\"Could not extract deserializer type from \" + deserializer);"
              ]
            }
          }
        ]
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
          "msg": "Replace BOM detection and XML guess logic with BOMInputStream",
          "file": "XmlStreamReader.java",
          "lang": "java",
          "diff": [
            " - if (bytes[0] == 0x00 && bytes[1] == 0x3C && bytes[2] == 0x00",
            " - && bytes[3] == 0x3F) {",
            " - encoding = UTF_16BE;",
            " - } else if (bytes[0] == 0x3C && bytes[1] == 0x00 && bytes[2] == 0x3F",
            " - && bytes[3] == 0x00) {",
            " - encoding = UTF_16LE;",
            " - } else if (bytes[0] == 0x3C && bytes[1] == 0x3F && bytes[2] == 0x78",
            " - && bytes[3] == 0x6D) {",
            " - encoding = UTF_8;",
            " - } else if (bytes[0] == 0x4C && bytes[1] == 0x6F && bytes[2] == 0xA7",
            " - && bytes[3] == 0x94) {",
            " - encoding = EBCDIC;",
            " - }",
            " - return encoding;"
          ]
        }
      }
    ]
  },
  {
    "code": "AvJ0M-83JKQ",
    "email": "scolebourne@apache.org",
    "name": "Stephen Colebourne",
    "project": "Apache/Commons IO",
    "first_commit": "2002",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "9c18390762527fe8d1bf7af8ded586566cdbb59c",
          "msg": "IO-99 - FileCleaner.exitWhenFinished, to allow the thread to be terminated",
          "file": "FileCleaner.java",
          "lang": "java",
          "diff": [
            " - private static Thread reaper = new Thread(\"File Reaper\") {",
            " - /**",
            " - * Run the reaper thread that will delete files as their associated",
            " - * marker objects are reclaimed by the garbage collector.",
            " - */",
            " - public void run() {",
            " - for (;;) {",
            " - Tracker tracker = null;",
            " - try {",
            " - // Wait for a tracker to remove.",
            " - tracker = (Tracker) q.remove();",
            " - } catch (Exception e) {",
            " - continue;",
            " - }",
            " - tracker.delete();",
            " - tracker.clear();",
            " - trackers.remove(tracker);",
            " - }",
            " - }",
            " - };"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
        "commit": {
          "hash": "9c18390762527fe8d1bf7af8ded586566cdbb59c",
          "msg": "IO-99 - FileCleaner.exitWhenFinished, to allow the thread to be terminated",
          "file": "FileCleaner.java",
          "lang": "java",
          "diff": [
            " - private static Collection /* Tracker */ trackers = new Vector();"
          ]
        }
      }
    ]
  },
  {
    "code": "3TETTAMKx1M",
    "email": "sebb@apache.org",
    "name": "Sebastian Bazley",
    "project": "Apache/Commons IO",
    "first_commit": "2008",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "f584ed909815d3020e718c8dd9c1f335c7a1543d",
          "msg": "IO-311 IOUtils.read(InputStream/Reader) ignores the offset parameter",
          "file": "IOUtils.java",
          "lang": "java",
          "diff": [
            " public static int read(InputStream input, byte[] buffer, int offset, int length) throws IOException {",
            "if (length < 0) {",
            " throw new IllegalArgumentException(\"Length must not be negative: \" + length);",
            " }",
            " int remaining = length;",
            " while (remaining > 0) {",
            " int location = length - remaining;",
            " - int count = input.read(buffer, location, remaining);",
            " + int count = input.read(buffer, offset + location, remaining);"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Overrides should match their parent class methods in synchronization",
        "commit": {
          "hash": "5c8a6f44016a12aee9e485d94fc295fcd27375a6",
          "msg": "IO-312 CharSequenceInputStream(CharSequence s, Charset charset, int bufferSize) ignores bufferSize",
          "file": "CharSequenceInputStream.java",
          "lang": "java",
          "diff": [
            " @Override",
            " - public void reset() throws IOException {",
            " + public synchronized void reset() throws IOException {",
            " if (this.mark != -1) {",
            " this.cbuf.position(this.mark);",
            " this.mark = -1;"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should not be ignored",
        "commit": {
          "hash": "cbc5a146154ada255d491d6509497d0d57bad336",
          "msg": "IO-356 CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size. Fix code so skip relates to the encoded bytes; reset now re-encodes the data up to the point of the mark",
          "file": "CharSequenceInputStreamTest.java",
          "lang": "java",
          "diff": [
            " public void testBufferedRead_AvailableCharset() throws IOException {",
            " for (final String csName : Charset.availableCharsets().keySet()) {",
            " // prevent java.lang.UnsupportedOperationException at sun.nio.cs.ext.ISO2022_CN.newEncoder.",
            " - if (Charset.forName(csName).canEncode()) {",
            " + if (Charset.forName(csName).canEncode() && ! \"COMPOUND_TEXT\".equalsIgnoreCase(csName)) {",
            " testBufferedRead(TEST_STRING, csName);",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "tcPxXalhIRU",
    "email": "gpetracek@apache.org",
    "name": "Gerhard Petracek",
    "project": "Apache/Deltaspike",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "7177eda1fa84d3e2db4119c74d470e5c344133bf",
          "msg": "DELTASPIKE-1320 spi for global-alternatives",
          "file": "ExcludeExtension.java",
          "lang": "java",
          "diff": [
            " - Map<String, String> allProperties = ConfigResolver.getAllProperties();",
            " - for (Map.Entry<String, String> property : allProperties.entrySet())",
            " - {",
            " - if (activeQualifierLabel != null && property.getKey().startsWith(activeQualifierLabel))",
            " - {",
            " - String interfaceName = property.getKey().substring(activeQualifierLabel.length());",
            " - String implementation = property.getValue();",
            " - if (LOG.isLoggable(Level.FINE))",
            " - {",
            " - LOG.fine(\"Enabling labeled alternative for interface \"",
            " - + interfaceName + \": \" + implementation);",
            " - }",
            " - globalAlternatives.put(interfaceName, implementation);",
            " - }",
            " - else if (property.getKey().startsWith(GLOBAL_ALTERNATIVES))",
            " - {",
            " - String interfaceName = property.getKey().substring(GLOBAL_ALTERNATIVES.length());",
            " - String implementation = property.getValue();",
            " - if (LOG.isLoggable(Level.FINE))",
            " - {",
            " - LOG.fine(\"Enabling global alternative for interface \" + interfaceName + \": \" + implementation);",
            " - }",
            " - globalAlternatives.put(interfaceName, implementation);",
            " - }",
            " - }",
            " + loadGlobalAlternativeConfigs();",
            " + private void loadGlobalAlternativeConfigs()",
            " + {",
            " + List<AlternativeBeanClassProvider> alternativeBeanClassProviders =",
            " + new ArrayList<AlternativeBeanClassProvider>();",
            " + if (ClassDeactivationUtils.isActivated(LabelAwareGlobalAlternativeBeanClassProvider.class))",
            " + {",
            " + alternativeBeanClassProviders.add(new LabelAwareGlobalAlternativeBeanClassProvider());",
            " + }",
            " + alternativeBeanClassProviders.addAll(",
            " + ServiceUtils.loadServiceImplementations(AlternativeBeanClassProvider.class));",
            " + for (AlternativeBeanClassProvider currentProvider : alternativeBeanClassProviders)",
            " + {",
            " + Map<String, String> alternativeBeanMappings = currentProvider.getAlternativeMapping();",
            " + globalAlternatives.putAll(alternativeBeanMappings);",
            " + }",
            " + }"
          ]
        }
      }
    ]
  },
  {
    "code": "KWLSz0lEK8o",
    "email": "johndament@apache.org",
    "name": "John D. Ament",
    "project": "Apache/Deltaspike",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Nested blocks of code should not be left empty",
        "commit": {
          "hash": "2cc5eeb074081aa5157da3420995f5cd85220c40",
          "msg": "DELTASPIKE-1326 Remove backwards compatible layer for Java 8 in Data Module, since Java 8 is now required. Test against Wildfly 10 by default.",
          "file": "OptionalUtil.java",
          "lang": "java",
          "diff": [
            " - public static Object wrap(Object input)",
            " - {",
            " - if (!optionalSupported)",
            " - {",
            " - return input;",
            " - }",
            " - try",
            " - {",
            " - return optionalMethod.invoke(null, input);",
            " - }",
            " - catch (IllegalAccessException e)",
            " - {",
            " - }",
            " - catch (InvocationTargetException e)",
            " - {",
            " - }",
            " - return null;",
            " - }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Assertion arguments should be passed in the correct order",
        "commit": {
          "hash": "2cc5eeb074081aa5157da3420995f5cd85220c40",
          "msg": "DELTASPIKE-1326 Remove backwards compatible layer for Java 8 in Data Module, since Java 8 is now required. Test against Wildfly 10 by default.",
          "file": "OptionalUtilTest.java",
          "lang": "java",
          "diff": [
            " - @Test",
            " - public void shouldIdentifyOptionalReturnType() throws Exception",
            " - {",
            " - Method empty = getOptionalClass().getMethod(\"empty\");",
            " - Assert.assertTrue(OptionalUtil.isOptionalReturned(empty));",
            " - }",
            " - @Test",
            " - public void shouldReturnEmptyWhenGivenNull() throws Exception",
            " - {",
            " - Object wrapped = OptionalUtil.wrap(null);",
            " - Method isPresent = getOptionalClass().getMethod(\"isPresent\");",
            " - Object invoke = isPresent.invoke(wrapped);",
            " - Assert.assertEquals(invoke, Boolean.FALSE);",
            " - }",
            " - @Test",
            " - public void shouldReturnNotEmptyWhenGivenNonnull() throws Exception",
            " - {",
            " - Object wrapped = OptionalUtil.wrap(\"String\");",
            " - Method isPresent = getOptionalClass().getMethod(\"isPresent\");",
            " - Object invoke = isPresent.invoke(wrapped);",
            " - Assert.assertEquals(invoke, Boolean.TRUE);",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "t37zVMzbWfw",
    "email": "struberg@apache.org",
    "name": "Mark Struberg",
    "project": "Apache/Deltaspike",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Encryption algorithms should be used with secure mode and padding scheme",
        "commit": {
          "hash": "ebcac8257f3a170d5dcb2e8244e476830ade4c43",
          "msg": "DELTASPIKE-1250 add CLI client and switch to sha256",
          "file": "DefaultCipherService.java",
          "lang": "java",
          "diff": [
            " - Cipher cipher = Cipher.getInstance(\"AES\");",
            " + Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);",
            " cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);",
            " return new String(cipher.doFinal(encryptedValue), UTF_8);",
            " }",
            " catch (Exception e)",
            " {",
            " - throw ExceptionUtils.throwAsRuntimeException(e);",
            " + throw new RuntimeException(e);",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "LZnGWZ8a-AY",
    "email": "tandraschko@apache.org",
    "name": "tandraschko",
    "project": "Apache/Deltaspike",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "\"switch\" statements should have \"default\" clauses",
        "commit": {
          "hash": "b48416ae6a33c80c6a2c9c7e763abd157d580014",
          "msg": "DELTASPIKE-1267 Remove second factory mechanism of QueryBuilder's",
          "file": "QueryBuilderFactory.java",
          "lang": "java",
          "diff": [
            " switch (repositoryMethodType)",
            " {",
            " case ANNOTATED:",
            " return annotatedQueryBuilder;",
            " case PARSE:",
            " return methodQueryBuilder;",
            " case DELEGATE:",
            " return delegateQueryBuilder;",
            " + default:",
            " +throw new RuntimeException(",
            " + \"No \" + QueryBuilder.class.getName() + \" avialable for type: \" + repositoryMethodType);",
            " }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "b48416ae6a33c80c6a2c9c7e763abd157d580014",
          "msg": "DELTASPIKE-1267 Remove second factory mechanism of QueryBuilder's",
          "file": "QueryBuilderFactory.java",
          "lang": "java",
          "diff": [
            " - throw new RuntimeException(\"No \" + QueryBuilder.class.getName() + \" avialable for type: \" + repositoryMethodType);"
          ]
        }
      }
    ]
  },
  {
    "code": "OjN00OFM8Ug",
    "email": "arina.yelchiyeva@gmail.com",
    "name": "Arina Ielchiieva",
    "project": "Apache/Drill",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "f8bc0db29f08ec9f9ff082bec202a2ab2495bac1",
          "msg": "DRILL-7367: Remove Server details from response headers",
          "file": "WebServer.java",
          "lang": "java",
          "diff": [
            " @@ -274,18 +273,6 @@ public class WebServer implements AutoCloseable {",
            " @Override",
            " public void logout(UserIdentity user) {",
            " }",
            " - // @Override",
            " - // protected UserIdentity loadUser(String username) {",
            " - // // TODO Auto-generated method stub",
            " - // return null;",
            " - // }",
            " - //",
            " - // @Override",
            " - // protected void loadUsers() throws IOException {",
            " - // putUser( \"fred\", new Password( \"wilma\" ), new String[] { ADMIN_ROLE } );",
            " - // }",
            " }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "44b990be5c15e1c480725cfb78fcabb40216ebf0",
          "msg": "DRILL-6870: Upgrade to ANTLR4",
          "file": "SchemaPath.java",
          "lang": "java",
          "diff": [
            " - if (ret.e instanceof SchemaPath) {",
            " - return (SchemaPath) ret.e;",
            " - } else {",
            " - throw new IllegalStateException(\"Schema path is not a valid format.\");",
            " - }",
            " - } catch (RecognitionException e) {",
            " - throw new RuntimeException(e);",
            " + LogicalExpression logicalExpression = LogicalExpressionParser.parse(expr);",
            " + if (logicalExpression instanceof SchemaPath) {",
            " + return (SchemaPath) logicalExpression;",
            " + } else {",
            " + throw new IllegalStateException(String.format(\"Schema path is not a valid format: %s.\", logicalExpression));",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "VYCh2wlZxf4",
    "email": "bohdan.kazydub@gmail.com",
    "name": "Bohdan Kazydub",
    "project": "Apache/Drill",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "91962d3dd38119ad04fa6b646a4980fd77e828d8",
          "msg": "DRILL-6793: FragmentExecutor cannot send its final state for the case when RootExec root wasn't initialized",
          "file": "SequenceFileRecordReader.java",
          "lang": "java",
          "diff": [
            " @@ -172,7 +172,7 @@ public String toString() {",
            " position = reader.getPos();",
            " }",
            " } catch (IOException e) {",
            " - logger.trace(\"Unable to obtain reader position: \" + e.getMessage());",
            " + logger.trace(\"Unable to obtain reader position.\", e);",
            " }",
            " return \"SequenceFileRecordReader[File=\" + split.getPath()",
            " + \", Position=\" + position"
          ]
        }
      }
    ]
  },
  {
    "code": "keg1XTdnaIc",
    "email": "cgivre@apache.org",
    "name": "Charles Givre",
    "project": "Apache/Drill",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "e0d1bdd38cd9e08d170d9ed0314bc3a5cca64412",
          "msg": "DRILL-7495: Excel Reader Not Parsing Dates Correctly in First Column",
          "file": "ExcelBatchReader.java",
          "lang": "java",
          "diff": [
            " @@ -481,7 +486,6 @@ public void load(Cell cell) {",
            " }",
            " public void load(Cell cell) {",
            " - CellValue cellValue = evaluator.evaluate(cell);",
            " String fieldValue = String.valueOf(cell.getNumericCellValue());",
            " if (fieldValue == null) {"
          ]
        }
      }
    ]
  },
  {
    "code": "FAOWhCsb670",
    "email": "gparai@maprtech.com",
    "name": "Gautam Parai",
    "project": "Apache/Drill",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Exceptions should be either logged or rethrown but not both",
        "commit": {
          "hash": "e477480e7b9626abc8efd70914d3bfd4321b7258",
          "msg": "DRILL-7076: Fix NPE in StatsMaterializationVisitor",
          "file": "DrillStatsTable.java",
          "lang": "java",
          "diff": [
            " @@ -223,8 +223,11 @@ public void materialize(final DrillTable table, final QueryContext context) thro",
            " materialized = true;",
            " }",
            " } catch (IOException ex) {",
            " - logger.warn(\"Failed to read the stats file.\", ex);",
            " - throw ex;",
            " + if (ex instanceof FileNotFoundException) {",
            " + logger.debug(String.format(\"Did not find statistics file %s\", tablePath.toString()), ex);",
            " + } else {",
            " + logger.debug(String.format(\"Error trying to read statistics table %s\", tablePath.toString()), ex);",
            " + }",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "y1sxhQow2xk",
    "email": "hanu.ncr@gmail.com",
    "name": "Hanumath Rao Maduri",
    "project": "Apache/Drill",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "162c0381cfbe3573c96596551463c12cbc4a1aaf",
          "msg": "DRILL-7183: TPCDS query 10, 35, 69 take longer with sf 1000 when Statistics are disabled.",
          "file": "PlannerPhase.java",
          "lang": "java",
          "diff": [
            " - public RuleSet getRules(OptimizerRulesContext context, Collection<StoragePlugin> plugins) {",
            " - return PlannerPhase.mergedRuleSets(",
            " - RuleSets.ofList(DrillSemiJoinRule.JOIN)",
            " - );",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "Fe1wWd472uE",
    "email": "par0328@yahoo.com",
    "name": "Paul Rogers",
    "project": "Apache/Drill",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "ad75bbd9a300771e2b1d40f29876c449e9113b7c",
          "msg": "DRILL-7414: EVF incorrectly sets buffer writer index after rollover",
          "file": "BatchValidator.java",
          "lang": "java",
          "diff": [
            " @@ -153,13 +154,13 @@ public BatchValidator(ErrorReporter errorReporter) {",
            " private static Map<Class<? extends RecordBatch>, CheckMode> buildRules() {",
            " - final Map<Class<? extends RecordBatch>, CheckMode> rules = new IdentityHashMap<>();",
            " - //rules.put(OperatorRecordBatch.class, CheckMode.ALL);",
            " + Map<Class<? extends RecordBatch>, CheckMode> rules = new IdentityHashMap<>();",
            " + rules.put(OperatorRecordBatch.class, CheckMode.ALL);",
            " return rules;",
            " }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "91a9c56cb2998349216eed61fcb85fca5c116561",
          "msg": "DRILL-7506: Simplify code gen error handling",
          "file": "ProjectionMaterializer.java",
          "lang": "java",
          "diff": [
            " @@ -335,11 +325,7 @@ private void setupImplicitColumnRef(NamedExpression namedExpression)",
            " LogicalExpression expr = ExpressionTreeMaterializer.materialize(",
            " originalPath, incomingBatch, collector, functionLookupContext);",
            " - if (collector.hasErrors()) {",
            " - throw new SchemaChangeException(String.format(",
            " - \"Failure while trying to materialize incomingBatch schema.  Errors:\n %s.\",",
            " - collector.toErrorString()));",
            " - }",
            " +collector.reportErrors(logger);"
          ]
        }
      }
    ]
  },
  {
    "code": "wZHXpkMTTkE",
    "email": "vvovyk@gmail.com",
    "name": "Volodymyr Vysotskyi",
    "project": "Apache/Drill",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "7ab4c3739f34e9e96cbdfa883325a10311a8ef02",
          "msg": "DRILL-7273: Introduce operators for handling metadata",
          "file": "AbstractParquetGroupScan.java",
          "lang": "java",
          "diff": [
            " - protected abstract RowGroupScanFilterer getFilterer();",
            " + protected abstract RowGroupScanFilterer<? extends RowGroupScanFilterer> getFilterer();",
            " protected Multimap<Path, RowGroupMetadata> pruneRowGroupsForFiles(Map<Path, FileMetadata> filteredFileMetadata) {",
            " Multimap<Path, RowGroupMetadata> prunedRowGroups = LinkedListMultimap.create();"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Methods should not have too many parameters",
        "commit": {
          "hash": "20293b63c0bb559ae35d57f7cb1ab7fa24e9ee6d",
          "msg": "DRILL-7450: Improve performance for ANALYZE command",
          "file": "MetastoreAnalyzeTableHandler.java",
          "lang": "java",
          "diff": [
            " private DrillRel getSegmentAggRelNode(List<NamedExpression> segmentExpressions, DrillRel convertedRelNode,",
            " boolean createNewAggregations, List<SchemaPath> statisticsColumns, SchemaPath locationField,",
            " - AnalyzeInfoProvider analyzeInfoProvider, int segmentLevel, MetadataHandlerContext handlerContext) {",
            " - SchemaPath lastModifiedTimeField =",
            " + int segmentLevel, MetadataHandlerContext handlerContext) {",
            " + SchemaPath lastModifiedTimeField =",
            " SchemaPath.getSimplePath(config.getContext().getOptions().getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL));"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Methods should not have too many parameters",
        "commit": {
          "hash": "20293b63c0bb559ae35d57f7cb1ab7fa24e9ee6d",
          "msg": "DRILL-7450: Improve performance for ANALYZE command",
          "file": "MetastoreAnalyzeTableHandler.java",
          "lang": "java",
          "diff": [
            " private DrillRel getSegmentAggRelNode(List<NamedExpression> segmentExpressions, DrillRel convertedRelNode,",
            " boolean createNewAggregations, List<SchemaPath> statisticsColumns, SchemaPath locationField,",
            " - AnalyzeInfoProvider analyzeInfoProvider, int segmentLevel, MetadataHandlerContext handlerContext) {",
            " - SchemaPath lastModifiedTimeField =",
            " + int segmentLevel, MetadataHandlerContext handlerContext) {",
            " + SchemaPath lastModifiedTimeField =",
            " SchemaPath.getSimplePath(config.getContext().getOptions().getString(ExecConstants.IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL));"
          ]
        }
      }
    ]
  },
  {
    "code": "S9eOyLUDCA4",
    "email": "andrasbeni@cloudera.com",
    "name": "Andras Beni",
    "project": "Apache/Flume",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Java 8 features should be preferred to Guava",
        "commit": {
          "hash": "857df3fe9b211a0e34f17cc6d776a1296951134a",
          "msg": "FLUME-2579 Support durable subscription in JMSSource",
          "file": "JMSMessageConsumerFactory.java",
          "lang": "java",
          "diff": [" - import com.google.common.base.Optional;"]
        }
      }
    ]
  },
  {
    "code": "oPrw0OHINC8",
    "email": "arvind@apache.org",
    "name": "Arvind Prabhakar",
    "project": "Apache/Flume",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "d561b80bf4486481d74c7fdd907fcd446bdcb3cc",
          "msg": "FLUME-1238. Support active rolling of files created by HDFS Event Sink.",
          "file": "HDFSEventSink.java",
          "lang": "java",
          "diff": [
            "- LOG.info(\"Closing \" + entry.getKey());",
            " + LOG.info(\"Closing {}\", entry.getKey());"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "\"Preconditions\" and logging arguments should not require evaluation",
        "commit": {
          "hash": "31a1d81b682b26855ee0aafa947bbd59e61d4d4c",
          "msg": "FLUME-1085. Implement a durable File Channel.",
          "file": "SequenceIDBuffer.java",
          "lang": "java",
          "diff": [
            " public void close() {",
            " try {",
            " - Preconditions.checkArgument(backingBuffer.isDirect(),",
            " - \"buffer isn't direct!\");",
            " - Method cleanerMethod = backingBuffer.getClass().getMethod(\"cleaner\");",
            " - cleanerMethod.setAccessible(true);",
            " - Object cleaner = cleanerMethod.invoke(backingBuffer);",
            " - Method cleanMethod = cleaner.getClass().getMethod(\"clean\");",
            " - cleanMethod.setAccessible(true);",
            " - cleanMethod.invoke(cleaner);",
            " + DirectMemoryUtils.clean(backingBuffer);",
            " } catch (Exception e) {",
            " - Throwables.propagate(e);",
            " + LOG.warn(\"Error cleaning up buffer\", e);",
            " + if (LOG.isDebugEnabled()) {",
            " + Throwables.propagate(e);",
            " + }",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "NjnvNT4WW9g",
    "email": "brock@apache.org",
    "name": "Brock Noland",
    "project": "Apache/Flume",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "JUnit assertions should not be used in \"run\" methods",
        "commit": {
          "hash": "82aa5fc16dac3751b78f85fbe21b8c805dbffbcc",
          "msg": "FLUME-1496: TestFileChannel is bloated",
          "file": "TestFileChannel.java",
          "lang": "java",
          "diff": [
            " public void run() {",
            " - FileChannel channel = createFileChannel();",
            " - channel.start();",
            " - Transaction tx = channel.getTransaction();",
            " - tx.begin();",
            " - Event e = channel.take();",
            " - Assert.assertNotNull(e);",
            " - Assert.assertTrue(set.remove(new String(e.getBody())));",
            " - e = channel.take();",
            " - Assert.assertNotNull(e);",
            " - Assert.assertTrue(set.remove(new String(e.getBody())));",
            " ... "
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "750809c70aa92225ed8df2ded0364d30a220405b",
          "msg": "FLUME-1732: SpoolableDirectorySource should have configurable support for deleting files it has already completed instead of renaming",
          "file": "ReliableSpoolingFileEventReader.java",
          "lang": "java",
          "diff": [
            " - String currPath = currentFile.get().getFile().getAbsolutePath();",
            " - String newPath = currPath + completedSuffix;",
            " - logger.info(\"Preparing to move file {} to {}\", currPath, newPath);",
            " + File fileToRoll = new File(currentFile.get().getFile().getAbsolutePath());"
          ]
        }
      }
    ]
  },
  {
    "code": "bV1rncAuOFQ",
    "email": "esammer@apache.org",
    "name": "Eric Sammer",
    "project": "Apache/Flume",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Documentation Debt",
        "td_issue": "Track uses of \"FIXME\" tags",
        "commit": {
          "hash": "56a6c8a92908d18498a61eccf9fc7cff188f1fab",
          "msg": "- Sources and sinks now hint as to their willingness to take more data by returning a status.",
          "file": "SequenceGeneratorSource.java",
          "lang": "java",
          "diff": [
            " + } finally {",
            " + transaction.close();",
            " }",
            " - /* FIXME: Add finally { transaction.close() } */"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "034d0d69c0fa4ff853c277f54be79c088a3e9683",
          "msg": "- Removed sleep in config provider test.",
          "file": "TestJsonFileConfigurationProvider.java",
          "lang": "java",
          "diff": [
            " @@ -54,8 +54,6 @@ public void testLifecycle() throws InterruptedException {",
            " provider.setFile(testFile);",
            " provider.start();",
            " - ",
            " - Thread.sleep(1000);",
            " provider.stop();"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "034d0d69c0fa4ff853c277f54be79c088a3e9683",
          "msg": "- Keep track of source / sink / channel names in JsonFlumeConfiguration so we can wire up {source,sink} -> channel dependencies.",
          "file": "JsonFileConfigurationProvider.java",
          "lang": "java",
          "diff": [
            " - if (source.containsKey(\"type\")) {",
            " - Source s = sourceFactory.create((String) source.get(\"type\"));",
            " - ",
            " - // s.setChannel(knownChannels.get(source.get(\"channel\")));",
            " - conf.getSourceRunners().add(SourceRunner.forSource(s));"
          ]
        }
      }
    ]
  },
  {
    "code": "QGdVCNBhlWw",
    "email": "harishreedharan@gmail.com",
    "name": "Hari Shreedharan",
    "project": "Apache/Flume",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "e1cb6913f358e4de54d69d1f6f21edecf06a9da2",
          "msg": "FLUME-2479. Kafka property auto.commit.enable is incorrect for KafkaSource.",
          "file": "KafkaSourceTest.java",
          "lang": "java",
          "diff": [" - Thread.sleep(500L);"]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Standard outputs should not be used directly to log anything",
        "commit": {
          "hash": "6d9ef1fd6c15748212b75daa628ae3a2a8654e30",
          "msg": "FLUME-1848. HDFSDataStream logger is actually for a sequence file",
          "file": "HDFSCompressedDataStream.java",
          "lang": "java",
          "diff": [
            " @@ -90,7 +90,6 @@ public void open(String filePath, CompressionCodec codec,",
            " } else {",
            " fsOut = hdfs.create(dstPath);",
            " }",
            " - System.out.println(\"fsOut \" + fsOut);",
            " cmpOut = codec.createOutputStream(fsOut);"
          ]
        }
      }
    ]
  },
  {
    "code": "TQk2uxiHgRo",
    "email": "jarcec@apache.org",
    "name": "Jarek Jarcec Cecho",
    "project": "Apache/Flume",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "\"Preconditions\" and logging arguments should not require evaluation",
        "commit": {
          "hash": "e8c4a7bffc74f6ea10ae6cc45adbaf4919f45186",
          "msg": "FLUME-2823: Flume-Kafka-Channel with new APIs",
          "file": "KafkaChannel.java",
          "lang": "java",
          "diff": [
            " - LOGGER",
            " - .info(\"Topic was not specified. Using \" + topicStr + \" as the topic.\");",
            " + logger.info(\"Topic was not specified. Using {} as the topic.\", topicStr);"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "caa64a1a6d4bc97be5993cb468516e9ffe862794",
          "msg": "FLUME-2891: Revert FLUME-2712 and FLUME-2886",
          "file": "TestChannelProcessor.java",
          "lang": "java",
          "diff": [" - Thread.sleep(500);"]
        }
      }
    ]
  },
  {
    "code": "SH7xJ-nnvVg",
    "email": "mubarak.seyed@gmail.com",
    "name": "Mubarak Seyed",
    "project": "Apache/Flume",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Try-catch blocks should not be nested",
        "commit": {
          "hash": "716b1e2d3e928bde9ddaf75f958bea06f4707824",
          "msg": "FLUME-1482 Flume should support exposing metrics via HTTP in JSON/some other web service format.",
          "file": "GangliaServer.java",
          "lang": "java",
          "diff": [
            " @@ -332,47 +331,24 @@ public void configure(Context context) {",
            " @Override",
            " public void run() {",
            " try {",
            " - Set<ObjectInstance> queryMBeans = null;",
            " - try {",
            " - queryMBeans = mbeanServer.queryMBeans(",
            " - null, null);",
            " - } catch (Exception ex) {",
            " - logger.error(\"Could not get Mbeans for monitoring\", ex);",
            " - Throwables.propagate(ex);",
            " - }",
            " - for (ObjectInstance obj : queryMBeans) {",
            " - try {",
            " - if (!obj.getObjectName().toString().startsWith(\"org.apache.flume\")) {",
            " - continue;",
            " - }",
            " - MBeanAttributeInfo[] attrs = mbeanServer.",
            " - getMBeanInfo(obj.getObjectName()).getAttributes();",
            " - String strAtts[] = new String[attrs.length];",
            " - for (int i = 0; i < strAtts.length; i++) {",
            " -  strAtts[i] = attrs[i].getName();",
            " - }",
            " - AttributeList attrList = mbeanServer.getAttributes(",
            " - obj.getObjectName(), strAtts);",
            " - String component = obj.getObjectName().toString().substring(",
            " - obj.getObjectName().toString().indexOf('=') + 1);",
            " - for (Object attr : attrList) {",
            " - Attribute localAttr = (Attribute) attr;",
            " - if (isGanglia3) {",
            " - server.createGangliaMessage(GANGLIA_CONTEXT + component + \".\"",
            " - + localAttr.getName(),",
            " - localAttr.getValue().toString());",
            " - } else {",
            " - server.createGangliaMessage31(GANGLIA_CONTEXT + component + \".\"",
            " - + localAttr.getName(),",
            " - localAttr.getValue().toString());",
            " - }",
            " - server.sendToGangliaNodes();",
            " + Map<String, Map<String, String>> metricsMap =",
            " + JMXPollUtil.getAllMBeans();",
            " + for (String component : metricsMap.keySet()) {",
            " + Map<String, String> attributeMap = metricsMap.get(component);",
            " + for (String attribute : attributeMap.keySet()) {",
            " + if (isGanglia3) {",
            " + server.createGangliaMessage(GANGLIA_CONTEXT + component + \".\" ",
            " + + attribute,",
            " + attributeMap.get(attribute));",
            " + } else {",
            " + server.createGangliaMessage31(GANGLIA_CONTEXT + component + \".\" ",
            " + + attribute,",
            " +attributeMap.get(attribute));",
            "  }",
            " - } catch (Exception ex) {",
            " - logger.error(\"Error getting mbean attributes\", ex);",
            " + server.sendToGangliaNodes();",
            " }",
            " }",
            " - } catch(Throwable t) {",
            " + } catch (Throwable t) {",
            " logger.error(\"Unexpected error\", t);",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "K51YXTfdfdw",
    "email": "aching@fb.com",
    "name": "Avery Ching",
    "project": "Apache/Giraph",
    "first_commit": "2010",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "828c61581c9f63529664ae4648948d786e52c79a",
          "msg": "[Bug 4671181] Implicitly determine and check type arguments, fix page rank bug.",
          "file": "BspServiceWorker.java",
          "lang": "java",
          "diff": [
            " - vertexReader.close();",
            " - } catch (Exception e) {",
            " - throw new RuntimeException(e);",
            " + vertexList.add(readerVertex);",
            " + readerVertex =",
            " + BspUtils.<I, V, E, M>createVertex(getConfiguration());",
            " + getContext().progress();",
            " + }",
            " + vertexReader.close();",
            " + if (LOG.isInfoEnabled()) {",
            " + LOG.info(\"loadVertices: Got \" + vertexList.size() +",
            " + \" vertices from input split \" + inputSplit);"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "ac93c3b6c5bce5f22b293b29df91663ca7d7ce63",
          "msg": "GIRAPH-798: Upgrade Giraph to Java7 and fix all dependencies",
          "file": "BspServiceWorker.java",
          "lang": "java",
          "diff": [
            " - } catch (KeeperException e) {",
            " - throw new RuntimeException(e);",
            " - } catch (InterruptedException e) {",
            " - throw new RuntimeException(e);",
            " + } catch (KeeperException | InterruptedException e) {",
            " + throw new RuntimeException(",
            " + \"exchangeVertexPartitions: Got runtime exception\", e);",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Standard outputs should not be used directly to log anything",
        "commit": {
          "hash": "33572a5e2325c8b15b2ed133dca337abb7c2e94c",
          "msg": "GIRAPH-40: Added checkstyle for enforcement of code conventions. All Giraph source files now pass checkstyle.",
          "file": "SimpleMsgVertex.java",
          "lang": "java",
          "diff": [
            " - System.out.println(\"TestMsgVertex: Received a sum of \" + sum +",
            " - \" (will stop on 306)\");",
            " + LOG.info(\"TestMsgVertex: Received a sum of \" + sum +",
            " + \" (will stop on 306)\");"
          ]
        }
      }
    ]
  },
  {
    "code": "55LOlhMLn80",
    "email": "edunov@fb.com",
    "name": "Sergey Edunov",
    "project": "Apache/Giraph",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "6256a761d61a5b27a05878da2449ce8537d60c99",
          "msg": "Integrating out-of-core mechanism with credit-based flow-control and data generation tethering",
          "file": "FixedOutOfCoreEngine.java",
          "lang": "java",
          "diff": [
            " - if (jobFailed) {",
            " - throw new RuntimeException(\"Job Failed due to a failure in an \" +",
            " - \"out-of-core IO thread\");",
            " - }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
        "commit": {
          "hash": "6256a761d61a5b27a05878da2449ce8537d60c99",
          "msg": "Integrating out-of-core mechanism with credit-based flow-control and data generation tethering",
          "file": "MetaPartitionManager.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public String toString() {",
            " - StringBuffer sb = new StringBuffer();",
            " - sb.append(\"\nProcessed Partitions: \" + processedPartitions + \"; \");",
            " - sb.append(\"\nUnprocessedPartitions: \" + unprocessedPartitions);",
            " - return sb.toString();",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "Btwvm60LrUk",
    "email": "ereisman@apache.org",
    "name": "Eli Reisman",
    "project": "Apache/Giraph",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "3a20c5597c4f7ca67421eb39fd426cc8b0cbef2d",
          "msg": "GIRAPH-737: Giraph Application Master: Move to new and stable YARN API",
          "file": "GiraphApplicationMaster.java",
          "lang": "java",
          "diff": [
            " - private void checkForRebootFlag(AMResponse amResponse) {",
            " - if (amResponse.getReboot()) {",
            " - LOG.error(\"AMResponse: \" + amResponse + \" raised YARN REBOOT FLAG!\");",
            " - throw new RuntimeException(\"AMResponse \" + amResponse +\"){",
            " - \" signaled GiraphApplicationMaster with REBOOT FLAG. Failing job.\");",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "BlS0QLzHgzY",
    "email": "heslami@apache.org",
    "name": "Hassan Eslami",
    "project": "Apache/Giraph",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "java.nio.Files#delete should be preferred",
        "commit": {
          "hash": "6f5a457fa93ac8b53cc77afd0eb8729f1e5665af",
          "msg": "[GIRAPH-1023] Adding out-of-core messages to previously implemented adaptive out-of-core mechanism",
          "file": "DiskBackedPartitionStore.java",
          "lang": "java",
          "diff": [
            " @@ -1284,14 +1615,11 @@ private void readOutEdges(DataInput in, Partition<I, V, E> partition)",
            " partition.putVertex(vertex);",
            " }",
            " inputStream.close();",
            " - if (!file.delete()) {",
            " - String msg = \"loadPartition: failed to delete \" + file.getAbsolutePath();",
            " - LOG.error(msg);",
            " - throw new IllegalStateException(msg);",
            " - }",
            " + checkState(file.delete(), \"loadPartition: failed to delete %s\",",
            " + file.getAbsolutePath());"
          ]
        }
      }
    ]
  },
  {
    "code": "P2_l5iyV2uo",
    "email": "ikabiljo@fb.com",
    "name": "Igor Kabiljo",
    "project": "Apache/Giraph",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "77ae12e00e6e0b4955949bc71e9b275bd6d70538",
          "msg": "[GIRAPH-1041] Generate primitive type specific code",
          "file": "BasicArrayList.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void fill(int from, int to, BooleanWritable value) {",
            " - if (to > list.size()) {",
            " - throw new ArrayIndexOutOfBoundsException(",
            " - \"End index (\" + to + \") is greater than array length (\" +",
            " - list.size() + \")\");",
            " - @Override",
            " - public void fill(int from, int to, ByteWritable value) {",
            " - if (to > list.size()) {",
            " - throw new ArrayIndexOutOfBoundsException(",
            " - \"End index (\" + to + \") is greater than array length (\" +",
            " - list.size() + \")\");"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "17355f55811be1b1392c3ca066fb9adf803846d3",
          "msg": "[GIRAPH-1013] Add BlockExecutionTest",
          "file": "LocalBlockRunner.java",
          "lang": "java",
          "diff": [
            " - GiraphConfiguration conf) throws Exception {",
            " - int numWorkers = NUM_WORKERS.get(conf);",
            " + GiraphConfiguration conf) {",
            " + BlockFactory<?> factory = BlockUtils.createBlockFactory(conf);",
            " + runBlockWithVertexOutput(",
            " + factory.createBlock(conf), factory.createExecutionStage(conf),",
            " + graph, vertexSaver, conf);"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "ca36f1d499a70b1aee85ac637de53f153a9f4c92",
          "msg": "Use Partitions in LocalBlockRunner",
          "file": "SyntheticGraphInit.java",
          "lang": "java",
          "diff": [
            " @@ -84,11 +83,5 @@ public void modifyGraph(NumericTestGraph<I, V, E> graph) {",
            " i, j, edgeSupplier != null ? edgeSupplier.get() : null);",
            " }",
            " }",
            " - // if (vertexModifier != null) {",
            " - //     for (int i = 0; i < numVertices; i++) {",
            " - //        vertexModifier.modifyVertexValue(i, graph.getVertex(i).getValue());",
            " - //      }",
            " - //  }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "NK7jnImu9-Q",
    "email": "majakabiljo@fb.com",
    "name": "Maja Kabiljo",
    "project": "Apache/Giraph",
    "first_commit": "2013",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "8811165e85ae2db442e34f1021db29f4dfcc8430",
          "msg": "GIRAPH-667: Decouple Vertex data and Computation, make Computation and Combiner classes switchable (majakabiljo)",
          "file": "NettyWorkerServer.java",
          "lang": "java",
          "diff": [
            " if (!useOutOfCoreMessaging) {",
            " - if (conf.useCombiner()) {",
            " - if (LOG.isInfoEnabled()) {",
            " - LOG.info(\"createMessageStoreFactory: \" +",
            " - \"Using OneMessagePerVertexStore since combiner enabled\");",
            " - }",
            " - return OneMessagePerVertexStore.newFactory(service, conf);",
            " - } else {",
            " - if (LOG.isInfoEnabled()) {",
            " - LOG.info(\"createMessageStoreFactory: \" +",
            " - \"Using ByteArrayMessagesPerVertexStore \" +",
            " - \"since there is no combiner\");",
            " - }",
            " - return ByteArrayMessagesPerVertexStore.newFactory(service, conf);",
            " - }",
            " + return new InMemoryMessageStoreFactory<I, Writable>(service, conf);"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "d3a3745435c0157f6dc4ea5f49b3300d2829dacd",
          "msg": "[Bug 4726010] - Add full single source shortest path example for documentation.",
          "file": "SimpleShortestPathsVertex.java ",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void preApplication()",
            " - throws InstantiationException, IllegalAccessException {",
            " - }",
            " - @Override",
            " - public void postApplication() {",
            " - }",
            " - @Override",
            " - public void preSuperstep() {",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "ShaIV5jM4sw",
    "email": "spupyrev@fb.com",
    "name": "spupyrev",
    "project": "Apache/Giraph",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "\"Preconditions\" and logging arguments should not require evaluation",
        "commit": {
          "hash": "16dba64c31c3eb18ac916d49f1529fe4810fe754",
          "msg": "unsafe readers for varints",
          "file": "Varint.java",
          "lang": "java",
          "diff": [
            " @@ -103,10 +101,10 @@ public static void writeUnsignedVarLong(",
            " long value,",
            " DataOutput out",
            " ) throws IOException {",
            " - Preconditions.checkState(",
            " - value >= 0,",
            " - \"Negative value passed into writeUnsignedVarLong - \" + value",
            " - );",
            " + if (value < 0) {",
            " + throw new IllegalStateException(",
            " + \"Negative value passed into writeUnsignedVarLong - \" + value);",
            " + }",
            " writeVarLong(value, out);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "jlK_Sd1Wpuc",
    "email": "darumugam@hortonworks.com",
    "name": "Dilli Dorai Arumugam",
    "project": "Apache/Knox",
    "first_commit": "2013",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes",
        "commit": {
          "hash": "c58ee3b039abecb5dc05d4ca83822c87bffe4cb0",
          "msg": "KNOX-254: use system password set using knoxcli in KnoxLdapContextFactory",
          "file": "KnoxLdapContextFactory.java",
          "lang": "java",
          "diff": [
            " String clusterName = getClusterName();",
            " - String systemPassword = System.getProperty(clusterName + \".\" + aliasName);",
            " - if (systemPassword != null) {",
            " - super.setSystemPassword( systemPassword );",
            "- aliasService.addAliasForCluster(clusterName, aliasName, systemPassword);",
            " + char[] password = aliasService.getPasswordFromAliasForCluster(clusterName, systemPass);",
            " + if ( password != null ) {",
            " + super.setSystemPassword( new String(password) );",
            " } else {",
            " - char[] password = aliasService.getPasswordFromAliasForCluster(clusterName, systemPass);",
            " - if ( password != null ) {",
            " - super.setSystemPassword( new String(password) );",
            " - } else {",
            " - super.setSystemPassword( new String(systemPass) );",
            " - }",
            " + LOG.aliasValueNotFound(clusterName, aliasName);",
            " }"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "bf3dcd7c996f9292c04932656664549bf90c54f6",
          "msg": "KNOX-260: gateway-test ldap group tests need to use KnoxCLI/AliasService class to update security stores",
          "file": "GatewayLdapGroupFuncTest.java",
          "lang": "java",
          "diff": [" - Thread.sleep(3000);"]
        }
      }
    ]
  },
  {
    "code": "dfPpqwZHlaQ",
    "email": "kminder@apache.org",
    "name": "Kevin Minder",
    "project": "Apache/Knox",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "f1c242025e67b02917ab7a781875cf557622bf7c",
          "msg": "Completed code coverage for urltemplate package.",
          "file": "Matcher.java\u00a0",
          "lang": "java",
          "diff": [
            " - // Attempt to create the correct size list.",
            " Params matchParams = new Params();",
            " - // ArrayList<MatchSegment> matchPath = new ArrayList<MatchSegment>(",
            " - // bestPath.depth + ( ( bestQuery != null ) ? bestQuery.template.getQuery().size() : 0 ) );",
            " - // Add the matching query segments to the end of the list."
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "d1d36daa13d0c24895a498cc6e3aa0821ae5944a",
          "msg": "WebHdfs PUTs working. URL template stuff complete for now.",
          "file": "Expander.java",
          "lang": "java",
          "diff": [
            " private static void expandExplicitQuery( Template template, Set<String> names, Params params, StringBuilder builder, AtomicInteger index ) {",
            " Collection<Query> query = template.getQuery().values();",
            " - if( query.isEmpty() ) {",
            " - if( template.hasQuery() ) {",
            " - builder.append( \"?\" );",
            " - }",
            " - } else {",
            " -  boolean first = true;",
            " + if( !query.isEmpty() ) {",
            " Iterator<Query> iterator = query.iterator();",
            " while( iterator.hasNext() ) {",
            " - if( first ) {",
            " + int i = index.incrementAndGet();",
            " + if( i == 1 ) {",
            " builder.append( \"?\" );",
            " - first = false;",
            " } else {",
            " builder.append( \"&\" );",
            " }"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "7c91f04411adc6046edb8c41c3c1bfe8a60f5d78",
          "msg": "KNOX-77: Add support for selecting rewrite rules by path.",
          "file": "UrlRewriteRulesDescriptorFactoryTest.java",
          "lang": "java",
          "diff": [
            " public void testLoadSimpleFile() throws IOException {",
            " UrlRewriteRulesDescriptor config =",
            " UrlRewriteRulesDescriptorFactory.load( \"xml\", getTestResourceReader( \"simple.xml\", \"UTF-8\" ) );",
            " + assertThat( \"Failed to load simple config file.\", config, notNullValue() );",
            " + }",
            " ",
            " + @Test",
            " + public void testLoadSimpleFilterFile() throws IOException {",
            " + UrlRewriteRulesDescriptor config =",
            " + UrlRewriteRulesDescriptorFactory.load( \"xml\", getTestResourceReader( \"filter-simple.xml\", \"UTF-8\" ) );",
            " + List<UrlRewriteFilterDescriptor> filters = config.getFilters();",
            " + assertThat( filters.size(), is( 1 ) );",
            " + UrlRewriteFilterDescriptor filter = config.getFilter( \"test-filter-1\" );",
            " + assertThat( filter, notNullValue() );",
            " + assertThat( config.getFilters().get(0), sameInstance( filter ) );"
          ]
        }
      }
    ]
  },
  {
    "code": "EKSPvEMasK8",
    "email": "krisden@apache.org",
    "name": "Kevin Risden",
    "project": "Apache/Knox",
    "first_commit": "2013",
    "cqs": [
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "acfbc344bda8aa5b880c98d739b8217ec33ac1ef",
          "msg": "KNOX-2129 - Improve deprecated javadoc (#197)",
          "file": "DefaultDispatch.java",
          "lang": "java",
          "diff": [
            " + /**",
            " + * An adapter class that delegate calls to {@link org.apache.knox.gateway.dispatch.DefaultDispatch}",
            " + * for backwards compatibility with package structure.",
            " + *",
            " + * @since 0.14.0",
            " + * @deprecated Use {@link org.apache.knox.gateway.dispatch.DefaultDispatch}",
            " + */",
            " @Deprecated",
            " public class DefaultDispatch extends org.apache.knox.gateway.dispatch.DefaultDispatch {"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" fields should be removed",
        "commit": {
          "hash": "be7f4f37ea0d716a6767ce41ef9f31fdf9912ff7",
          "msg": "KNOX-1666 - Enable PMD best practices ruleset",
          "file": "AbstractIdentityAssertionFilter.java",
          "lang": "java",
          "diff": [
            " private static final GatewaySpiMessages LOG = MessagesFactory.get( GatewaySpiMessages.class );",
            " - private static final GatewaySpiResources RES = ResourcesFactory.get( GatewaySpiResources.class );",
            " - private static AuditService auditService = AuditServiceFactory.getAuditService();",
            " - private static Auditor auditor = auditService.getAuditor(",
            " - AuditConstants.DEFAULT_AUDITOR_NAME, AuditConstants.KNOX_SERVICE_NAME,",
            " - AuditConstants.KNOX_COMPONENT_NAME );",
            " protected PrincipalMapper mapper = new SimplePrincipalMapper();"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be throw",
        "commit": {
          "hash": "1d19a804ebc7b50c948ce97fa2106b46b2c2aff5",
          "msg": "Cleanup SonarQube warnings from recent commits. * Remove unnecessary initializers. * Fix order of variables/methods to match Java style",
          "file": "SimpleDirectoryService.java",
          "lang": "java",
          "diff": [
            " public class SimpleDirectoryService extends DefaultDirectoryService {",
            " ",
            " -  public SimpleDirectoryService() throws Exception {",
            " + public SimpleDirectoryService() throws LdapException {",
            " super();",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "4BxgyPsZTqY",
    "email": "lmccay@apache.org",
    "name": "Larry McCay",
    "project": "Apache/Knox",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "01da3efdf8947616a9d23a572dd80927915f0cc4",
          "msg": "added tests for simple principal mapping and moved to gateway-spi module",
          "file": "IdentityAssertionFilter.java",
          "lang": "java",
          "diff": [
            " -  private void loadMappingTable(String principalMapping) {",
            " - // System.out.println(\"+++++++++++++ Loading the Mapping Table\");",
            " - if (principalMapping != null) {",
            " - StringTokenizer t = new StringTokenizer(principalMapping, \";\");",
            " - do {",
            " - String mapping = t.nextToken();",
            " - // System.out.println(\"+++++++++++++ Mapping: \" + mapping);",
            " - String principals = mapping.substring(0, mapping.indexOf('='));",
            " - // System.out.println(\"+++++++++++++ Principals: \" + principals);",
            " - String value = mapping.substring(mapping.indexOf('=')+1);",
            " - String[] p = principals.split(\",\");",
            " - for(int i = 0; i < p.length; i++) {",
            " - table.put(p[i], value);",
            " - // System.out.println(\"+++++++++++++ Mapping into Table: \" + p[i] + \"->\" + value);",
            " - }",
            " - } while(t.hasMoreTokens());"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "b5bf07d7d8ebee2861054a516d21c32912cd7f82",
          "msg": "checkpoint",
          "file": "Hadoop.java",
          "lang": "java",
          "diff": [
            " -  public static Hadoop login(String url, Map<String, String> headers) throws URISyntaxException {",
            " - return new Hadoop( url, headers, true );",
            " - }",
            " ",
            " - private Hadoop( String url, Map<String, String> headers ) throws HadoopException, URISyntaxException {",
            " - this(url, null, null, false);",
            " - this.headers = headers;",
            " -  }",
            " ",
            " - private Hadoop( String url, String username, String password ) throws HadoopException, URISyntaxException {",
            " - this(url, username, password, false);",
            " - }",
            " ",
            " - private Hadoop( String url, String username, String password, boolean secure ) throws HadoopException, URISyntaxException {"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "54281ba585b67c8cd387c0076bc9d86184fd8351",
          "msg": "checkpoint",
          "file": "KnoxSh.java",
          "lang": "java",
          "diff": [
            " @Override",
            " public void execute() throws Exception {",
            " + String tokenfile = readFile(",
            " + System.getProperty(\"user.home\") +",
            " + File.separator + \".knoxtokencache\");",
            " ",
            " + if (tokenfile != null) {",
            " + Map<String, String> json = JsonUtils.getMapFromJsonString(tokenfile);",
            " + displayTokenDetails(json);",
            " + }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "NZTqQ1k0M3k",
    "email": "moresandeep@gmail.com",
    "name": "Sandeep Mor\u00e9",
    "project": "Apache/Knox",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "8affbc0226fb2e587bdadaac9270b071d52b8062",
          "msg": "KNOX-2214 - Periodic job to evict expired tokens (#257)",
          "file": "AliasBasedTokenStateService.java",
          "lang": "java",
          "diff": [
            " private AliasService aliasService;",
            " + private static final String TOKEN_MAX_LIFETIME_POSTFIX = \"--max\";",
            " ",
            " public void setAliasService(AliasService aliasService) {",
            " this.aliasService = aliasService;",
            " @@ -61,7 +65,7 @@ public void addToken(final String token,",
            " protected void setMaxLifetime(final String token, long issueTime, long maxLifetimeDuration) {",
            " try {",
            " aliasService.addAliasForCluster(AliasService.NO_CLUSTER_NAME,",
            " - token + \"--max\",",
            " + token + TOKEN_MAX_LIFETIME_POSTFIX,",
            " String.valueOf(issueTime + maxLifetimeDuration));",
            " } catch (AliasServiceException e) {",
            " log.failedToSaveTokenState(getTokenDisplayText(token), e);",
            " @@ -73,7 +77,7 @@ protected long getMaxLifetime(final String token) {",
            " long result = 0;",
            " try {",
            " char[] maxLifetimeStr =",
            " - aliasService.getPasswordFromAliasForCluster(AliasService.NO_CLUSTER_NAME, token + \"--max\");",
            " + aliasService.getPasswordFromAliasForCluster(AliasService.NO_CLUSTER_NAME, token + TOKEN_MAX_LIFETIME_POSTFIX);",
            " if (maxLifetimeStr != null) {",
            " result = Long.parseLong(new String(maxLifetimeStr));",
            " }",
            " @@ -125,7 +129,7 @@ protected void removeToken(final String token) {",
            " ",
            " try {",
            " aliasService.removeAliasForCluster(AliasService.NO_CLUSTER_NAME, token);",
            " - aliasService.removeAliasForCluster(AliasService.NO_CLUSTER_NAME,token + \"--max\");",
            " + aliasService.removeAliasForCluster(AliasService.NO_CLUSTER_NAME,token + TOKEN_MAX_LIFETIME_POSTFIX);",
            " log.removedTokenState(getTokenDisplayText(token));"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "55adc6a9cd59525f41159c5499ab214749887be9",
          "msg": "KNOX-1694 - Prevent port mapped topologies from being exposed to gateway port (#126)",
          "file": "PortMappingHelperHandler.java",
          "lang": "java",
          "diff": [
            " - // Match \"/{gatewayName}/{topologyName/foo\" or \"/\".",
            " - // There could be a case where content is served from the root",
            " - // i.e. https://host:port/",
            " + // if the request does not contain /{gatewayName}/{topologyName}",
            " + if(!baseRequest.getRequestURI().contains(gatewayTopologyContext)) {",
            " + newRequest = new RequestUpdateHandler.ForwardedRequest(",
            " + request, gatewayTopologyContext, newTarget);"
          ]
        }
      }
    ]
  },
  {
    "code": "5k212ACJx6s",
    "email": "pzampino@apache.org",
    "name": "Phil Zampino",
    "project": "Apache/Knox",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Assertion arguments should be passed in the correct order",
        "commit": {
          "hash": "10b1ed02e64561325110ad2ec14fcf9c4532748f",
          "msg": "KNOX-1188: Maintain provider parameter order in generated topologies",
          "file": "ProviderConfigurationParserTest.java",
          "lang": "java",
          "diff": [" - assertEquals(\"static\", provider.getName());"]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "ec915ded83af86ad96d005c957b03b8807cd197e",
          "msg": "KNOX-1193 - Added discovery support for LIVYSERVER, SPARKHISTORYUI, JOBHISTORYUI, YARNUI, FALCON, OOZIEUI, HBASEUI, HDFSUI, DRUID-COORDINATOR-UI and DRUID-OVERLORD-UI",
          "file": "WebHdfsUrlCreator.java",
          "lang": "java",
          "diff": [
            " - if (SERVICE.equals(service)) {",
            " - AmbariCluster.ServiceConfiguration sc = cluster.getServiceConfiguration(\"HDFS\", \"hdfs-site\");",
            " - if (sc != null) {",
            " - // First, check if it's HA config",
            " - String nameServices = null;",
            " - AmbariComponent nameNodeComp = cluster.getComponent(\"NAMENODE\");",
            " - if (nameNodeComp != null) {",
            " - nameServices = nameNodeComp.getConfigProperty(\"dfs.nameservices\");",
            " - }",
            " - if (nameServices != null && !nameServices.isEmpty()) {",
            " - String ns = null;",
            " - // Parse the nameservices value",
            " - String[] namespaces = nameServices.split(\",\");",
            " - if (namespaces.length > 1) {",
            " - String nsParam = (serviceParams != null) ? serviceParams.get(NAMESERVICE_PARAM) : null;",
            " - if (nsParam != null) {",
            " - if (!validateDeclaredNameService(sc, nsParam)) {",
            " - log.undefinedHDFSNameService(nsParam);",
            " - }",
            " - ns = nsParam;",
            " - } else {",
            " - // core-site.xml : dfs.defaultFS property (e.g., hdfs://ns1)",
            " - AmbariCluster.ServiceConfiguration coreSite = cluster.getServiceConfiguration(\"HDFS\", \"core-site\");",
            " - if (coreSite != null) {",
            " - String defaultFS = coreSite.getProperties().get(\"fs.defaultFS\");",
            " - if (defaultFS != null) {",
            " - ns = defaultFS.substring(defaultFS.lastIndexOf(\"/\") + 1);",
            " - }",
            " - }",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "hmpCZUsw1jc",
    "email": "rlevas@apache.org",
    "name": "Robert Levas",
    "project": "Apache/Knox",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "26361b6e7ad5021746b4f6cfda081ca69b274f4d",
          "msg": "KNOX-1820 - Cleanup KeystoreService implementations and add unit tests (#72)",
          "file": "DefaultKeystoreService.java",
          "lang": "java",
          "diff": [
            " + private static final String CREDENTIALS_STORE_TYPE = \"JCEKS\";",
            " @Override",
            " public void createCredentialStoreForCluster(String clusterName) throws KeystoreServiceException {",
            " - String filename = Paths.get(keyStoreDir, clusterName + CREDENTIALS_SUFFIX).toString();",
            " + Path keystoreFilePath = keyStoreDirPath.resolve(clusterName + CREDENTIALS_SUFFIX);",
            " writeLock.lock();",
            " try {",
            " - createKeystore(filename, \"JCEKS\", masterService.getMasterSecret());",
            " + createKeyStore(keystoreFilePath, CREDENTIALS_STORE_TYPE, masterService.getMasterSecret());",
            " }",
            " finally {",
            " writeLock.unlock();",
            " @Override",
            " public boolean isCredentialStoreForClusterAvailable(String clusterName) throws KeystoreServiceException {",
            " boolean rc;",
            " - final File  keyStoreFile = new File( keyStoreDir, clusterName + CREDENTIALS_SUFFIX  );",
            " + final Path keyStoreFilePath = keyStoreDirPath.resolve(clusterName + CREDENTIALS_SUFFIX);",
            " readLock.lock();",
            " try {",
            " try {",
            " - rc = isKeystoreAvailable(keyStoreFile, \"JCEKS\", masterService.getMasterSecret());",
            " + rc = isKeyStoreAvailable(keyStoreFilePath, CREDENTIALS_STORE_TYPE, masterService.getMasterSecret());",
            " } catch (KeyStoreException | IOException e) {",
            " throw new KeystoreServiceException(e);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "rJ9oZl5sb60",
    "email": "sumit@apache.org",
    "name": "Sumit Gupta",
    "project": "Apache/Knox",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "26361b6e7ad5021746b4f6cfda081ca69b274f4d",
          "msg": "KNOX-600 setting all service params as filter params for dispatch",
          "file": "ServiceDefinitionDeploymentContributor.java",
          "lang": "java",
          "diff": [
            " - //TODO: [sumit] make sure we pass all service params to the filter",
            " - // FilterParamDescriptor filterParam = filter.param().name(REPLAY_BUFFER_SIZE_PARAM).value(DEFAULT_REPLAY_BUFFER_SIZE);",
            " - // for ( Map.Entry<String, String> serviceParam : service.getParams().entrySet() ) {",
            " - // if ( REPLAY_BUFFER_SIZE_PARAM.equals(serviceParam.getKey()) ) {",
            " - // filterParam.value(serviceParam.getValue());",
            " - // }",
            " - // }",
            " + for ( Map.Entry<String, String> serviceParam : service.getParams().entrySet() ) {",
            " + filter.param().name(serviceParam.getKey()).value(serviceParam.getValue());",
            " + }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "016a47dc6b08192a4d762ad305313519dc2f31a5",
          "msg": "KNOX-526 Added new dispatch classes for backward compatibility",
          "file": "HttpClientDispatch.java",
          "lang": "java",
          "diff": [
            " @@ -17,302 +17,19 @@",
            " @Override",
            " -  public void destroy() {",
            " -",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "0X-HuM0RPqU",
    "email": "cestella@gmail.com",
    "name": "cestella",
    "project": "Apache/Metron",
    "first_commit": "2015",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "5fb4dda0e385ba030455db4c7d1290f872b688ce",
          "msg": "Cleaning for the release.",
          "file": "BasicBluecoatParser.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void configure(Map<String, Object> parserConfig) {",
            " - ",
            " - }",
            " - ",
            " - @Override",
            " - public void init() {",
            " - ",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "P854zdYFtrM",
    "email": "justinjleet@gmail.com",
    "name": "Justin Leet",
    "project": "Apache/Metron",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "fa6f3df51b881e84aa7a9525f24c627fa28ca62e",
          "msg": "METRON-283 Migrate Geo Enrichment outside of MySQL (justinleet) closes",
          "file": "GenericEnrichmentBolt.java",
          "lang": "java",
          "diff": [" - protected void handleError() {", " - ", " - }"]
        }
      }
    ]
  },
  {
    "code": "Y5fzMkA5fzM",
    "email": "merrimanr@gmail.com",
    "name": "merrimanr",
    "project": "Apache/Metron",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "5dd87886d6288b3f65e4f26e88ef10dcc82895fe",
          "msg": "METRON-859 Use REST application with Kerberos (merrimanr) closes #535",
          "file": "HadoopConfig.java",
          "lang": "java",
          "diff": [
            " public class HadoopConfig {",
            " ",
            " - @Autowired",
            " private Environment environment;",
            " ",
            " + @Autowired",
            " + public HadoopConfig(Environment environment) {",
            " + this.environment = environment;",
            " + }"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "545f358a11c91c40807855024d0169d59561c83d",
          "msg": "METRON-1114 Add group by capabilities to search REST endpoint (merrimanr) ",
          "file": "ElasticsearchDao.java",
          "lang": "java",
          "diff": [
            " @@ -146,23 +137,8 @@ public class ElasticsearchDao implements IndexDao {",
            " }",
            " SearchResponse searchResponse = new SearchResponse();",
            " searchResponse.setTotal(elasticsearchResponse.getHits().getTotalHits());",
            " - searchResponse.setResults(Arrays.stream(elasticsearchResponse.getHits().getHits()).map(searchHit -> {",
            " - SearchResult searchResult = new SearchResult();",
            " - searchResult.setId(searchHit.getId());",
            " - Map<String, Object> source;",
            " - if (fields.isPresent()) {",
            " - source = new HashMap<>();",
            " - searchHit.getFields().forEach((key, value) -> {",
            " - source.put(key, value.getValues().size() == 1 ? value.getValue() : value.getValues());",
            " - });",
            " - } else {",
            " - source = searchHit.getSource();",
            " - }",
            " - searchResult.setSource(source);",
            " - searchResult.setScore(searchHit.getScore());",
            " - searchResult.setIndex(searchHit.getIndex());",
            " - return searchResult;",
            " - }).collect(Collectors.toList()));",
            " + searchResponse.setResults(Arrays.stream(elasticsearchResponse.getHits().getHits()).map(searchHit ->",
            " + getSearchResult(searchHit, fields.isPresent())).collect(Collectors.toList()));"
          ]
        }
      }
    ]
  },
  {
    "code": "7mFuvZAlYAM",
    "email": "michael.miklavcic@gmail.com",
    "name": "Michael Miklavcic",
    "project": "Apache/Metron",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Printf-style format strings should be used correctly",
        "commit": {
          "hash": "ec959d20efa72e9868d87a02d9407bbaad34c4c8",
          "msg": "METRON-975: Normalize logging and switch to common idiom with SLF4J (mmiklavc)",
          "file": "PcapCli.java",
          "lang": "java",
          "diff": [
            " - LOGGER.error(\"Failed to execute fixed filter job: \" + e.getMessage(), e);",
            " + LOGGER.error(\"Failed to execute fixed filter job: {}\", e.getMessage(), e);"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "e0c9970b1f467135f01ee212fb2a8d7f2d61de8b",
          "msg": "METRON-257 Enable pcap result pagination from the Pcap CLI (mmiklavc via cestella)",
          "file": "PcapCli.java",
          "lang": "java",
          "diff": [
            " - String timestamp = clock.currentTimeFormatted(\"yyyyMMddHHmmssSSSZ\");",
            " - String outFileName = String.format(\"pcap-data-%s.pcap\", timestamp);"
          ]
        }
      }
    ]
  },
  {
    "code": "B8dOE4WQvcU",
    "email": "nickallen@apache.org",
    "name": "Nick Allen",
    "project": "Apache/Metron",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "3dfd7be6f9b5325bdce01ed21f15d2ed13384ea3",
          "msg": "METRON-389 Create Java API to Read Profile Data During Model Scoring (nickwallen)",
          "file": "ProfileHBaseMapper.java",
          "lang": "java",
          "diff": [
            " - } catch(NoSuchAlgorithmException e) {",
            " - throw new RuntimeException(e);"
          ]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "3acb216539f8d757e52eae021838d9e56e379cc4",
          "msg": "METRON-367 Enhance Profiler to Support Multiple Numeric Types (nickwallen) ",
          "file": "ProfilerIntegrationTest.java",
          "lang": "java",
          "diff": [
            " + /**",
            " + * Tests the second example contained within the README.",
            " + */",
            " + @Test",
            " + public void testExample2() throws Exception {",
            " +",
            " + setup(TEST_RESOURCES + \"/config/zookeeper/readme-example-2\");",
            " +",
            " + // start the topology and write test messages to kafka",
            " + fluxComponent.submitTopology();",
            " + kafkaComponent.writeMessages(Constants.INDEXING_TOPIC, input);",
            " +",
            " + // verify - ensure the profile is being persisted",
            " + waitOrTimeout(() -> profilerTable.getPutLog().size() > 0,",
            " + timeout(seconds(90)));",
            " +",
            " + // verify - there are 5 'HTTP' and 5 'DNS' messages thus 5/5 = 1",
            " + double actual = readDouble(ProfileHBaseMapper.QVALUE);",
            " + Assert.assertEquals(5.0 / 5.0, actual, 0.01);",
            " + }"
          ]
        }
      }      
    ]
  },
  {
    "code": "LVSOsQkNZsw",
    "email": "kmarton@apache.org",
    "name": "Julia Kinga Marton",
    "project": "Apache/Oozie",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "512360e7dd584d565748e2b2881867c267222d58",
          "msg": "OOZIE-2907 Delete PrepareActionsDriver from oozie-sharelib (asalamon74 via kmarton)",
          "file": "TestPrepareActionsDriver.java",
          "lang": "java",
          "diff": [
            " - // Test to check if prepare action is performed as expected when the prepare XML block is a valid one",
            " - public void testDoOperationsWithValidXML() throws LauncherException, IOException, ParserConfigurationException, SAXException {",
            " - Path actionDir = getFsTestCaseDir();",
            " - FileSystem fs = getFileSystem();",
            " - Path newDir = new Path(actionDir, \"newDir\");",
            " - String prepareXML = \"<prepare>\" + \"<mkdir path='\" + newDir + \"'/>\" + \"</prepare>\";",
            " -",
            " - // Delete the file if it is already there",
            " - if (fs.exists(newDir)) {",
            " - fs.delete(newDir, true);",
            " - }",
            " - ",
            " - JobConf conf = createJobConf();",
            " - LauncherHelper.setupLauncherURIHandlerConf(conf);",
            " - PrepareActionsDriver.doOperations(prepareXML, conf);",
            " - assertTrue(fs.exists(actionDir));",
            " - }",
            " - ",
            " - // Test to check if Exception is thrown when the prepare XML block is invalid",
            " - public void testDoOperationsWithInvalidXML() throws LauncherException, IOException {",
            " - Path actionDir = getFsTestCaseDir();",
            " - FileSystem fs = getFileSystem();",
            " - Path newDir = new Path(actionDir, \"newDir\");",
            " - String prepareXML = \"\";",
            " - ",
            " - // Delete the file if it is already there",
            " - if (fs.exists(newDir)) {",
            " - fs.delete(newDir, true);",
            " - }"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "512360e7dd584d565748e2b2881867c267222d58",
          "msg": "OOZIE-2907 Delete PrepareActionsDriver from oozie-sharelib (asalamon74 via kmarton)",
          "file": "PrepareActionsDriver.java",
          "lang": "java",
          "diff": [
            " - /**",
            " - * Utility class to perform operations on the prepare block of Workflow",
            " - *",
            " - */",
            " - @Deprecated"
          ]
        }
      }
    ]
  },
  {
    "code": "q30a1yIULAk",
    "email": "arne@apache.org",
    "name": "arne",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "1e25bad15110854b4bca9ffc6ee5dd898555b86b",
          "msg": "OWB-745: Removed WebBeansAnnotatedTypeUtil",
          "file": "WebBeansAnnotatedTypeUtil.java",
          "lang": "java",
          "diff": [
            " - if(args.length > 0)",
            " - {",
            " - throw new WebBeansConfigurationException(\"Error in defining injected methods in annotated method : \" + annotatedMethod+",
            " - \". Reason : Initializer methods must not be generic.\");",
            " - }",
            " - ",
            " - if (annotatedMethod.isAnnotationPresent(Produces.class))",
            " - {",
            " - throw new WebBeansConfigurationException(\"Error in defining injected methods in annotated method : \" + annotatedMethod+",
            " - \". Reason : Initializer method can not be annotated with @Produces.\");",
            " - }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "f3626666c5bcae0f46c7a7091ecca2790affc75b",
          "msg": "OWB-745: moved DefinitionUtil.addConstructorInjectionPointMetaData to ManagedBeanCreatorImpl",
          "file": "AbstractInjecionTargetBeanCreator.java",
          "lang": "java",
          "diff": [
            " - DefinitionUtil definitionUtil = webBeansContext.getDefinitionUtil();"
          ]
        }
      }
    ]
  },
  {
    "code": "qIXdbR-WVng",
    "email": "cgurkanerdogdu@gmail.com",
    "name": "Gurkan Erdogdu",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2008",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "fe6718988f90bd491a95de6e050a521f90c039f0",
          "msg": "Update API contract.",
          "file": "CreationalContextImpl.java",
          "lang": "java",
          "diff": [
            " - public void push(Bean<T> bean, T incompleteInstance)",
            " + public void push(T incompleteInstance)"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "f3626666c5bcae0f46c7a7091ecca2790affc75b",
          "msg": "Updating for reflecting Instance changes.",
          "file": "WebBeansUtil.java",
          "lang": "java",
          "diff": [
            " - if(ClassUtil.isParametrizedType(injectionPoint.getType()))",
            " + if(!(rawType.equals(Instance.class)))",
            " {",
            " - ParameterizedType pt = (ParameterizedType)injectionPoint.getType();",
            " - rawType = (Class<?>) pt.getRawType();",
            " - Type[] typeArgs = pt.getActualTypeArguments();",
            " - if(!(rawType.equals(Instance.class)))",
            " + throw new WebBeansConfigurationException(\"<Instance> field injection \" + injectionPoint.toString() + \" must have type javax.inject.Instance\");",
            " + }",
            " + else",
            " + {",
            " + if(typeArgs.length == 1)",
            " {",
            " - throw new WebBeansConfigurationException(\"@Obtains field injection \" + injectionPoint.toString() + \" must have type javax.inject.Instance\");",
            " - }",
            " - else",
            " - {",
            " - if(typeArgs.length == 1)",
            " - {",
            " - Type actualArgument = typeArgs[0];",
            " - if(ClassUtil.isParametrizedType(actualArgument) || ClassUtil.isWildCardType(actualArgument) || ClassUtil.isTypeVariable(actualArgument))",
            " - {",
            " - throw new WebBeansConfigurationException(\"@Obtains field injection \" + injectionPoint.toString() + \" actual type argument can not be Parametrized, Wildcard type or Type variable\");",
            " - }",
            " - if(ClassUtil.isDefinitionConstainsTypeVariables((Class<?>)actualArgument))",
            " - {",
            " - throw new WebBeansConfigurationException(\"@Obtains field injection \" + injectionPoint.toString() + \" must not have TypeVariable or WildCard generic type argument\");",
            " - }",
            " + Type actualArgument = typeArgs[0];",
            " + if(ClassUtil.isParametrizedType(actualArgument) || ClassUtil.isWildCardType(actualArgument) || ClassUtil.isTypeVariable(actualArgument))",
            " + {",
            " + throw new WebBeansConfigurationException(\"<Instance> field injection \" + injectionPoint.toString() + \" actual type argument can not be Parametrized, Wildcard type or Type variable\");",
            " }",
            " - else",
            " - }",
            " + Type actualArgument = typeArgs[0];",
            " + if(ClassUtil.isParametrizedType(actualArgument) || ClassUtil.isWildCardType(actualArgument) || ClassUtil.isTypeVariable(actualArgument))",
            " + {",
            " + throw new WebBeansConfigurationException(\"<Instance> field injection \" + injectionPoint.toString() + \" actual type argument can not be Parametrized, Wildcard type or Type variable\");",
            " }",
            " - else",
            " + if(ClassUtil.isDefinitionConstainsTypeVariables((Class<?>)actualArgument))",
            " {",
            " - throw new WebBeansConfigurationException(\"@Obtains field injection \" + injectionPoint.toString() + \" must not have more than one actual type argument\");",
            " + throw new WebBeansConfigurationException(\"<Instance> field injection \" + injectionPoint.toString() + \" must not have TypeVariable or WildCard generic type argument\");",
            " }",
            " - }",
            " - }"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Throwable and Error should not be caught",
        "commit": {
          "hash": "da701c190e6f22c490c1df636d788d474e6a60bc",
          "msg": "OWB-38 Check throwable.",
          "file": "NotificationManager.java",
          "lang": "java",
          "diff": [" - catch (Throwable e)", " + catch (Exception e)"]
        }
      }
    ]
  },
  {
    "code": "9uRWPuKYUNU",
    "email": "dblevins@apache.org",
    "name": "David Blevins",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2009",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "baed6f2f6104f6cd442b426912273d7f18a0447b",
          "msg": "OWB-701: Removing Javassist. Refactored all Javassist dependencies into the new proxy.javassist package.",
          "file": "JavassistProxyFactory.java",
          "lang": "java",
          "diff": [
            " if (!(bean instanceof WebBeansDecorator<?>) && !(bean instanceof WebBeansInterceptor<?>))",
            " {",
            " InterceptorHandler interceptorHandler = createInterceptorHandler(bean, creationalContext);",
            " - if (!true)",
            " - {",
            " - final Set<Type> types = bean.getTypes();",
            " - final Set<Class<?>> interfaceList = new HashSet<Class<?>>();",
            " - Class<?> superClass = null;",
            " - for (Type generic : types)",
            " - {",
            " - Class<?> type = ClassUtil.getClazz(generic);",
            " - if (type.isInterface())",
            " - {",
            " - interfaceList.add(type);",
            " - }",
            " - else if ((superClass == null) || (superClass.isAssignableFrom(type) && type != Object.class))",
            " - {",
            " - superClass = type;",
            " - }",
            " - }",
            " - if (!interfaceList.contains(Serializable.class))",
            " - {",
            " - interfaceList.add(Serializable.class);",
            " - }",
            " - Class<?>[] interfaceArray = new Class<?>[interfaceList.size()];",
            " - interfaceArray = interfaceList.toArray(interfaceArray);",
            " - if (superClass == null || superClass.equals(Object.class))",
            " - {",
            " - return Proxy.newProxyInstance(WebBeansUtil.getCurrentClassLoader(), interfaceArray,",
            " -  interceptorHandler);",
            " - }",
            " - else",
            " - {",
            " - return AsmProxyFactory.newProxyInstance(WebBeansUtil.getCurrentClassLoader(),",
            " - interceptorHandler, superClass, interfaceArray);",
            " - }",
            " - }",
            " - else",
            " - {",
            " - setHandler(result, interceptorHandler);",
            " - }",
            " + setHandler(result, interceptorHandler);",
            " }",
            " }",
            " catch (Exception e)"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "5b2f1ecca33bff2cf6ddf7cf6570439948116f5d",
          "msg": "Destatic InstanceImpl and the Context code. Some destatic of WebBeansELResolver",
          "file": "DefaultSingletonService.java",
          "lang": "java",
          "diff": [" - //util.Track.get(key);", " + util.Track.get(key);"]
        }
      },
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should not be ignored",
        "commit": {
          "hash": "13dce8e6197bc505b21b3f8d3ff094394eff4acb",
          "msg": "OWB-858: AnnotatedTypeImpl not thread safe Fixed",
          "file": "AnnotatedTypeImplTest.java",
          "lang": "java",
          "diff": [
            " @@ -110,7 +108,6 @@ public void doit()",
            " }",
            " @Test",
            " - @Ignore",
            " public void testGetConstructors()",
            " throws Exception",
            " - {"
          ]
        }
      }
    ]
  },
  {
    "code": "jCeQmQJSZKk",
    "email": "djencks@apache.org",
    "name": "David Jencks",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2010",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "1d38c8cef212708f9d9f8883c8d5f9e31b6e4c13",
          "msg": "OWB-578 alternate DI constructor for OpenWebBeansConfiguration",
          "file": "AbstractLifeCycle.java",
          "lang": "java",
          "diff": [
            " @@ -196,14 +201,6 @@ public abstract class AbstractLifeCycle implements ContainerLifecycle",
            " return logger;",
            " }",
            " - /**",
            " - * @return the scannerService",
            " - */",
            " - //    protected ScannerService getScannerService()",
            " - //    {",
            " - //        return scannerService;",
            " - //    }",
            " -"
          ]
        }
      }
    ]
  },
  {
    "code": "jySj9tJAEg0",
    "email": "rmannibucau@gmail.com",
    "name": "Romain Manni-Bucau",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "0ccaa265dda360e4bab4b8915871b4990b9f9f32",
          "msg": "minor cleanup (useless param/method)",
          "file": "GenericsUtil.java",
          "lang": "java",
          "diff": [
            " - private static boolean isAssignableFrom(boolean isDelegateOrEvent, Class<?> injectionPointType, Class<?> beanType)",
            " + private static boolean isAssignableFrom(Class<?> injectionPointType, Class<?> beanType)"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Boolean expressions should not be gratuitous",
        "commit": {
          "hash": "e2e39b7cfca543e9caa80d35bbfd2a5fd79c2757",
          "msg": "minor typo (i think) which can affect EE case - the PluginLoader was never finding plugins and internal beans was not created since they needed the wbcontext",
          "file": "PluginLoader.java",
          "lang": "java",
          "diff": [
            " @@ -270,6 +270,6 @@ public OpenWebBeansWebPlugin getWebPlugin()",
            " private boolean pluginsExist()",
            " {",
            " - return plugins == null && plugins.size() > 0;",
            " + return plugins != null && plugins.size() > 0;",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "7QkttlZglNU",
    "email": "struberg@apache.org",
    "name": "Mark Struberg",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2009",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "582c6db5d8e450e19dd849a8b8174f3888fef2dc",
          "msg": "OWB-538 fix isPurePojoBean superclass check",
          "file": "DefinitionUtil.java",
          "lang": "java",
          "diff": [
            " - Class superClass = cls.getSuperclass();",
            " + Class<?> superClass = cls.getSuperclass();"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "f3626666c5bcae0f46c7a7091ecca2790affc75b",
          "msg": "OWB-745: moved DefinitionUtil.addConstructorInjectionPointMetaData to ManagedBeanCreatorImpl",
          "file": "AbstractInjecionTargetBeanCreator.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void afterPhase(PhaseEvent phaseEvent)",
            " - {",
            " - if (phaseEvent.getPhaseId().equals(PhaseId.RENDER_RESPONSE) ||",
            " - phaseEvent.getFacesContext().getResponseComplete())",
            " - {",
            " - if(!isOwbApplication())",
            " - {",
            " - return;",
            " - }",
            " - ConversationManager conversationManager = webBeansContext.getConversationManager();",
            " - Conversation conversation = conversationManager.getConversationBeanReference();",
            " - if (conversation.isTransient())",
            " - {",
            " - if (logger.isLoggable(Level.FINE))",
            " - {",
            " - logger.log(Level.FINE, \"Destroying the conversation context with cid : [{0}]\", conversation.getId());",
            " - }",
            " - contextsService.endContext(ConversationScoped.class, null);",
            " - }",
            " - else",
            " - {",
            " - //Conversation must be used by one thread at a time",
            " - ConversationImpl owbConversation = (ConversationImpl)conversation;",
            " - owbConversation.updateTimeOut();",
            " - //Other threads can now access propogated conversation.",
            " - owbConversation.iDontUseItAnymore();",
            " - }",
            " - }",
            " - }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "5462311d0e41288f948daa986cf3821c24cd2798",
          "msg": "OWB-594 fix broken @ApplicationScoped bean caching",
          "file": "ApplicationScopedBeanIntereptorHandler.java",
          "lang": "java",
          "diff": [
            " - protected Object getContextualInstance(OwbBean<Object> bean)",
            " + protected Object getContextualInstance()"
          ]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Deprecated elements should have both the annotation and the Javadoc tag",
        "commit": {
          "hash": "9a53218c809092f8955113bf2245e94739c3d027",
          "msg": "OWB-1046 finally get rid of old ContextFactory class. This class is @deprecated for many years now. It also already did just delegate through to the ContextsService impl.",
          "file": "WebBeansContext.java",
          "lang": "java",
          "diff": [
            " - @Deprecated",
            " - public ContextFactory getContextFactory()",
            " - {",
            " - return contextFactory;",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "hIicWKGIUH0",
    "email": "tandraschko@apache.org",
    "name": "Thomas Andraschko",
    "project": "Apache/OpenWebBeans",
    "first_commit": "2012",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "TestCases should contain tests",
        "commit": {
          "hash": "d1d1598d32915373db69ccf2704a0541df524831",
          "msg": "OWB-917 - Multiple specialization doesn't work",
          "file": "MultipleSpecializationTest.java",
          "lang": "java",
          "diff": [
            " /**",
            " * Tests that a specialization must not have a @Named annotation",
            " */",
            " - //@Test",
            " + @Test",
            " public void testFailMultipleSpecializationWithNamed()",
            " {",
            " + Exception occuredException = null;",
            " try",
            " {",
            " Collection<Class<?>> beanClasses = new ArrayList<Class<?>>();",
            " @@ -68,10 +71,13 @@ public class MultipleSpecializationTest extends AbstractUnitTest",
            " }",
            " catch (Exception e)",
            " {",
            " - Assert.assertEquals(WebBeansConfigurationException.class.getName(), e.getClass().getName());",
            " - Assert.assertEquals(InconsistentSpecializationException.class.getName(), e.getCause().getClass().getName());",
            " + occuredException = e;",
            " }",
            " + Assert.assertNotNull(occuredException);",
            " + Assert.assertEquals(WebBeansConfigurationException.class.getName(), occuredException.getClass().getName());",
            " + Assert.assertEquals(DefinitionException.class.getName(), occuredException.getCause().getClass().getName());",
            " +",
            " shutDownContainer();",
            " }",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "TK4eW2s_BdQ",
    "email": "gbailleul@apache.org",
    "name": "Guillaume Bailleul",
    "project": "Apache/PDFbox",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Sections of code should not be commented out",
        "commit": {
          "hash": "2c33be84c347669991eafc0dc4ae2a816efe58f3",
          "msg": "PDFBOX-1343 : add missing structured types and create missing field in namespaces",
          "file": "VersionType.java",
          "lang": "java",
          "diff": [
            " public ResourceEventType getEvent () {",
            " - // ResourceEventType event = (ResourceEventType)getPropertiesByLocalName(EVENT);",
            " return (ResourceEventType)getFirstEquivalentProperty(EVENT,ResourceEventType.class);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "lAox5is70mo",
    "email": "jahewson@apache.org",
    "name": "John Hewson",
    "project": "Apache/PDFbox",
    "first_commit": "2014",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "daeee5e2ebaaee092ca53f9ab7f406136b2ff071",
          "msg": "Added image filter repair mechanism for PDFBOX-1893",
          "file": "DCTFilter.java",
          "lang": "java",
          "diff": [
            " - public void decode(InputStream input, OutputStream output,",
            " - COSDictionary options, int filterIndex) throws IOException",
            " + @Override",
            " + protected final DecodeResult decode(InputStream encoded, OutputStream decoded,",
            " + COSDictionary parameters) throws IOException"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "c19cf1d59f0e2696fb761f56c330f94487537b89",
          "msg": "PDFBOX-1963: restore binary TIFF writing and clean up ImageIOUtil",
          "file": "ImageIOUtil.java",
          "lang": "java",
          "diff": [
            " - private static boolean addResolution(IIOMetadata meta, int resolution)",
            " - {",
            " - if (meta != null && !meta.isReadOnly() && meta.isStandardMetadataFormatSupported())",
            " - {",
            " - IIOMetadataNode root = (IIOMetadataNode)meta.getAsTree(STANDARD_METADATA_FORMAT);",
            " - IIOMetadataNode dim = getChildNode(root, \"Dimension\");",
            " - if (dim == null)",
            " - {",
            " - dim = new IIOMetadataNode(\"Dimension\");",
            " - root.appendChild(dim);",
            " - }",
            " - IIOMetadataNode child;",
            " - child = getChildNode(dim, \"HorizontalPixelSize\");",
            " - if (child == null)",
            " - {",
            " - child = new IIOMetadataNode(\"HorizontalPixelSize\");",
            " - dim.appendChild(child);",
            " - }",
            " - child.setAttribute(\"value\",",
            " - Double.toString(resolution / 25.4));",
            " - child = getChildNode(dim, \"VerticalPixelSize\");",
            " - if (child == null)",
            " - {",
            " - child = new IIOMetadataNode(\"VerticalPixelSize\");",
            " - dim.appendChild(child);",
            " - }",
            " - child.setAttribute(\"value\",",
            " - Double.toString(resolution / 25.4));",
            " - try",
            " - {",
            " - meta.mergeTree(STANDARD_METADATA_FORMAT, root);",
            " - }",
            " - catch (IIOInvalidTreeException e)",
            " - {",
            " - throw new RuntimeException(\"Cannot update image metadata: \"",
            " - + e.getMessage());",
            " - }",
            " - return true;",
            " - }",
            " - return false;",
            " - }",
            " - private static IIOMetadataNode getChildNode(Node n, String name)",
            " - {",
            " - NodeList nodes = n.getChildNodes();",
            " - for (int i = 0; i < nodes.getLength(); i++)",
            " + try",
            " {",
            " - Node child = nodes.item(i);",
            " - if (name.equals(child.getNodeName()))",
            " - {",
            " - return (IIOMetadataNode)child;",
            " - }",
            " + metadata.mergeTree(\"javax_imageio_1.0\", root);",
            " }",
            " - return null;",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "nxqEpNcxvrE",
    "email": "jukka@apache.org",
    "name": "Jukka Zitting",
    "project": "Apache/PDFbox",
    "first_commit": "2008",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Methods should not be empty",
        "commit": {
          "hash": "286b2a9020c95cebe283b55282e2b57d670c0c86",
          "msg": "PDFBOX-1132: Add Tika parsers for PDF and TTF. Remove the Tika dependencies. The relevant code is evolving too fast in Tika and I haven't had time to lead the transition of that code to PDFBox. Thus it's best to leave it in Tika for now.",
          "file": "PDF2XHTML.java",
          "lang": "java",
          "diff": [
            " - @Override",
            " - public void write(char[] cbuf, int off, int len) {",
            " - }",
            " - @Override",
            " - public void flush() {",
            " - }",
            " - @Override",
            " - public void close() {",
            " - }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused \"private\" methods should be removed",
        "commit": {
          "hash": "286b2a9020c95cebe283b55282e2b57d670c0c86",
          "msg": "PDFBOX-1132: Add Tika parsers for PDF and TTF. Remove the Tika dependencies. The relevant code is evolving too fast in Tika and I haven't had time to lead the transition of that code to PDFBox. Thus it's best to leave it in Tika for now.",
          "file": "PDFParser.java",
          "lang": "java",
          "diff": [
            " - private void addMetadata(",
            " - Metadata metadata, Property property, Calendar value) {",
            " - if (value != null) {",
            " - metadata.set(property, value.getTime());",
            " - }",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "L2YZLg9aEtk",
    "email": "lehmi@apache.org",
    "name": "Andreas Lehmk\u00fchler",
    "project": "Apache/PDFbox",
    "first_commit": "2009",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Raw types should not be used",
        "commit": {
          "hash": "a8cbfd833f52da467b561b068cfca9f09751e48f",
          "msg": "PDFBOX-4458: introduced constants for operator names",
          "file": "OperatorProcessor.java",
          "lang": "java",
          "diff": [
            " @@ -76,7 +76,7 @@ public void setContext(PDFStreamEngine context)",
            " * @param clazz The expected class.",
            " * @return the boolean",
            " */",
            " - public boolean checkArrayTypesClass(List<COSBase> operands, Class clazz)",
            " + public boolean checkArrayTypesClass(List<COSBase> operands, Class<?> clazz)",
            " {",
            " for (COSBase base : operands)",
            " {"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "1b7c1071fe82f95a5ee315872fe797a68c4c9fb5",
          "msg": "PDFBOX-568: improved text extraction of sample_fonts_solidconvertor.pdf and cweb.pdf from our test arena",
          "file": "PDFont.java",
          "lang": "java",
          "diff": [
            " @@ -583,61 +599,6 @@ public void setEncoding( Encoding enc )",
            " public Encoding getEncoding() throws IOException",
            " {",
            " - if( fontEncoding == null )",
            " - {",
            " - EncodingManager manager = getEncodingManager();",
            " - COSBase encoding = getEncodingObject();",
            " - if( encoding == null )",
            " - {",
            " - FontMetric metric = getAFM();",
            " - if( metric != null )",
            " - {",
            " - fontEncoding = new AFMEncoding( metric );",
            " - }",
            " - if( fontEncoding == null )",
            " - {",
            " - fontEncoding = manager.getStandardEncoding();",
            " - }",
            " - }",
            " - else if( encoding instanceof COSDictionary )",
            " - {",
            " - COSDictionary encodingDic = (COSDictionary)encoding;",
            " - if( baseEncodingName == null)",
            " - {",
            " - COSName fontEncodingFromFile = getEncodingFromFont();",
            " - encodingDic.setItem(",
            " - COSName.BASE_ENCODING,",
            " - fontEncodingFromFile );",
            " - }",
            " - fontEncoding = new DictionaryEncoding( encodingDic );",
            " - }",
            " - else if( encoding instanceof COSName )",
            " - {",
            " - if( !encoding.equals( COSName.IDENTITY_H ) )",
            " - {",
            " - fontEncoding = manager.getEncoding( (COSName)encoding );",
            " - }",
            " - }",
            " - else",
            " - {",
            " - throw new IOException( \"Unexpected encoding type:\" + encoding.getClass().getName() );",
            " - }",
            " - }",
            " return fontEncoding;",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "G4Pb2J_Ttqw",
    "email": "leleueri@apache.org",
    "name": "Eric Leleu",
    "project": "Apache/PDFbox",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "e52d346adfa24ac83ec71d79c02d67e14434b1a4",
          "msg": "[https://issues.apache.org/jira/browse/PDFBOX-1312] Font validation refactoring",
          "file": "CompositeFontContainer.java",
          "lang": "java",
          "diff": [
            " - CFFType0FontContainer getCFFType0() {",
            " - if (delegatedContainer == null) {",
            " - delegatedContainer = new CFFType0FontContainer(this);",
            " - }",
            " - return (CFFType0FontContainer)this.delegatedContainer;",
            " - }",
            " -",
            " -  CFFType2FontContainer getCFFType2() {",
            " - if (delegatedContainer == null) {",
            " - delegatedContainer = new CFFType2FontContainer(this);",
            " - }",
            " - return (CFFType2FontContainer)this.delegatedContainer;",
            " - }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused method parameters should be removed",
        "commit": {
          "hash": "e52d346adfa24ac83ec71d79c02d67e14434b1a4",
          "msg": "[https://issues.apache.org/jira/browse/PDFBOX-1312] Font validation refactoring",
          "file": "SimpleFontValidator.java",
          "lang": "java",
          "diff": [
            " + public void validate() throws ValidationException {",
            " + checkMandatoryField();",
            " - protected boolean checkToUnicode(COSDocument cDoc) {",
            " - // Check the toUnicode -- Useless for PDF/A 1-b",
            " - return true;",
            " + createFontDescriptorHelper();",
            " + processFontDescriptorValidation();",
            " +",
            " + checkEncoding();",
            " + checkToUnicode();",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "r6EtVERhpDM",
    "email": "msahyoun@apache.org",
    "name": "Maruan Sahyoun",
    "project": "Apache/PDFbox",
    "first_commit": "2013",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Tests should include assertions",
        "commit": {
          "hash": "3d437f41c586eaf145d273cf7d0e74b6fc4ae1e0",
          "msg": "PDFBOX-3461: add handling for empty paragraphs; enhance unit tests; compare streams",
          "file": "ControlCharacterTest.java",
          "lang": "java",
          "diff": [
            " @Test",
            " public void characterCR() throws IOException",
            " {",
            " - acroForm.getField(\"pdfbox-cr\").setValue(\"CR\rCR\");",
            " + PDField field = acroForm.getField(\"pdfbox-cr\");",
            " + field.setValue(\"CR\rCR\");",
            " +",
            " + List<String> pdfboxValues = getStringsFromStream(field);",
            " + List<String> acrobatValues = getStringsFromStream(acroForm.getField(\"acrobat-cr\"));",
            " +",
            " + assertEquals(pdfboxValues, acrobatValues);",
            " }"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "4b1026b4881c1b7ed32e7249bebc49d8066c329e",
          "msg": "PDFBOX-4158: refactor; move common code to IOUtils",
          "file": "PDDocument.java",
          "lang": "java",
          "diff": [
            " @@ -1399,49 +1399,22 @@ public void close() throws IOException",
            " // close resources and COSWriter",
            " if (signingSupport != null)",
            " {",
            " - try",
            " - {",
            " - signingSupport.close();",
            " - }",
            " - catch (IOException ioe)",
            " - {",
            " - LOG.warn(\"Error closing SigningSupport\", ioe);",
            " - if (firstException == null)",
            " - {",
            " - firstException = ioe;",
            " - }",
            " - }",
            " + firstException = IOUtils.closeAndLogException(signingSupport, LOG, \"SigningSupport\", firstException);",
            " } "
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "String literals should not be duplicated",
        "commit": {
          "hash": "17f72f8ed3520654d2048a23bda563bb6858d150",
          "msg": "PDFBOX-4071: remove @throws declaration where exception will not be thrown",
          "file": "COSUtils.java",
          "lang": "java",
          "diff": [
            " @@ -70,17 +70,10 @@ public static boolean isString(COSBase elt, COSDocument doc)",
            " {",
            " if (elt instanceof COSObject)",
            " {",
            " - try",
            " - {",
            " - COSObjectKey key = new COSObjectKey((COSObject) elt);",
            " - COSObject obj = doc.getObjectFromPool(key);",
            " - return (obj != null && (obj.getObject() instanceof COSString || obj.getObject() instanceof COSName));",
            " - }",
            " - catch (IOException e)",
            " - {",
            " - LOGGER.debug(\"Couldn't get COSObject from object pool - returning false\", e);",
            " - return false;",
            " - }",
            " +",
            " + COSObjectKey key = new COSObjectKey((COSObject) elt);",
            " + COSObject obj = doc.getObjectFromPool(key);",
            " + return (obj != null && (obj.getObject() instanceof COSString || obj.getObject() instanceof COSName));",
            " }",
            " return (elt instanceof COSString || elt instanceof COSName);",
            " @@ -122,17 +115,9 @@ private static boolean isClass(COSBase elt, COSDocument doc, Class claz)",
            " {",
            " if (elt instanceof COSObject)",
            " {",
            " - try",
            " - {",
            " - COSObjectKey key = new COSObjectKey((COSObject) elt);",
            " - COSObject obj = doc.getObjectFromPool(key);",
            " - return (obj != null && claz.isInstance(obj.getObject()));",
            " - }",
            " - catch (IOException e)",
            " - {",
            " - LOGGER.debug(\"Couldn't get COSObject from object pool - returning false\", e);",
            " - return false;",
            " - }",
            " + COSObjectKey key = new COSObjectKey((COSObject) elt);",
            " + COSObject obj = doc.getObjectFromPool(key);",
            " + return (obj != null && claz.isInstance(obj.getObject()));",
            " }",
            " return claz.isInstance(elt);"
          ]
        }
      }
    ]
  },
  {
    "code": "OM4x9UiKb3o",
    "email": "tilman@apache.org",
    "name": "Tilman Hausherr",
    "project": "Apache/PDFbox",
    "first_commit": "2011",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Try-with-resources should be used",
        "commit": {
          "hash": "c9e6e0c8870e5f4ab815cadfe291b6f464be6a21",
          "msg": "PDFBOX-2852: use JDK7 syntax",
          "file": "AddMessageToEachPage.java",
          "lang": "java",
          "diff": [
            " @@ -55,12 +55,8 @@ public AddMessageToEachPage()",
            " */",
            " public void doIt( String file, String message, String  outfile ) throws IOException",
            " {",
            " - // the document",
            " - PDDocument doc = null;",
            " - try",
            " + try (PDDocument doc = PDDocument.load(new File(file)))",
            " {",
            " - doc = PDDocument.load( new File(file) );",
            " -",
            " PDFont font = PDType1Font.HELVETICA_BOLD;",
            " float fontSize = 36.0f;"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Resources should be closed",
        "commit": {
          "hash": "01aaf7466261a5a7bdcd683524e6b974e4808427",
          "msg": "PDFBOX-4071: SonarQube fix",
          "file": "PDFDebugger.java",
          "lang": "java",
          "diff": [
            " @@ -1106,10 +1105,10 @@ else if( selectedNode instanceof COSStream )",
            " try",
            " {",
            " COSStream stream = (COSStream) selectedNode;",
            " - InputStream in = stream.createInputStream();",
            " - ByteArrayOutputStream baos = new ByteArrayOutputStream();",
            " - IOUtils.copy(in, baos);",
            " - data = baos.toString();",
            " + try (InputStream in = stream.createInputStream())",
            " + {",
            " + data = new String(IOUtils.toByteArray(in));",
            " + }",
            " }",
            " catch( IOException e )",
            " {"
          ]
        }
      },
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "895bbca001463af13a65ffb3c5403c752096382f",
          "msg": "PDFBOX-2941: show the names only for 'real' fields",
          "file": "PDFTreeCellRenderer.java",
          "lang": "java",
          "diff": [
            " @@ -194,16 +194,6 @@ private String toTreePostfix(Object nodeValue)",
            " dict.containsKey(COSName.T) && dict.containsKey(COSName.KIDS))",
            " {",
            " String name = dict.getString(COSName.T);",
            " - while (name == null)",
            " - {",
            " - COSBase base = dict.getDictionaryObject(COSName.PARENT);",
            " - if (!(base instanceof COSDictionary))",
            " - {",
            " - break;",
            " - }",
            " - dict = (COSDictionary) base;",
            " - name = dict.getString(COSName.T);",
            " - }",
            " if (name != null)",
            " {",
            " sb.append(\"   Name: \");"
          ]
        }
      }
    ]
  },
  {
    "code": "0pT39pEgcn8",
    "email": "alahmed.se@gmail.com",
    "name": "Ali Ahmed",
    "project": "Apache/Pulsar",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Cognitive Complexity of methods should not be too high",
        "commit": {
          "hash": "867d924e201a7400e29d438bfb191fff8395ce6f",
          "msg": "Refactor api commands (#3168)",
          "file": "ComponentImpl.java",
          "lang": "java",
          "diff": [
            " if (!calculateSubjectType(functionMetaData).equals(componentType)) {",
            " log.error(\"{}/{}/{} is not a {}\", tenant, namespace, componentName, componentType);",
            " - return Response.status(Status.NOT_FOUND).type(MediaType.APPLICATION_JSON)",
            " - .entity(new ErrorData(String.format(componentType + \" %s doesn't exist\", componentName))).build();",
            " - }",
            " -",
            " - String retVal;",
            " - if (componentType.equals(FUNCTION)) {",
            " - FunctionConfig config = FunctionConfigUtils.convertFromDetails(functionMetaData.getFunctionDetails());",
            " - retVal = new Gson().toJson(config);",
            " - } else if (componentType.equals(SOURCE)) {",
            " - SourceConfig config = SourceConfigUtils.convertFromDetails(functionMetaData.getFunctionDetails());",
            " - retVal = new Gson().toJson(config);",
            " - } else {",
            " - SinkConfig config = SinkConfigUtils.convertFromDetails(functionMetaData.getFunctionDetails());",
            " - retVal = new Gson().toJson(config);",
            " + throw new RestException(Status.NOT_FOUND, String.format(componentType + \" %s doesn't exist\", componentName));",
            " }",
            " - return Response.status(Status.OK).entity(retVal).build();",
            " + FunctionConfig config = FunctionConfigUtils.convertFromDetails(functionMetaData.getFunctionDetails());",
            " + return config;"
          ]
        }
      }
    ]
  },
  {
    "code": "zaLVNe3Mts4",
    "email": "erenavsarogullari@gmail.com",
    "name": "Eren Avsarogullari",
    "project": "Apache/Pulsar",
    "first_commit": "2018",
    "cqs": [
      {
        "td_type": "Code Debt",
        "td_issue": "Static fields should not be updated in constructors",
        "commit": {
          "hash": "140d375e795f26b6176d606030f7bcaa611858f2",
          "msg": "[Pulsar-Flink] Refactor Flink Batch Sink Examples",
          "file": "BasePulsarOutputFormat.java",
          "lang": "java",
          "diff": [
            " - protected static String serviceUrl;",
            " - protected static String topicName;",
            " + protected final String serviceUrl;",
            " + protected final String topicName;",
            " + protected SerializationSchema<T> serializationSchema;",
            " ",
            " - protected BasePulsarOutputFormat(String serviceUrl, String topicName) {",
            " + protected BasePulsarOutputFormat(final String serviceUrl, final String topicName) {",
            " Preconditions.checkArgument(StringUtils.isNotBlank(serviceUrl), \"serviceUrl cannot be blank.\");",
            " Preconditions.checkArgument(StringUtils.isNotBlank(topicName),  \"topicName cannot be blank.\");",
            " ",
            " this.serviceUrl = serviceUrl;",
            " this.topicName = topicName;"
          ]
        }
      },
      {
        "td_type": "Defect Debt",
        "td_issue": "Exceptions should be either logged or rethrown but not both",
        "commit": {
          "hash": "182ac654f2bf16e5a7602ebf1431d71d8066bbb4",
          "msg": "[Pulsar-Flink] Add Batch Csv Sink Support",
          "file": "PulsarOutputFormat.java",
          "lang": "java",
          "diff": [
            " - } catch (PulsarClientException e) {",
            " - LOG.error(\"Pulsar producer can not be created.\", e);",
            " - throw e;",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "Encgu3CzmDg",
    "email": "ivank@apache.org",
    "name": "Ivan Kelly",
    "project": "Apache/Pulsar",
    "first_commit": "2017",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "06f9e2d126eba015bc9b0461014aa3b74794f546",
          "msg": "CLI for offload (#1865)",
          "file": "TestS3Offload.java",
          "lang": "java",
          "diff": [
            " - while (status.status == LongRunningProcessStatus.Status.RUNNING) {",
            " - Thread.sleep(100);",
            " - status = admin.topics().offloadStatus(topic);",
            "}"
          ]
        }
      },
      {
        "td_type": "Code Debt",
        "td_issue": "Unused assignments should be removed",
        "commit": {
          "hash": "9594553e86b35d3f5243cf3bd3519f0122c7a01c",
          "msg": "Store data block header length in index and block header (#1854)",
          "file": "DataBlockHeaderImpl.java",
          "lang": "java",
          "diff": [" - DataInputStream dis = new DataInputStream(stream);"]
        }
      },
      {
        "td_type": "Documentation Debt",
        "td_issue": "Track uses of  \"FIXME\" tags",
        "commit": {
          "hash": "79b0e28d15e1e8c3fcdb4b29aee0956a3a31ebc8",
          "msg": "Store offloaded data object size in index (#1810)",
          "file": "S3BackedReadHandleImpl.java",
          "lang": "java",
          "diff": [
            " - ObjectMetadata dataMetadata = s3client.getObjectMetadata(bucket, key); // FIXME: this should be part of index",
            " S3BackedInputStream inputStream = new S3BackedInputStreamImpl(s3client, bucket, key,",
            " - dataMetadata.getContentLength(),",
            " + index.getDataObjectLength(),",
            " readBufferSize);",
            " return new S3BackedReadHandleImpl(ledgerId, index, inputStream, executor);",
            " }"
          ]
        }
      }
    ]
  },
  {
    "code": "AmV3K-u8EMY",
    "email": "mmerli@apache.org",
    "name": "Matteo Merli",
    "project": "Apache/Pulsar",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Design Debt",
        "td_issue": "Source files should not have any duplicated blocks",
        "commit": {
          "hash": "4a85bb79f3791481920b41ed2d2599dbd559d3a1",
          "msg": "After #3228, removed usages of deprecated client API (#3272)",
          "file": "ProducerConfiguration.java",
          "lang": "java",
          "diff": [
            " - @Deprecated",
            " - public MessageRouter getMessageRouter(int numPartitions) {",
            " - return conf.getCustomMessageRouter();",
            " - }",
            " - public MessageRouter getMessageRouter() {",
            " - return conf.getCustomMessageRouter();",
            " - }"
          ]
        }
      }
    ]
  },
  {
    "code": "37LBibts-sQ",
    "email": "rdhabalia@apache.org",
    "name": "Rajan Dhabalia",
    "project": "Apache/Pulsar",
    "first_commit": "2016",
    "cqs": [
      {
        "td_type": "Defect Debt",
        "td_issue": "Generic exceptions should never be thrown",
        "commit": {
          "hash": "828af53b202da06ab8a36f9c4ff5c3765eeb9657",
          "msg": "Gracefully shutdown function worker service (#2635)",
          "file": "Worker.java",
          "lang": "java",
          "diff": [" - protected void doStartImpl() throws Exception {"]
        }
      }
    ]
  },
  {
    "code": "sTPqsxY8WvI",
    "email": "zhaijia@apache.org",
    "name": "Jia Zhai",
    "project": "Apache/Pulsar",
    "first_commit": "2019",
    "cqs": [
      {
        "td_type": "Test Debt",
        "td_issue": "Thread.sleep should not be used in tests",
        "commit": {
          "hash": "dd4e59ff419f1998d7d198eb9216f427f0ea766e",
          "msg": "revert #2590 (#3110)",
          "file": "UnAcknowledgedMessagesTimeoutTest.java",
          "lang": "java",
          "diff": [" - Thread.sleep((int) (ackTimeOutMillis * 1.1));"]
        }
      }
    ]
  }
]
