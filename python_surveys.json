{
  "code": "",
  "email": "aarushiibisht@gmail.com",
  "name": "Aarushi Bisht",
  "project": "Apache/Airavata-custos",
  "first_commit": "2019",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "bbda71e571d3b98f4bd02f0871a1504a19a37051",
        "msg": "addressing review comments",
        "file": "keycloak_connectors.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self, username, email, first_name, last_name):",
        	" - self.username = username",
        	" - self.email = email",
        	" - self.first_name = first_name",
        	" - self.last_name = last_name"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable 'CustomThriftClient'",
      "commit": {
        "hash": "09977165fe06d2de81fa471660914e6fe7d9f4ee",
        "msg": "added documentation for custos python SDK",
        "file": "utils.py",
        "lang": "Python",
        "diff": [
        	" - class IAMAdminServiceThriftClient(MultiplexThriftClientMixin,",
                " -                   CustomThriftClient):"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Functions, methods and lambdas should not have too many parameters",
      "commit": {
        "hash": "09977165fe06d2de81fa471660914e6fe7d9f4ee",
        "msg": "added documentation for custos python SDK",
        "file": "client_credentials.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self, client_id, client_secret, verify_ssl=False, authorization_code_url=None, state=None, redirect_uri=None, username=None, password=None, refresh_token=None):",
    	" + def __init__(self, client_id, client_secret):"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "arthur.wiedmer@gmail.com",
  "name": "Arthur Wiedmer",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Instance of 'KeyError' has no 'message' member",
      "commit": {
        "hash": "6ed681f62a1b14993c6ce51cb489840e28a5a9c1",
        "msg": "Fixing the auth mechanism to be able to use the default boto infra",
        "file": "S3_hook.py",
        "lang": "Python",
        "diff": [
        	" - except KeyError as e: ",
            	" - raise AirflowException(\"S3 connection definition needs to include\"",
                " - \" {p} in extra\".format(p=e.message))"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Add a docstring to this function",
      "commit": {
        "hash": "53e350f13727793d7add22913d0040f5f4ef5735",
        "msg": "[closest_ds macro] linting. Following flake8 recs + changing return type of helper function",
        "file": "hive.py",
        "lang": "Python",
        "diff": [
        	" - def closest_date(target_ds, ds_list, before_target = None): "
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "bolke@xs4all.nl",
  "name": "Bolke de Bruin",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Module 'airflow.configuration' has no 'set' member; maybe 'get'?",
      "commit": {
        "hash": "7cb407023021d79a4758cc1a34cb972cdf5d4e43",
        "msg": "Make sure to use .conf when setting items for now.",
        "file": "core.py",
        "lang": "Python",
        "diff": [
        	" - configuration.set(\"webserver\", \"authenticate\", \"False\")",
        	" + configuration.conf.set(\"webserver\", \"authenticate\", \"False\")"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Add a docstring to this function",
      "commit": {
        "hash": "6c8f449b7321d3f6405e1c2615c0e351b7ddeafa",
        "msg": "Improve documentation",
        "file": "ssh_hook.py",
        "lang": "Python",
        "diff": [
        	"     def check_output(self, cmd):",
        	" + \"\"\"",
        	" + Executes a remote command and returns the stdout a remote process.",
        	" + Simplified version of Popen when you only want the output as a string and detect any errors.",
        	" + :param cmd: command to remotely execute",
        	" + :return: stdout",
        	" + \"\"\"",
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "1a66df4119cce2ef1cf13680d29b8e766471716a",
        "msg": "Add ldap travis tests",
        "file": "core.py",
        "lang": "Python",
        "diff": [
        	"  #response = self.login('user1', 'userx')",
        	"  #print(response.data)",
        	"  #assert 'Incorrect login details' in response.data"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "gtoonstra@gmail.com",
  "name": "gtoonstra",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Missing parentheses in call to 'print'. Did you mean print(print subdir)?",
      "commit": {
        "hash": "025cafedcdf14ff09c99ae5466e38dd3ba429eed",
        "msg": "Merge branch 'master'",
        "file": "cli.py",
        "lang": "Python",
        "diff": [
        	" + print subdir",
        	" + print dagbag.dags"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jan.omar@wooga.net",
  "name": "Jan Omar",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "ebe15bdf1866893c0920404e88824182700ceca0",
        "msg": "remove unnecessary overrides",
        "file": "jdbc_hook.py",
        "lang": "Python",
        "diff": [
        	" - #self.db = conn.schema",
       	" - #self.port = conn.port"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jlowin@apache.org",
  "name": "Jeremiah Lowin",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "a76cd65a418946485f4511d0548ce988a3fa5480",
        "msg": "split out get_one/get_many",
        "file": "models.py",
        "lang": "Python",
        "diff": [
        	" - def pull_fn(t_ids):",
            	" - return XCom.get("
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Functions should not contain too many return statements",
      "commit": {
        "hash": "fc87cab8ce4b3ae5325df71d01c26740f31701b7",
        "msg": "Merge remote-tracking branch 'airbnb/master' into py3-encryption-2",
        "file": "models.py",
        "lang": "Python",
        "diff": [
        	" - def __cmp__(self, other):",
        	" - blacklist = {'_sa_instance_state', 'end_date', 'last_pickled', 'tasks'}",
        	" - for k in set(self.__dict__) - blacklist:",
            	" - if self.__dict__[k] != other.__dict__[k]:",
                " - return -1",
	" - if len(self.tasks) != len(other.tasks):",
            	" - return -1",
        	" - i = 0",
        	" - for task in self.tasks:",
            	" - if task != other.tasks[i]:",
                " - return -1",
            	" - i += 1",
        	" - logging.info(\"Same as before\")",
        	" - return 0"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "krishnavarma@gmail.com",
  "name": "krishnabhupatiraju",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "f9308f1e7440ec716476c643906de9305e605394",
        "msg": "changed suggested by Max. Removed the transform_executor arg. Expecting an executable",
        "file": "s3_file_transform_operator.py",
        "lang": "Python",
        "diff": [
        	" - transform_script_process = subprocess.Popen([self.transform_executor, self.transform_script, f_source.name, f_dest.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            	" + transform_script_process = subprocess.Popen([self.transform_script, f_source.name, f_dest.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "mail@lilithwittmann.de",
  "name": "Lilith Wittmann",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Syntax error",
      "commit": {
        "hash": "c8ce042ea6d5e3ee5ae7d17a983b218c7e0b4ba5",
        "msg": "fixed typo",
        "file": "utils.py",
        "lang": "Python",
        "diff": [
        	" - numpy.complex_, numpy.complex64, numpy.complex128,:",
         	" + numpy.complex_, numpy.complex64, numpy.complex128]:"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "maximebeauchemin@gmail.com",
  "name": "Maxime Beauchemin",
  "project": "Apache/Airflow",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "No name 'DatabaseConnection' in module 'airflow.models'",
      "commit": {
        "hash": "0877214346b0e09e1d28ce50a063ad9711d87e55",
        "msg": "Fixing merge disapearance in samba PR",
        "file": "samba_hook.py",
        "lang": "Python",
        "diff": [
        	" - from airflow.models import DatabaseConnection",
	" + from airflow.models import Connection"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Add a docstring to this class.",
      "commit": {
        "hash": "e52923afb92c4b1f9421e3cd339c42e91e9272ef",
        "msg": "Refreshing DAG definition of the master scheduler every N runs",
        "file": "jobs.py",
        "lang": "Python",
        "diff": [
	" class MasterJob(BaseJob):",
    	" \"\"\"",
    	" + This MasterJob runs indifinetly and constantly schedules the job that",
    	" + are ready to run. It figures out the latest runs for each task",
    	" + and see if the dependencies for the next schedules are met. If",
    	" + so it triggers the task instance. It does this for each",
    	" + task in each DAG and repeats.",
    	" + :param dag_id: to run the scheduler for a single specific DAG",
    	" + :type dag_id: string",
    	" + :param subdir: to search for DAG under a certain folder only",
    	" + :type subdir: string",
    	" + :param test_mode: used for unit testing this class only, runs a single",
        	" + schedule run",
   	" + :type test_mode: bool",
   	" + :param refresh_dags_every: force refresh the DAG definition every N",
       	" + runs, as specified here",
    	" + :type refresh_dags_every: int",
    	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Remove this \"\\", add another \"\\" to escape it, or make this a raw string.",
      "commit": {
        "hash": "5bef4e56c1a5d98518e67ad4d4a91a6af41da01d",
        "msg": "New ascii logo",
        "file": "settings.py",
        "lang": "Python",
        "diff": [
	" HEADER = \"\"\"\ ",
       	" - .__         _____.__",
	" - _____  |__|_______/ ____\  |   ______  _  __",
	" - \__  \ |  \_  __ \   __\|  |  /  _ \ \/ \/ /",
 	" - / __ \|  ||  | \/|  |  |  |_(  <_> )     /",
	" - (____  /__||__|   |__|  |____/\____/ \/\_/",
     	" - \/\"\"\"",
  	" + ____________       _____________",
 	" + ____    |__( )_________  __/__  /________      __",
	" + ____  /| |_  /__  ___/_  /_ __  /_  __ \_ | /| / /",
	" +  __  ___ |  / _  /   _  __/ _  / / /_/ /_ |/ |/ /",
 	" + _/_/  |_/_/  /_/    /_/    /_/  \____/____/|__/\"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "kerzhner@yahoo-inc.com",
  "name": "Mike Kerzhner",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Method should have \"self\" as first argument",
      "commit": {
        "hash": "9aae54dec605fdbbf826709c622801d8a6ae7e8a",
        "msg": "Passing self to setAutocommit",
        "file": "postgres_operator.py",
        "lang": "Python",
        "diff": [
        	" - def setAutocommit(autocommit):",
    	" + def setAutocommit(self, autocommit):"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Source files should not have any duplicated blocks",
      "commit": {
        "hash": "ec2fc4b3e60732b2e193e1ff1aa49a5a7ecd62fb",
        "msg": "Postgres operator unit tests",
        "file": "postgres_hook.py ",
        "lang": "Python",
        "diff": [
    	" - def setAutocommit(self, autocommit):",
        	" - self.autocommit = autocommit "
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "plt@rdif.me",
  "name": "Patrick Leo Tardif",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "342fbc72a22c111656b579971668ca6b0f259526",
        "msg": "action logging adds request JSON and uses func name",
        "file": "utils.py",
        "lang": "Python",
        "diff": [
        	" - def action_logging(action):"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "patrick_tardif@unassigned0391.local",
  "name": "Patrick Tardif",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "177afe7b135edec64c2f0cf0aa06637d85836284",
        "msg": "use exceptions intead of returning tuple",
        "file": "hive_hooks.py",
        "lang": "Python",
        "diff": [
        	" if sp.returncode:",
                " - if not test:",
                " - raise AirflowException(all_err)",
                " - else:",
                " - return (False, stdout)",
                " + raise AirflowException(stdout)",
                " + return stdout",
                " - if not test:",
                " - return stdout",
                " - else:",
                " - return (True, stdout)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "neovintage@gmail.com",
  "name": "Rimas Silkaitis",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Design Debt",
      "td_issue": "An attribute defined in airflow.models line 328 hides this method",
      "commit": {
        "hash": "7fa98d5a3113b2690e7eeacb2697e40650df8e59",
        "msg": "clean up the old cruft",
        "file": "models.py",
        "lang": "Python",
        "diff": [
        	" - self.host = host"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "method already defined line 357",
      "commit": {
        "hash": "7fa98d5a3113b2690e7eeacb2697e40650df8e59",
        "msg": "clean up the old cruft",
        "file": "models.py",
        "lang": "Python",
        "diff": [
        	" - @password.setter",
    	" - def password(self, val):",
        	" - self._password = val"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "sray@handybook.com",
  "name": "Silas Ray",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Replace print statement by built-in function.",
      "commit": {
        "hash": "9811010434d93bcec25d5473b8a796a4d929613c",
        "msg": "Removing debug print.",
        "file": "views.py",
        "lang": "Python",
        "diff": [
        	" - print ex"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Add a docstring to this function.",
      "commit": {
        "hash": "76e99fd9b2b799e5fc4659b9880d620158ca9ab8",
        "msg": "Merge branch 'master' into change-ti-status",
        "file": "utils.py",
        "lang": "Python",
        "diff": [
        	" def wrapper(*args, **kwargs):",
        	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "svend.vanderveken@gmail.com",
  "name": "Svend Vanderveken",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Add a docstring to this function.",
      "commit": {
        "hash": "95eacc45ba5befe33db044c169b956c169461df4",
        "msg": "adapts name and behaviour of WithLogger",
        "file": "settings.py",
        "lang": "Python",
        "diff": [
        	" - def log_to_stdout():",
	" - root_logger = logging.getLogger()"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "invalid syntax (<string>, line 421)",
      "commit": {
        "hash": "30aa2ca4cbc8b337c4e2dba10915abc5ff2ea474",
        "msg": "fix merge issue",
        "file": "core.py",
        "lang": "Python",
        "diff": [
        	" - >>>>>>> 17aed4c... fixed Variable json deserialization"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "thekit@gmail.com",
  "name": "thibault ketterer",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "ece4c787d29673347b8e7cbb238d3ec83bd7f4a7",
        "msg": "conflict one bytestring fix",
        "file": "core.py",
        "lang": "Python",
        "diff": [
        	" + HELLO_SERVER_CMD = \"\"\"",
	" + import socket, sys",
	" + listener = socket.socket()",
	" + listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)",
	" + listener.bind(('localhost', 2134))",
	" + listener.listen(1)",
	" +sys.stdout.write('ready')",
 	" + sys.stdout.flush()",
	" + conn = listener.accept()[0]",
	" + conn.sendall(b'hello')",
	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ekinci.yasir@gmail.com",
  "name": "yoziru-desu",
  "project": "Apache/Airflow",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable 'datetime'",
      "commit": {
        "hash": "a4f067b04b55bb4d3ba71896f2f23589f8501d79",
        "msg": "Update oracle_hook.py",
        "file": "oracle_hook.py",
        "lang": "Python",
        "diff": [
        	" + from datetime import datetime"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "a4f067b04b55bb4d3ba71896f2f23589f8501d79",
        "msg": "Update oracle_hook.py",
        "file": "oracle_hook.py",
        "lang": "Python",
        "diff": [
        	" def get_conn(self):",
        	" \"\"\"",
        	" Returns a oracle connection object",
        	" + Optional parameters for using a custom DSN connection (instead of using a server alias from tnsnames.ora)",
        	" + The dsn (data source name) is the TNS entry (from the Oracle names server or tnsnames.ora file) ",
        	" + or is a string like the one returned from makedsn().",
        	" + :param dsn: the host address for the Oracle server",
        	" + :param service_name: the db_unique_name of the database that you are connecting to (CONNECT_DATA part of TNS)",
        	" + You can set these parameters in the extra fields of your connection ",
        	" + as in ``{ \"dsn\":\"some.host.address\" , \"service_name\":\"some.service.name\" }``",
        	" \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": " averprauskus@geek.net",
  "name": "Andy Verprauskus",
  "project": "Apache/Allura",
  "first_commit": "2010",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "5b66f72f560dce96f4d792371c34924aedd03209",
        "msg": "remove print statement from tests",
        "file": "test_tags.py",
        "lang": "Python",
        "diff": [
        	" - import sys; print >> sys.stderr, config"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "gbernhardt@geek.net",
  "name": "Gary Bernhardt",
  "project": "Apache/Allura",
  "first_commit": "2010",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "334627eecd13bf85e0cd9717f7fdd4df9060fb20",
        "msg": "Add test for tracker index action",
        "file": "test_controller.py",
        "lang": "Python",
        "diff": [
        	" - class TestWhenSearchingWithCustomFields(TestRootController):",
    	" - def setUp(self):",
        	" - super(TestRootController, self).setUp()"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": " jsteele@geek.net",
  "name": "Jenny Steele",
  "project": "Apache/Allura",
  "first_commit": "2010",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Statements should be on separate lines",
      "commit": {
        "hash": "fa6c7892f2201627378c56912be96d3a39868b69",
        "msg": "[#81] Added validation for edit ticket widget",
        "file": "tracker_main.py",
        "lang": "Python",
        "diff": [
        	" - if cf.type != 'boolean' or 'custom_fields.'+cf.name in post_data:",
           	" + if 'custom_fields.'+cf.name in post_data:"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "a248b148c4c2679033868f3e700d52760f9f7354",
        "msg": "[#23] Improved icon handling for wiki and tracker attachments",
        "file": "admin_main.py",
        "lang": "Python",
        "diff": [
        	" - if image.size[0] < image.size[1]:",
                " - h_offset = (image.size[1]-image.size[0])/2",
                " - image = image.crop((0, h_offset, image.size[0], image.size[0]+h_offset))",
            	" - elif image.size[0] > image.size[1]:",
               	" - w_offset = (image.size[0]-image.size[1])/2",
                " - image = image.crop((w_offset, 0, image.size[1]+w_offset, image.size[1]))",
            	" + image = square_image(image)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jbeard@geek.net",
  "name": "Jonathan T. Beard",
  "project": "Apache/Allura",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "7306bd953e37e9c944601d87af52128ebbbe5220",
        "msg": "[#154] Removed awards from project admin",
        "file": "admin_main.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self):",
        	" - self.awards = AdminAwardsController(c.project)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "mark@geek.net",
  "name": "Mark Ramm",
  "project": "Apache/Allura",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "c91f73faa1ea5a29a2d146c10e060a6e803f4d53",
        "msg": "More comments on HelloForge",
        "file": "wiki.py",
        "lang": "Python",
        "diff": [
        	" class Comment(Message):",
    	" + \"\"\"Comment class, threaded, persisted in mongo on a per-page basis\"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "cf26ac8a1dc1ad8e53933aa96e6a257cb1b72a65",
        "msg": "Theoretically working functional test for pyforge -- model stuff not 100% right yet though",
        "file": "test_root.py",
        "lang": "Python",
        "diff": [
        	" - #links = response.html.findAll('a')",
        	" - #print links",
        	" - #assert_true(links, \"Mummy, there are no links here!\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "mischenko@geek.net",
  "name": "Max Ischenko",
  "project": "Apache/Allura",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "6f88abf06cede62f9b115d8cda92366c6d116293",
        "msg": "added ForgeDiscussion setup command",
        "file": "bootstrap.py",
        "lang": "Python",
        "diff": [
        	" - # p0.install_app('Discussion', 'discussion')"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "rick@arborian.com",
  "name": "Rick Copeland",
  "project": "Apache/Allura",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "ccf63e49fbc51be1d2c6a9ce5febe04340d600f1",
        "msg": "[#117] - Some performance tweaks to migrations and refactorings",
        "file": "graph.py",
        "lang": "Python",
        "diff": [
        	" -  def transitions(self, state_index):",
    	" + def transitions(self):",
       	" + '''Returns all node->node transitions made possible by this migratestep'''"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Access of nonexistent member",
      "commit": {
        "hash": "857985c3a951b536c32ad70f4745b143c14dd751",
        "msg": "Adding some tests, refactoring to the model",
        "file": "git_repo.py",
        "lang": "Python",
        "diff": [
        	" - def iter_commits(self, *args, **kwargs):",
    	" + def log(self, *args, **kwargs):"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Access of nonexistent member",
      "commit": {
        "hash": "af302633995b5804604a9960a750bf31da731df2",
        "msg": "FORGE-317 - Refactor forums/discussion",
        "file": "wiki_main.py",
        "lang": "Python",
        "diff": [
        	" - permissions = [ 'configure', 'read', 'create', 'edit', 'delete', 'comment', 'edit_page_permissions' ]",
    	" + permissions = [ 'configure', 'read', 'create', 'edit', 'delete', 'edit_page_permissions',",
                " + 'unmoderated_post', 'post', 'moderate', 'admin']"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "wolf@geek.net",
  "name": "Wolf",
  "project": "Apache/Allura",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "83d63a7af195af33a89eb2a92fb53341d87d5936",
        "msg": "add docstrings for gravatar functions",
        "file": "gravatar.py",
        "lang": "Python",
        "diff": [
        	" def id(email):",
    	" + \"\"\"Turn an email address into a Gravatar id as per <http://gravatar.com/site/implement/url>",
    	" + The supplied email address must be of the form 'Wolf@example.com',",
    	" + or else 'Wolf <wolf@example.com>'",
    	" + The result may be saved for use in later calls to gravatar.url().",
    	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "adc0869944c337f2a8ac1fe6efcbf27281c860fb",
        "msg": "FORGE-245: use app config id rather than project id in artifact queries",
        "file": "tracker_main.py",
        "lang": "Python",
        "diff": [
        	" - project_id = {'project_id':c.project._id}",
        	" - # mapper(model.Ticket).remove(project_id)",
        	" - # mapper(model.Comment).remove(project_id)",
        	" - # mapper(model.Attachment).remove(project_id)",
        	" - # mapper(model.Globals).remove(project_id)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "astaric@apache.org",
  "name": "astaric",
  "project": "Apache/Bloodhound",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Rename function \"ConnectionPool_get_cnx\" to match the regular expression ^[a-z_][a-z0-9_]{2,}$.",
      "commit": {
        "hash": "f8b5a32e7f550adf723cd08b7b60279f0269dd3f",
        "msg": "Moved env creation in ProductWikiTestCase from __init__ to setUp.",
        "file": "env.py",
        "lang": "Python",
        "diff": [
        	" - def ConnectionPool_get_cnx(self, timeout=None):",
    	" - if not hasattr(self, '_backend'):",
       	" - self._backend = ConnectionPoolBackend(1)",
    	" - return self._backend.get_cnx(self._connector, self._kwargs, timeout)",
	" - ConnectionPool.get_cnx = ConnectionPool_get_cnx"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "f8b5a32e7f550adf723cd08b7b60279f0269dd3f",
        "msg": "Moved env creation in ProductWikiTestCase from __init__ to setUp.",
        "file": "env.py",
        "lang": "Python",
        "diff": [
        	" - def ConnectionPool_get_cnx(self, timeout=None):",
    	" - if not hasattr(self, '_backend'):",
       	" - self._backend = ConnectionPoolBackend(1)",
    	" - return self._backend.get_cnx(self._connector, self._kwargs, timeout)",
	" - ConnectionPool.get_cnx = ConnectionPool_get_cnx"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "andrej@apache.org",
  "name": "Andrej Golcov",
  "project": "Apache/Bloodhound",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Methods and field names should not differ only by capitalization",
      "commit": {
        "hash": "a350aa47a0acdc39a4a720dbb613c343bfdd4842",
        "msg": "#361 - add basic support for grid view for Bloodhound Search",
        "file": "web_ui.py",
        "lang": "Python",
        "diff": [
        	" - self.query = req.args.getfirst(self.QUERY)",
        	" - if self.query is None:",
        	" + self.original_query = req.args.getfirst(self.QUERY)",
        	" + if self.original_query is None:"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "f8b5a32e7f550adf723cd08b7b60279f0269dd3f",
        "msg": "Moved env creation in ProductWikiTestCase from __init__ to setUp.",
        "file": "env.py",
        "lang": "Python",
        "diff": [
        	" - def ConnectionPool_get_cnx(self, timeout=None):",
    	" - if not hasattr(self, '_backend'):",
       	" - self._backend = ConnectionPoolBackend(1)",
    	" - return self._backend.get_cnx(self._connector, self._kwargs, timeout)",
	" - ConnectionPool.get_cnx = ConnectionPool_get_cnx"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "dammina@apache.org",
  "name": "Dammina",
  "project": "Apache/Bloodhound",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Replace print statement by built-in function.",
      "commit": {
        "hash": "700f1716740ff07082f98cc09b41b37f1f53f6ba",
        "msg": "Sync the bep_0011_batch_create_tickets branch with ^/trunk.",
        "file": "bloodhound_setup.py",
        "lang": "Python",
        "diff": [
        	" - print \"Running wiki upgrades\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "9d4230b3efdd9ab9afd6c6f5f0bcb5dd16604a75",
        "msg": "User interaction capability added to the component",
        "file": "theme.py",
        "lang": "Python",
        "diff": [
        	" - if header == \"summary\":",
                " - td_row = tag.td()",
                " - input_summary = tag.input(type=\"text\", id = \"field-summary\"+str(num), class_=\"input-block-level\", name=\"field_summary\"+str(num))",
                " - td_row.append(input_summary)",
                " - tr_rows.append(td_row)",
                " - elif header == \"description\":",
                " - td_row = tag.td()",
                " - input_description = tag.textarea(id = \"field-description\"+str(num), name=\"field_description\"+str(num), class_=\"input-block-level\", rows=\"1\", cols=\"28\")",
                " - td_row.append(input_description)",
                " - tr_rows.append(td_row)"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "700f1716740ff07082f98cc09b41b37f1f53f6ba",
        "msg": "Sync the bep_0011_batch_create_tickets branch with ^/trunk.",
        "file": "hooks.py",
        "lang": "Python",
        "diff": [
        	" - def _get_hook_class(env_path, hook_path, class_type):",
    	" - module = _hook_load(env_path, hook_path)",
    	" - for (name, cls) in inspect.getmembers(module, inspect.isclass):",
        	" - if issubclass(cls, class_type) and \",
           	" - not cls is class_type:",
            	" - return cls",
    	" - return None"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "gjm@apache.org",
  "name": "Gary Martin",
  "project": "Apache/Bloodhound",
  "first_commit": "2012",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "ea8a0a3e181f16cd4bded2e5535599dadb17a38c",
        "msg": "multiproduct: adding missing variable definitions - towards #105",
        "file": "api.py",
        "lang": "Python",
        "diff": [
        	" + DB_VERSION = 1",
	" + DB_SYSTEM_KEY = 'bloodhound_multi_product_version'",
	" + PLUGIN_NAME = 'Bloodhound multi product'"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "fc80b0d35db98089bd940a5968a3c13b3d7166c7",
        "msg": "merging trac-1.0 into trunk/trac - towards #159",
        "file": "attachment.py",
        "lang": "Python",
        "diff": [
        	" - def _get_hashed_filename(self, filename):",
    	" + @classmethod",
    	" + def _get_hashed_filename(cls, filename):",
        	" + \"\"\"Get the hashed filename corresponding to the given filename.",
	" +",
	" + WARNING: This method is used by db28.py for moving attachments from",
        	" + the old \"attachments\" directory to the \"files\" directory. Please check",
        	" + all changes so that they don't break the upgrade.",
        	" \"\"\""
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "db5c13d6a9695d252ad938d3dbc8f7a72ab388ab",
        "msg": "merging trac-0.13dev_11046 into trunk",
        "file": "notification.py",
        "lang": "Python",
        "diff": [
        	" - if not notify_updater:",
                " - filter_out = True",
                " - if notify_reporter and (updater == self.reporter):",
                " - filter_out = False",
                " - if notify_owner and (updater == self.owner):",
                " - filter_out = False",
                " - if filter_out:",
                " - torecipients = [r for r in torecipients", 
                " - if r and r != updater]",
            	" - elif updater:",
                " - torecipients.append(updater)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "rjollos@apache.org",
  "name": "Ryan Ollos",
  "project": "Apache/Bloodhound",
  "first_commit": "2012",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "invalid syntax",
      "commit": {
        "hash": "3e3355754111cb89f553ff0e8439641c6b8a60ae",
        "msg": "0.8dev: Removed debug statements.",
        "file": "hooks.py",
        "lang": "Python",
        "diff": [
        	" - print load_class(env.config.get('trac', 'environment_factory'))"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "945b9cc43394a53c7de0a661062113af6be5784f",
        "msg": "merging trac-1.0 into trunk/trac - towards #159",
        "file": "ticket_search.py",
        "lang": "Python",
        "diff": [
        	" + #!/usr/bin/env python"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "alan@alanb.ca",
  "name": "Alan Boudreault",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "f3ea201440931452e512bf823d283ddfe27b1166",
        "msg": "Merge pull request #253 from riptano/cassandra-9171.Add paging tests for Cassandra 9171",
        "file": "paging_test.py",
        "lang": "Python",
        "diff": [
        	" - create_rows(data, cursor, 'paging_test', cl=CL.ALL, format_funcs={'id': int, 'mytext': random_txt})"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "b308026d21c9845d3727f6782f205af81fd265c8",
        "msg": "CASSANDRA-9409: Add tests to ensure keyspace isolation for UDA, UDF and UDT",
        "file": "user_types_test.py",
        "lang": "Python",
        "diff": [
        	" + @since('2.2')",
    	" + def test_user_type_isolation(self):",
        	" + \"\"\"",
        	" + Ensure UDT cannot be used from another keyspace",
        	" + @jira_ticket CASSANDRA-9409",
        	" + @since 2.2",
        	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Test Debt",
      "td_issue": "Lines should have sufficient coverage by tests",
      "commit": {
        "hash": "b308026d21c9845d3727f6782f205af81fd265c8",
        "msg": "CASSANDRA-9409: Add tests to ensure keyspace isolation for UDA, UDF and UDT",
        "file": "user_types_test.py",
        "lang": "Python",
        "diff": [
        	" + assert_invalid(",
            	" + session,",
            	" + \"create aggregate suma (frozen<ks.udt>) sfunc plus stype int finalfunc stri initcond 10\",",
            	" + \"Statement on keyspace user_ks cannot refer to a user type in keyspace ks\"",
       	" + )"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "aleksey@apple.com",
  "name": "Aleksey Yeschenko",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2012",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "cd4d6ebd94377482f3319c7c9bf2f850b4e57265",
        "msg": "Fix user_types_test.TestUserTypes.test_type_keyspace_permission_isolation",
        "file": "user_types_test.py",
        "lang": "Python",
        "diff": [
        	" - self.assertNoTypes(cursor)",
        	" + self.assertNoTypes(superuser_cursor)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "andrew.hust@gmail.com",
  "name": "Andrew Hust",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "27b19c9e58ed8000d245b14b8fde88f9f949fe32",
        "msg": "Conflicts: upgrade_through_versions_test.py",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" + def handle_sigterm(signum, frame):",
        	" + # need to close queue gracefully if possible, or the data_checker process",
        	" + # can't seem to empty the queue and test failures result.",
        	" + verification_done_queue.close()",
        	" + exit(0)"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "27b19c9e58ed8000d245b14b8fde88f9f949fe32",
        "msg": "Conflicts: upgrade_through_versions_test.py",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - for tag in self.test_versions[1:]:",
            	" - if mixed_version:",
                " - for num, node in enumerate(self.cluster.nodelist()):",
                " - # do a write and check for each new node as upgraded",
                " - self._write_values()",
                " - self._increment_counters()"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "27b19c9e58ed8000d245b14b8fde88f9f949fe32",
        "msg": "Conflicts: upgrade_through_versions_test.py",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - \"\"\"Takes a tuple like (1,2) and formats that version specifier as something like 'cassandra-1.2' to match the branch naming convention\"\"\"",
    	" + \"\"\"",
    	" + Takes a tuple like (1,2) and formats that version specifier as something",
    	" + like 'cassandra-1.2' to match the branch naming convention",
    	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "brandonwilliams@apache.org",
  "name": "Brandon Williams",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2011",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "07c1921b5af00d503ee62367c62beefb3282592f",
        "msg": "missing import",
        "file": "consistency_test.py",
        "lang": "Python",
        "diff": [
        	" - from dtest import Tester",
	" + from dtest import Tester, debug"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "3317eb0fcfb8fafead24559010d86d652000faf8",
        "msg": "Merge branch 'master' of github.com:riptano/cassandra-dtest",
        "file": "putget_test.py",
        "lang": "Python",
        "diff": [
        	" + def wide_slice_test(self):",
        	" + \"\"\" ",
        	" + Check slicing a wide row. ",
        	" + See https://issues.apache.org/jira/browse/CASSANDRA-4919",
        	" + From Sylvain about duplicating:",
        	" + Ok, so now that I think about it, you can't reproduce that with CQL currently.",
        	" + You'll have to use the thrift get_paged_slice call as it's the only way to",
        	" + trigger this.",
	" ... "
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "7286a60656d0ed04a707f1720824c05bce2926e4",
        "msg": "update balanced_tokens usage",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - cursor.execute(\"CREATE TABLE test (a int PRIMARY KEY, b int) WITH default_write_consistency = 'ALL' AND default_read_consistency = 'ALL'\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "dmeyer@datastax.com",
  "name": "Daniel Meyer",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "9544fd4dba3aaa6b2ba8e7b8b91de96274cd7e86",
        "msg": "minor change",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - print line"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jim.witschey@gmail.com",
  "name": "Jim Witschey",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "d20277050fc4bb1a609d3fb1d93e1a5da2b2372b",
        "msg": "Merge pull request #322 from mambocab/create_cf-compact-storage. adds compact storage option to create_cf",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def create_cf(self, session, name, key_type=\"varchar\", speculative_retry=None, read_repair=None, compression=None, gc_grace=None, columns=None, validation=\"UTF8Type\"):",
    	" + def create_cf(self, session, name, key_type=\"varchar\", speculative_retry=None, read_repair=None, compression=None,",
                " + gc_grace=None, columns=None, validation=\"UTF8Type\", compact_storage=False):"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "b913abb5fb50798f62c002d68a1fde7520a2eafd",
        "msg": "isort on cqlsh_tests",
        "file": "cqlsh_tests.py ",
        "lang": "Python",
        "diff": [
        	" + @require(9119)",
    	" + def simple_rebuild_test(self):",
        	" + \"\"\"",
        	" + @jira_ticket 9119"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "b913abb5fb50798f62c002d68a1fde7520a2eafd",
        "msg": "isort on cqlsh_tests",
        "file": "cqlsh_tests.py ",
        "lang": "Python",
        "diff": [
        	" + from tools import create_c1c2_table, insert_c1c2, require, rows_to_list, since"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "kishan@karu.io",
  "name": "Kishan Karunaratne",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "2b79484e8076d5ed96897c9d49c6b7e86b0fd8c2",
        "msg": "working Json export/import",
        "file": "json_tools_test.py",
        "lang": "Python",
        "diff": [
        	" - debug(\"Creating JSON file...\")",
        	" - # file = open(\"schema.json\", \"w\")",
        	" - # file.write(node1.run_sstable2json())",
        	" - # print >> file, node1.run_sstable2json()"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "michael@pbandjelly.org",
  "name": "Michael Shuler",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "a4b922eb468d6f61d9fb4900365179926184fed0",
        "msg": "Add import of tools for require",
        "file": "auth_test.py",
        "lang": "Python",
        "diff": [
        	" + from tools import *"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "pauloricardomg@gmail.com",
  "name": "Paulo Motta",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "d4e59b518f8bba5b3ddba0f1ec38ee5227ee8a1e",
        "msg": "fixed and optimized TestOfflineTools.sstablelevelreset_test",
        "file": "offline_tools_test.py",
        "lang": "Python",
        "diff": [
        	" - session.execute(\"ALTER TABLE keyspace1.standard1 with compaction={'class': 'LeveledCompactionStrategy', 'sstable_size_in_mb':3};\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ptnapoleon@gmail.com",
  "name": "Philip Thompson",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "db36114be7abbe1d33c86253a5e153531a7db724",
        "msg": "Fixed CL arguments. Resulted from merge error",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - assert_one(cursor, \"select durable_writes from system.schema_keyspaces where keyspace_name = 'my_test_ks';\", [True], cl='ALL')"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Functions, methods and lambdas should not have too many parameters",
      "commit": {
        "hash": "12d80150453db51295ed31ce3b37de3f1d582374",
        "msg": "Added protocol_version option to connection",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def patient_cql_connection(self, node, keyspace=None, version=None, user=None, password=None, timeout=10, compression=True):"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "pauloricardomg@gmail.com",
  "name": "Paulo Motta",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "d4e59b518f8bba5b3ddba0f1ec38ee5227ee8a1e",
        "msg": "fixed and optimized TestOfflineTools.sstablelevelreset_test",
        "file": "offline_tools_test.py",
        "lang": "Python",
        "diff": [
        	" - session.execute(\"ALTER TABLE keyspace1.standard1 with compaction={'class': 'LeveledCompactionStrategy', 'sstable_size_in_mb':3};\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ptnapoleon@gmail.com",
  "name": "Philip Thompson",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "db36114be7abbe1d33c86253a5e153531a7db724",
        "msg": "Fixed CL arguments. Resulted from merge error",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - assert_one(cursor, \"select durable_writes from system.schema_keyspaces where keyspace_name = 'my_test_ks';\", [True], cl='ALL')"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Functions, methods and lambdas should not have too many parameters",
      "commit": {
        "hash": "12d80150453db51295ed31ce3b37de3f1d582374",
        "msg": "Added protocol_version option to connection",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def patient_cql_connection(self, node, keyspace=None, version=None, user=None, password=None, timeout=10, compression=True):"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "01c12d791c9c195e75b07482d78f30b9dcdbdf6b",
        "msg": "Merge pull request #434 from pauloricardomg/fixtestofflinetools. fixed and optimized sstableofflinerevel and sstablelevelreset dtests",
        "file": "offline_tools_test.py",
        "lang": "Python",
        "diff": [
        	" - # let's make sure there was at least 3 levels (L0, L1 and L2)",
        	" + self.assertTrue(max(initial_levels) > 1)",
        	" + # let's check all sstables are on L0 after sstablelevelreset",
        	" + self.assertTrue(max(final_levels) == 0)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "snazy@snazy.de",
  "name": "Robert Stupp",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Design Debt",
      "td_issue": "Collapsible \"if\" statements should be merged",
      "commit": {
        "hash": "51e26eaa44b63f16ee8527562793a2ab46cde2bb",
        "msg": "Merge branch '9300-token-gen' of https://github.com/snazy/cassandra-dtest",
        "file": "token_generator.py",
        "lang": "Python",
        "diff": [
        	" - if randomPart:",
        	" + if randomPart is not None:",
            	" if randomPart:",
                " - args.insert(1, \"--random\")",
                " + args.append(\"--random\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "russthehatch@gmail.com",
  "name": "Russ Hatch",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "3145bd9ffc6a4b1553f5af0c090afb687c58a0fc",
        "msg": "Merge remote-tracking branch 'origin' into upgrade_test_fixup",
        "file": "concurrent_schema_changes_test.py",
        "lang": "Python",
        "diff": [
        	" - os.system('cp -p %s/data/ks_ns2/cf_ns2/snapshots/testsnapshot/* %s/data/ks_ns2/cf_ns2/' % (node1.get_path(), node1.get_path()))"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "db74dd14632458885670ce1d7f75ef09b797eabe",
        "msg": "comment fix",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - def latest_tag_matching(ver_tuple):",
    	" \"\"\"",
   	" - Returns the latest tag matching match_string*",
    	" + Returns the latest tag matching a version tuple, such as (1, 2) to represent version 1.2",
    	" \"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "feba40e643ce79d16b253aa368dacfc135b8c0d3",
        "msg": "comment fix",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - return ['git:'+v for v in END_TO_END_PATH if get_version_from_tag(v) >= '1.2']",
        	" + return ['git:'+v for v in UPGRADE_PATH if get_version_from_tag(v) >= '1.2']"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "588999d552b366e783deee43e121ce2df318d3e2",
        "msg": "change upgrade test strategy",
        "file": "upgrade_through_versions_test.py",
        "lang": "Python",
        "diff": [
        	" - release_groups = OrderedDict()",
    	" - for w in wrappers:",
        	" - if release_groups.get(w.maj_min) is None:",
            	" - release_groups[w.maj_min] = []"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ryan@enigmacurry.com",
  "name": "Ryan McGuire",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2012",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "a532900f96543187428e4be41ecbc887974cee5d",
        "msg": "Merge pull request #15 from riptano/CASS-5586",
        "file": "configuration_test.py",
        "lang": "Python",
        "diff": [
        	" - cli.do(\"create column family cf with compression_options={sstable_compression:SnappyCompressor, chunk_length_kb:32}\")"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "f2892175a0b17f5a230bb3a79b34a4a1cfc28604",
        "msg": "archive commitlog restore test",
        "file": "snapshot_test.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self, *args, **kwargs):",
        	" - Tester.__init__(self, *args, **kwargs)"
        ]
      }
    },
    {
      "td_type": "Test Debt",
      "td_issue": "Lines should have sufficient coverage by tests",
      "commit": {
        "hash": "a639934751de619698debe12533210062789a24c",
        "msg": "Fix cluster config for thrift tests",
        "file": "thrift_tests.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self, *args, **kwargs):",
        	" - kwargs['cluster_options'] = {'partitioner':", 'org.apache.cassandra.dht.ByteOrderedPartitioner'}"<
        	" - Tester.__init__(self, *args, **kwargs)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "sam@beobal.com",
  "name": "Sam Tunnicliffe",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "6002e88bcc55955c48e28cffdcbb5b9d0384b980",
        "msg": "Add test of role name case preservation",
        "file": "auth_roles_test.py",
        "lang": "Python",
        "diff": [
        	" + def role_name_test(self):",
        	" + \"\"\" Simple test to verify the behaviour of quoting when creating roles & users",
        	" + @jira_ticket CASSANDRA-10394",
        	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "shawn.kumar@datastax.com",
  "name": "Shawn Kumar",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Mixed tabs/spaces indentation",
      "commit": {
        "hash": "e5b5b473a775d22fe895e65b2ba94a5293df1969",
        "msg": "added ignoring error",
        "file": "replace_address_test.py",
        "lang": "Python",
        "diff": [
        	" -   def replace_stopped_node_test(self):",
    	" + def __init__(self, *args, **kwargs):"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "a1d7b8bba57600c845a1e5442578f5c9f45dd8f4",
        "msg": "Merge branch 'master' of github.com:riptano/cassandra-dtest",
        "file": "replace_address_test.py",
        "lang": "Python",
        "diff": [
        	" - query = SimpleStatement('select * from \"Keyspace1\".\"Standard1\" LIMIT 1', consistency_level=ConsistencyLevel.THREE)",
        	" + stress_table = 'keyspace1.standard1' if self.cluster.version() >= '2.1' else '\"Keyspace1\".\"Standard1\"'",
        	" + query = SimpleStatement('select * from %s LIMIT 1' % stress_table, consistency_level=ConsistencyLevel.THREE)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "stefania.alborghetti@datastax.com",
  "name": "Stefania Alborghetti",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "2950d59d9c46c9e566a8f1c7a634883f974ef649",
        "msg": "Merge pull request #321 from stef1927/9160. Migration of CQL tests from dtests to unit tests, CASSANDRA-9160",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - cursor.execute(\"INSERT INTO users (userid, firstname, lastname, age) VALUES (550e8400-e29b-41d4-a716-446655440000, 'Frodo', 'Baggins', 32)\")",
        	" - cursor.execute(\"UPDATE users SET firstname = 'Samwise', lastname = 'Gamgee', age = 33 WHERE userid = f47ac10b-58cc-4372-a567-0e02b2c3d479\")"
        ]
      }
    },   
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "2950d59d9c46c9e566a8f1c7a634883f974ef649",
        "msg": "Merge pull request #321 from stef1927/9160. Migration of CQL tests from dtests to unit tests, CASSANDRA-9160",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - def invalid_custom_timestamp_test(self):",
    	" + def table_test(self):",
        	" + \"\"\"",
       	" + CREATE TABLE, ALTER TABLE, TRUNCATE TABLE, DROP TABLE statements",
        	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "d0d4ae69c3527c9358d37f581322e8f295d1e4bd",
        "msg": "Rolled back partitionCache metric names and fixed error in error logging, CASSANDRA-9448",
        "file": "jmxmetrics_test.py",
        "lang": "Python",
        "diff": [
        	" -  errors.append(mbeans[attr_counter] + \" has a before value of \" + str(b_value) + \" and after value of \" + str(a_value) + \" and did not increment\" + \"\n\")",
                " + errors.append(mbean + \" has a before value of \" + str(b_value) + \" and after value of \" + str(a_value) + \" and did not increment\" + \"\n\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "lebresne@gmail.com",
  "name": "Sylvain Lebresne",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2011",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "2b51f094f80459f7b1fe94a21b0b6808a80454b8",
        "msg": "Add simple multi-dc tests (including 3539 regression)",
        "file": "putget_test.py",
        "lang": "Python",
        "diff": [
        	" - insert_c1c2(cursor, n, \"QUORUM\")",
            	" - query_c1c2(cursor, n, \"QUORUM\")",
            	" + tools.insert_c1c2(cursor, n, \"QUORUM\")",
            	" + tools.query_c1c2(cursor, n, \"QUORUM\")"
        ]
      }
    },   
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "1de0399a8f7c1dbbaa22678a2c62ebcf9a0a7aad",
        "msg": "Stuffs",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def create_cf(self, cursor, name, key_type=\"varchar\", comparator=\"UTF8Type\", validation=\"UTF8Type\", read_repair=None, compression=None, gc_grace=None, columns=None):",
    	" + def create_cf(self, cursor, name, key_type="varchar", read_repair=None, compression=None, gc_grace=None, columns=None):"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "ab701138a491f19ef287a432bd1212976556800e",
        "msg": "Merge branch 'master' of github.com:riptano/cassandra-dtest",
        "file": "sstable_generation_loading_test.py",
        "lang": "Python",
        "diff": [
        	" + @require('https://issues.apache.org/jira/browse/CASSANDRA-7013')",
    	" def sstableloader_compression_none_to_snappy_test(self):"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "tyler@datastax.com",
  "name": "Tyler Hobbs",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "d650983b1ba3b64eb222d32b676bc3fd2a34e91d",
        "msg": "Move tests to paging_test, mark as since(2.0.6)",
        "file": "cql_tests.py",
        "lang": "Python",
        "diff": [
        	" - results = list(cursor.execute(\"SELECT %s FROM test WHERE a = 99 AND b IN (3, 4, 8, 14, 15) ORDER BY b DESC\" % selector))"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "936ef6c3d7167d22f51f9e90aa1e0bff1c203adf",
        "msg": "Merge remote-tracking branch 'riptano/master' into 8099-backwards-compat",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def is_win():",
    	" - return True if sys.platform == \"cygwin\" or sys.platform == \"win32\" else False"
        ]
      }
    },
    {
      "td_type": "Test Debt",
      "td_issue": "Lines should have sufficient coverage by tests",
      "commit": {
        "hash": "d650983b1ba3b64eb222d32b676bc3fd2a34e91d",
        "msg": "Move tests to paging_test, mark as since(2.0.6)",
        "file": "paging_test.py",
        "lang": "Python",
        "diff": [
        	" + for page_size in (2, 3, 4, 5, 15, 16, 17, 100):",
            	" + cursor.default_fetch_size = page_size",
           	" + for selector in selectors:",
                " + results = list(cursor.execute(\"SELECT %s FROM test\" % selector))",
                " + self.assertEqual(16, len(results))",
                " + self.assertEqual([0] * 4 + [1] * 4 + [2] * 4 + [3] * 4, sorted([r.a for r in results]))",
                " + self.assertEqual([0, 1, 2, 3] * 4, [r.b for r in results])",
                " +self.assertEqual([0, 1, 2, 3] * 4, [r.c for r in results])",
                " + if \"s1\" in selector:",
                " + self.assertEqual([17] * 16, [r.s1 for r in results])",
                " + if \"s2\" in selector:",
                " + self.assertEqual([42] * 16, [r.s2 for r in results])"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "tahooie@gmail.com",
  "name": "Tyler Patterson",
  "project": "Apache/Cassandra-dtest",
  "first_commit": "2012",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "70b10062375bbcca259f043255331b49eaed76d9",
        "msg": "removed pycassa from super_counter_test",
        "file": "super_counter_test.py",
        "lang": "Python",
        "diff": [
        	" - val = cf.get('row_0', ['col_0'], super_column='subcol_%d'%i, read_consistency_level=consistency_level)['col_0']",
            	" + column_path = ColumnPath(column_family='cf', column='col_0', ",
                " + super_column='subcol_%d'%i)"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "88f8aafb0564b0fbbfebd4146b7176963fdda425",
        "msg": "renamed class",
        "file": "rolling_upgrade_test.py",
        "lang": "Python",
        "diff": [
        	" - super(TestUpgrade, self).__init__(*argv, **kwargs)",
       	" + super(TestRollingUpgrade, self).__init__(*argv, **kwargs)"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "936ef6c3d7167d22f51f9e90aa1e0bff1c203adf",
        "msg": "Merge remote-tracking branch 'riptano/master' into 8099-backwards-compat",
        "file": "dtest.py",
        "lang": "Python",
        "diff": [
        	" - def is_win():",
    	" - return True if sys.platform == \"cygwin\" or sys.platform == \"win32\" else False"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jpotts@apache.org",
  "name": "Jeffrey Taylor Potts",
  "project": "Apache/Chemistry-cmislib",
  "first_commit": "2010",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined name",
      "commit": {
        "hash": "e8879faab83091799a10f1c60db669ac460fc38f",
        "msg": "cmislib browser binding createDocument and createDocumentFromString now working",
        "file": "cmis_services.py",
        "lang": "Python",
        "diff": [
        	" - from exceptions import CmisException, RuntimeException, \",
	" + from cmislib.exceptions import CmisException, RuntimeException, \"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "fc4f18009805b8008ca177592e600dc445c19f2e",
        "msg": "Fixes for CMIS-229 (test path expects trailing slash), CMIS-231 (setContentStream sets mimetype incorrectly)",
        "file": "cmislibtest.py",
        "lang": "Python",
        "diff": [
        	" - searchFolder = self._repo.getObjectByPath(settings.TEST_ROOT_PATH + \"/\".join([testFolderName, parentFolderName, subFolderName]))",
        	" + searchFolder = self._repo.getObjectByPath(\"/\".join([TEST_ROOT_PATH, testFolderName, parentFolderName, subFolderName]))"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "d5a8f4709d6ba9db5e4520fd0385987e83933332",
        "msg": "Whitespace and documentation cleanup in preparation for the 0.5 release",
        "file": "model.py",
        "lang": "Python",
        "diff": [
        	" def hasObject(self, objectId):",
	" + ''' ",
        	" + Returns True if the specified objectId is found in the list of results,",
       	" + otherwise returns False.",
        	" + ''' "
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Control flow statements should not be nested too deeply",
      "commit": {
        "hash": "4e6aed1d5c7708d038057dbf477ee7bd44b182bb",
        "msg": "Resolving CMIS-481. Also began to add some logging infrastructure.",
        "file": "model.py",
        "lang": "Python",
        "diff": [
        	" - if (propType == CmisId):",
                " - propElementName = 'cmis:propertyId'",
                " - if isList:",
                " - propValueStrList = []",
                " - for val in propValue:",
                " - propValueStrList.append(val)",
                " - else:",
                " - propValueStrList = [propValue]",
            	" - elif (propType == str):",
                " - propElementName = 'cmis:propertyString'",
                " - if isList:",
                " - propValueStrList = []",
                " - for val in propValue:",
                " - propValueStrList.append(val)",
                " - else:",
                " - propValueStrList = [propValue]",
            	" - elif (propType == datetime.datetime):",
                " - propElementName = 'cmis:propertyDateTime'"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "darrenbrogan@hotmail.com",
  "name": "BroganD1993",
  "project": "Apache/Cloudstack-ec2stack",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "193adc9fab12fd56c91f4bb62dc1e538a931c592",
        "msg": "Enable ec2stack to run with profiles",
        "file": "configure.py",
        "lang": "Python",
        "diff": [
        	" def _modify_config_profile(config_file, profile):",
    	" + \"\"\"",
    	" + Modify configuration profile",
   	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "3236a68b7d8b595928d9788f5c14f842910a31e1",
        "msg": "Make DescribeItemAttribute functions use same function",
        "file": "instances.py",
        "lang": "Python",
        "diff": [
        	" - response = requester.make_request(args)",
    	" + cloudstack_response = requester.make_request(args)"
        ]
      }
    },
    {
      "td_type": "Test Debt",
      "td_issue": "Lines should have sufficient coverage by tests",
      "commit": {
        "hash": "10bce52484c70214e16ac47ef8b51f00689a9802",
        "msg": "Add basic test for RunInstance",
        "file": "instances_tests.py",
        "lang": "Python",
        "diff": [
        	" + with mock.patch('requests.get', get):",
            	" + with mock.patch(",
                " + 'ec2stack.providers.cloudstack.service_offerings.get_service_offering',",
                " + get_service_offering",
            	" + ):",
                " + with mock.patch(",
                " + 'ec2stack.providers.cloudstack.zones.get_zone',",
                " + get_zone",
                " + ):",
                " + response = self.post(",
                " + '/',",
                " + data=data",
                " +)",
	" + self.assert_ok(response)",
        	" + assert 'RunInstancesResponse' in response.data"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ian@ianduffy.ie",
  "name": "Ian Duffy",
  "project": "Apache/Cloudstack-ec2stack",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "0128d1b8595851537fba857b44f8fb62f45a4d73",
        "msg": "closes #48 code comments",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" + \"\"\" This module creates the flask application.",
	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined name",
      "commit": {
        "hash": "c719731c1c8acaa755d107918077e810182111ae",
        "msg": "Generificy images",
        "file": "images_tests.py",
        "lang": "Python",
        "diff": [
        	" - data['ImageId.1'] = 'a32d70ee-95e4-11e3-b2e4-d19c9d3e5e1d'",
        	" + data['ImageId'] = 'a32d70ee-95e4-11e3-b2e4-d19c9d3e5e1d'"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "ian@ianduffy.ie",
  "name": "Ian Duffy",
  "project": "Apache/Cloudstack-gcestack",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "c6cda06fdefa2eb5ad9853d95c3a992fdedc4f93",
        "msg": "Add apache license to python files. closes #9",
        "file": "test_provider.py",
        "lang": "Python",
        "diff": [
        	" + #  Licensed to the Apache Software Foundation (ASF) under one",
	" + #  or more contributor license agreements.  See the NOTICE file",
	" + #  distributed with this work for additional information",
	" + #  regarding copyright ownership.  The ASF licenses this file",
	" + #  to you under the Apache License, Version 2.0 (the",
	" + #  \"License\"); you may not use this file except in compliance",
	" + #  with the License.  You may obtain a copy of the License at"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "darrenbrogan@hotmail.com",
  "name": "BroganD1993",
  "project": "Apache/Cloudstack-gcestack",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "d0cb4ffab4873f5fa904c4a90214e7852d9e0987",
        "msg": "Add support for cloud profiles in config, closes #7",
        "file": "configure.py",
        "lang": "Python",
        "diff": [
        	" - def _modify_config_profile(config_file, profile='initial'):"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined name",
      "commit": {
        "hash": "710d7a0b022cd3acca334f347b8be3ff9b5a187b",
        "msg": "Fix broken tests from refactor",
        "file": "disks.py",
        "lang": "Python",
        "diff": [
        	" - projectid, zone, _cloudstack_volume_to_gce)",
        	" + _cloudstack_volume_to_gce, **kwargs)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "runseb@gmail.com",
  "name": "Sebastien Goasguen",
  "project": "Apache/Cloudstack-gcestack",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Design Debt",
      "td_issue": "Source files should not have any duplicated blocks",
      "commit": {
        "hash": "bf237f19506fc765b3c12a95992da43744f4810c",
        "msg": "forgot to remove gcloud dir",
        "file": "OAuth2.py",
        "lang": "Python",
        "diff": [
        	" - @app.route('/oauth2/auth', methods=['GET'])",
	" - def authorization_code():",
	" - provider = CloudstackAuthorizationProvider()",
     	" - response = provider.get_authorization_code_from_uri(request.url)",
    	" - res = flask.make_response(response.text, response.status_code)",
    	" - for k, v in response.headers.iteritems():",
       	" - res.headers[k] = v",
    	" - return res",
	" - ",
	" - @app.route('/oauth2/token', methods=['POST'])",
	" - def token():",
    	" - provider = CloudstackAuthorizationProvider()",
    	" - data = {k: request.form[k] for k in request.form.iterkeys()}",
    	" - response = provider.get_token_from_post_data(data)",
   	" - res = flask.make_response(response.text, response.status_code)",
    	" - for k, v in response.headers.iteritems():",
        	" - res.headers[k] = v",
    	" - return res"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "chinalibra@163.com",
  "name": "曹祖鹏",
  "project": "Apache/Dubbo-python",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "e7a761a7d072b2d5742173f05b508f4b3d0e557b",
        "msg": "抽离providers到commons对象，注册中心使用线程进行event处理",
        "file": "registry.py",
        "lang": "Python",
        "diff": [
        	" + \"\"\"",
	" + 所有注册过的服务端将在这里",
	" + 格式为{providername:{ip+port:service}}",
	" + providername = group_version_servicename",
	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "The "print" statement should not be used",
      "commit": {
        "hash": "f6eb732e73addbb7e42c999061b5af651d41c5dc",
        "msg": "增加registry日志处理",
        "file": "test_rpclib.py",
        "lang": "Python",
        "diff": [
	" - print user_provider.getUser(123)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "mwalch@apache.org",
  "name": "Mike Walch",
  "project": "Apache/Fluo-muchos",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "44eefe3a268fcb41075e09b3883c6226a94378b2",
        "msg": "Fixes #240 - Upgrade to Python 3. * Mostly automated changes using python 2to3 script",
        "file": "config.py",
        "lang": "Python",
        "diff": [
        	" - print 'proxy_public_ip = ', self.proxy_public_ip()",
        	" + print('proxy_public_ip = ', self.proxy_public_ip())"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "656a785e37eba2653cea96d8a6fd1158dd9c1b7d",
        "msg": "Improve config to handle different cluster types (#249)",
        "file": "test_config.py",
        "lang": "Python",
        "diff": [
	" - assert c.get_hosts() == {'leader2': ('10.0.0.1', None), 'leader1': ('10.0.0.0', '23.0.0.0'), 'worker1': ('10.0.0.2', None), 'worker3': ('10.0.0.4', None), 'worker2': ('10.0.0.3', None), 'worker4': ('10.0.0.5', None)}",
    	" + assert c.get_hosts() == {'leader2': ('10.0.0.1', None), 'leader1': ('10.0.0.0', '23.0.0.0'),",
                " +            'worker1': ('10.0.0.2', None), 'worker3': ('10.0.0.4', None),",
                " +            'worker2': ('10.0.0.3', None), 'worker4': ('10.0.0.5', None)}"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Cognitive Complexity of functions should not be too high",
      "commit": {
        "hash": "8d13020287357239deb85e6165beaf090a3a078b",
        "msg": "Simplify support for multiple cluster types (#248)",
        "file": "main.py",
        "lang": "Python",
        "diff": [
	" - for section in (\"general\", \"ansible-vars\", config.get('performance', 'profile')):",
            	" - for (name, value) in config.items(section):",
                " - if name not in ('proxy_hostname', 'proxy_socks_port'):",
                " - if name in host_vars:",
                " - host_vars[name] = value",
                " - if name in play_vars:",
                " - play_vars[name] = value"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "humbedooh@apache.org",
  "name": "Daniel Gruno",
  "project": "Apache/Kibble",
  "first_commit": "2017",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "762becb1aac3056a8e45be170976ac2358c1b3d5",
        "msg": "weave openapi yaml into each script",
        "file": "committers.py",
        "lang": "Python",
        "diff": [
        	" + ########################################################",
	" + # OPENAPI-URI: /api/code/committers",
	" + ########################################################",
	" + # get:",
	" + #   responses:",
	" + #     '200':",
	" + #       content:",
	" + #         application/json:",
	" + #           schema:"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Collapsible \"if\" statements should be merged",
      "commit": {
        "hash": "71de55acbac5690ee155cfc9c93b4f783513ee43",
        "msg": "implement subfiltering, refactor viewlist",
        "file": "trends.py",
        "lang": "Python",
        "diff": [
	" if indata.get('view'):",
        	" - if session.DB.ES.exists(index=session.DB.dbname, doc_type="view", id = indata['view']):",
            	" - view = session.DB.ES.get(index=session.DB.dbname, doc_type="view", id = indata['view'])",
            	" - viewList = view['_source']['sourceList']",
        	" + viewList = session.getView(indata.get('view'))"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "60402955614510d21cb3b63341a933838ca0422d",
        "msg": "trying another way of estimating happiness",
        "file": "mood.py",
        "lang": "Python",
        "diff": [
	" - bads = (mood_compiled.get('anger', 0)*1.25 + mood_compiled.get('fear', 0)*1.25 + mood_compiled.get('sadness', 0) + mood_compiled.get('disgust', 0)*1.5) / 4",
    	" + bads = (mood_compiled.get('anger', 0) + mood_compiled.get('fear', 0) + mood_compiled.get('sadness', 0) + mood_compiled.get('disgust', 0)) / 4"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "polvi@apache.org",
  "name": "Alex Polvi",
  "project": "Apache/Libcloud",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "34101853c0a656c6e38b51cd4f7b33b341d7747d",
        "msg": "website",
        "file": "setup.py",
        "lang": "Python",
        "diff": [
        	" - def finalize_options(self):",
    	" - pass"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "hbetts@apache.org",
  "name": "Hutson Betts",
  "project": "Apache/Libcloud",
  "first_commit": "2011",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "c4d2fa1afb138951dcd3db3a3926b7dcbaa20101",
        "msg": "Added reboot_node to the OpenNebula v3.2 compute driver.",
        "file": "opennebula.py",
        "lang": "Python",
        "diff": [
        	" class ACTION(object):",
   	" + \"\"\"",
   	" + All actions, except RESUME, only apply when the VM is in the \"Running\"",
   	" + state.",
   	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "pquerna@apache.org",
  "name": "Paul Querna",
  "project": "Apache/Libcloud",
  "first_commit": "2009",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "5b59b6dfbf76998de41c0a1f86f388f69d1972e3",
        "msg": "add top level module docstrings",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" + \"\"\"",
	" + libcloud provides a unified interface to the cloud computing resources.",
	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "6530b84b115f63e9e8b922adff968a5daf2530dd",
        "msg": "try to include view source links to viewvc",
        "file": "setup.py",
        "lang": "Python",
        "diff": [
        	" - os.system('pydoctor --add-package=libcloud --project-name=libcloud --make-html    --project-url=\"http://incubator.apache.org/libcloud/\"')"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "rbogorodskiy@apache.org",
  "name": "Roman Bogorodskiy",
  "project": "Apache/Libcloud",
  "first_commit": "2010",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Source files should have a sufficient density of comment lines",
      "commit": {
        "hash": "336783b2e4df87e252108fb988465c6810c1bde6",
        "msg": "Import Load Balancers support.",
        "file": "gogrid.py",
        "lang": "Python",
        "diff": [
        	" + # Unless required by applicable law or agreed to in writing, software",
	" + # distributed under the License is distributed on an \"AS IS\" BASIS,",
	" + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
	" + # See the License for the specific language governing permissions and",
	" + # limitations under the License."
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "659e2ebff3307d16ed750250d5f67456be3e6491",
        "msg": "Minor style fixes for loadbalancer example.",
        "file": "example_loadbalancer.py",
        "lang": "Python",
        "diff": [
        	" - print nodes"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "tomaz@tomaz.me",
  "name": "Tomaz Muraus",
  "project": "Apache/Libcloud",
  "first_commit": "2011",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined name",
      "commit": {
        "hash": "9459699551d3e888a03d6fe720ba9316f05c4f3c",
        "msg": "Start working on Python 3 compatibility.",
        "file": "base.py",
        "lang": "Python",
        "diff": [
        	" - except ssl.SSLError, e:",
            	" - raise ssl.SSLError(str(e))",
        	" + #except ssl.SSLError, e:",
        	" + except ssl.SSLError:",
            	" + raise ssl.SSLError()"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "f33ece282a11deae4b1f5617ff21ecb185fcfc14",
        "msg": "Add docstrings to Joyent driver. Contributed by Ben Rockwood part of GH-66.",
        "file": "joyent.py",
        "lang": "Python",
        "diff": [
        	" class JoyentResponse(JsonResponse):",
   	" + \"\"\"",
    	" + Joyent response class.",
    	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "78a9a8d3d4953242301767405eb83f0cacf52e82",
        "msg": "Unify docstrings formatting and fix pep8 issues in the compute drivers.",
        "file": "ibm_sce.py",
        "lang": "Python",
        "diff": [
        	" - from libcloud.compute.base import NodeDriver, Node, NodeImage, NodeSize, NodeLocation, NodeAuthSSHKey",
	" + from libcloud.compute.base import NodeDriver, Node, NodeImage, \",
    	" + NodeSize, NodeLocation, NodeAuthSSHKey"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "villard@us.ibm.com",
  "name": "Lionel Villard",
  "project": "Apache/Openwhisk-composer-python",
  "first_commit": "2018",
  "cqs": [
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "f2d14ec7713c495ca6acf1af00e890db5354cf4a",
        "msg": "finished porting all tests.",
        "file": "test_composer.py",
        "lang": "Python",
        "diff": [
        	" def check(combinator, n, name=None):",
    	" + # Check combinator type"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "763d637789043891bd44581a0043c7d28c8349f6",
        "msg": "cleanup",
        "file": "setup.py",
        "lang": "Python",
        "diff": [
        	" - # entry_points={",
    	" - #     'console_scripts': [",
    	" - #         'composer = composer.cli:main',",
    	" - #     ]",
    	" - # },"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "jwdubee@us.ibm.com",
  "name": "James Dubee",
  "project": "Apache/Openwhisk-package-kafka",
  "first_commit": "2016",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "ea0c8b526db4bf1507e289dbbe23d059004571bd",
        "msg": "HTTP Route for Posted Trigger Must Match JSON triggerURL (#59)",
        "file": "app.py",
        "lang": "Python",
        "diff": [
        	" - logging.info("[{}] Repsonse status code from trigger authorization {}".format(triggerFQN, trigger_get_status_code))",
        	" + logging.info("[{}] Repsonse status code from trigger authorization {}".format(triggerFQN,",
                " +                                                                      trigger_get_status_code))"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "bjustin@us.ibm.com",
  "name": "Justin Berstler",
  "project": "Apache/Openwhisk-package-kafka",
  "first_commit": "2016",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "c1f0fe363999a60a49acf253b4cee84926968f0c",
        "msg": "Update error message to reflect that consumer is no longer killed on all polling exceptions",
        "file": "consumer.py",
        "lang": "Python",
        "diff": [
        	" - logging.error('[{}] Error polling! Shutting down consumer: {}'.format(self.trigger, message.error()))",
                " + logging.error('[{}] Error polling: {}'.format(self.trigger, message.error()))"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "4d2606c343c37139690908858b6592444e830b2c",
        "msg": "Add lots more logging messages (#10)",
        "file": "app.py",
        "lang": "Python",
        "diff": [
        	" - print \"Just testing\"",
        	" + logging.debug(\"Just testing\")"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "lecaran@gmail.com",
  "name": "EmergentOrder",
  "project": "Apache/Predictionio-sdk-python",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined name",
      "commit": {
        "hash": "73adea9d6f5093538f4f738f7d01941309500496",
        "msg": "remove reference to obsolete",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" - # import deprecated libraries.",
	" - from predictionio.obsolete import Client, InvalidArgumentError"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "yipjustin@gmail.com",
  "name": "Justin Yip",
  "project": "Apache/Predictionio-sdk-python",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "59380d88ad2f19fa19f00af32888b80e67ae902d",
        "msg": "Add 0.8 features.",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" - super(DataClient, self).__init__(",
        	" - data_url, threads, apiversion, qsize, timeout)",
    	" + super(EventClient, self).__init__(url, threads, apiversion, qsize, timeout)"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "026b86d6347ce32bfa6ed1e6f629740eb1697b6c",
        "msg": "Finalize sdk interface.",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" - def now_if_none(t):",
  	" - return datetime.now(pytz.utc) if t is None else t",
	" + def event_time_validation(t):",
  	" + \"\"\" Validate event_time according to EventAPI Specification.",
  	" + \"\"\""
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Sections of code should not be \"commented out\"",
      "commit": {
        "hash": "de0ff6145e553d018fe269ae3da81343d2983e37",
        "msg": "PIOTEAM-41. Fix batch import.",
        "file": "batch_import.py",
        "lang": "Python",
        "diff": [
        	" - #client.identify(v.uid)",
    	" - #client.arecord_user_action_on_item(\"rate\",",
    	" - #  v.uid,",
    	" - #  v.iid,",
    	" - #   { "pio_rating": v.rating },)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "kenneth@prediction.io",
  "name": "Kenneth Chan",
  "project": "Apache/Predictionio-sdk-python",
  "first_commit": "2013",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "6b2045d7c1bfae8d4e7f4cb42781890d366a8134",
        "msg": "SDKPYTHON-6 #comment modified for new API style and improve tests",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" -  result = self._user_action_item(action=CONVERSION_API, uid=uid, iid=iid, **params)",
        	" + request = self.auser_conversion_item(uid, iid, **params)",
        	" + result = self.aresp(request)"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Files should not have too many lines of code",
      "commit": {
        "hash": "7c8a39dd57d63c89f1270585c239f2870701469e",
        "msg": "update doc",
        "file": "__init__.py",
        "lang": "Python",
        "diff": [
        	" def __init__(self, appkey, threads=1, apiurl=\"http://localhost:8000\", apiversion = \"\", qsize=0):",
        	" \"\"\"Constructor of Client object.",
        	" - :param appkey: the appkey",
        	" - :param threads: number of threads for handling requests",
        	" - :param apiurl: the PredictionIO API URL path.",
        	" - :param apiversion: the PredictionIO API version. (optional) (eg. \"\", or \"/v1\")",
        	" - :param qsize: the request queue size"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "aconway@redhat.com",
  "name": "Alan Conway",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2014",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Statements should be on separate lines",
      "commit": {
        "hash": "47e7ef4af667975f390f238424e849b4a6349fdc",
        "msg": "DISPATCH-52: Integrate system_tests_broker, fix outstanding issues.",
        "file": "system_test.py",
        "lang": "Python",
        "diff": [
        	" - if remaining <= 0: return None",
   	" + if remaining <= 0:",
        	" + return None"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "1a83496c67824f91be532e619cf3f3670874d0b9",
        "msg": "DISPATCH-56: Make dispatch management client library public.",
        "file": "schema.py",
        "lang": "Python",
        "diff": [
        	" class IncludeType(AttributeTypeHolder):",
	" + \"\"\"An include type defines a set of attributes that can be re-used by multiple EntityTypes\"\"\""
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "d8a8fa38f25eac277a92f9f1b0a6056062a2057c",
        "msg": "DISPATCH-56: qdmanage: command line AMQP management tool.",
        "file": "client.py",
        "lang": "Python",
        "diff": [
        	" - def create(self, type, name, attributes=None):",
    	" + def create(self, attributes=None, type=None, name=None):"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "chug@apache.org",
  "name": "Chuck Rolke",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2016",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "e41d628f1210cfae3497f77f586eaa9ead7b3f03",
        "msg": "DISPATCH-311: replace 'vhostname' with 'id'",
        "file": "policy_local.py",
        "lang": "Python",
        "diff": [
        	" - ruleset_str = '[\"vhost\", {\"vhostName\": \"photoserver\", \"maxConnections\": 50, \"maxConnectionsPerUser\": 5, \"maxConnectionsPerHost\": 20, \"allowUnknownUser\": true,'"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Control flow statements should not be nested too deeply",
      "commit": {
        "hash": "00515b8908ac93734e2af5506b556dcfd3507235",
        "msg": "DISPATCH-311: Adjust local_policy compiler/lookup to match new schema.",
        "file": "policy_local.py",
        "lang": "Python",
        "diff": [
        	" - for cipname, cip in policy_out[PolicyKeys.KW_INGRESS_POLICIES].iteritems():",
            	" - for co in cip:",
                " - if not co in policy_out[PolicyKeys.KW_INGRESS_HOST_GROUPS]:",
                " - errors.append(\"Application '%s' connection ingress policy '%s' references ingress host group '%s' but that group does not exist\"",
                " -                 (name, cipname, co))",
                " - return False"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "eallen@redhat.com",
  "name": "Ernest Allen",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2016",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "d0a3dd763e41626f1d298d360eea0da8c391be3a",
        "msg": "DISPATCH-834 Add ability to read/write addresses to one or more routers",
        "file": "section.py",
        "lang": "Python",
        "diff": [
        	" - elif key.endswith('Count') or key in ignore or opts[key] is None or opts[key] == Schema.default(self.type, key):",
            	" + elif key.endswith('Count') or key in ignore or opts[key] is None:",
                " + del opts[key]",
           	" + elif opts[key] == Schema.default(self.type, key) and key not in forced:"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "gmurthy@apache.org",
  "name": "Ganesh Murthy",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "4a173e1ec0f7e0e8f9d7d37b9549d4f9c9d37fb0",
        "msg": "DISPATCH-894 - Made the following changes to make the system tests work on CentOS 6.",
        "file": "system_tests_handle_failover.py",
        "lang": "Python",
        "diff": [
        	" -  ['qdstat', '--bus', str(address or self.router.addresses[0]), '--timeout', str(system_test.TIMEOUT) ] + args,",
            	" + ['qdstat', '--bus', str(address or self.router.addresses[0]), '--timeout', str(TIMEOUT) ] + args,"
        ]
      }
    },
    {
      "td_type": "Design Debt",
      "td_issue": "Control flow statements should not be nested too deeply",
      "commit": {
        "hash": "9ec4c43bc062a2eb468c673c2125bc3f6057b0ff",
        "msg": "DISPATCH-446 - Removed all annotations. Turned sslProfile to an entity. Updated documentation and add tests",
        "file": "qdrouterd.conf.5.py",
        "lang": "Python",
        "diff": [
        	" - for annotation in self.schema.annotations.itervalues():",
                " - if \"addrPort\" in annotation.name or \"connectionRole\" in annotation.name:",
                " - self.connectionRoleAddrPortAnnotations[annotation.short_name] = annotation",
                " - continue",
                " - used_by = [e.short_name for e in self.schema.entity_types.itervalues()",
                " - if annotation in e.annotations]",
                " - with self.section(annotation.short_name):",
                " - if annotation.description:",
                " - self.para(annotation.description)",
                " - if used_by:",
                " - self.para('Used by: **%s**.'%('**, **'.join(used_by)))",
                " - if \"sslProfile\" in annotation.name:"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "gsim@redhat.com",
  "name": "Gordon Sim",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2017",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "2e34afd3a46a141b3dd8451daaca96d11e471637",
        "msg": "DISPATCH-901: some extra debugging to help diagnose CI issue",
        "file": "system_tests_authz_service_plugin.py ",
        "lang": "Python",
        "diff": [
        	" - cls.tester.popen(['/usr/bin/env', 'python', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'authservice.py'), '-a', '127.0.0.1:%d' % cls.auth_service_port, '-c', os.getcwd()], expect=Process.RUNNING)",
        	" + cls.tester.popen(['/usr/bin/env', 'python', authservice, '-a', '127.0.0.1:%d' % cls.auth_service_port, '-c', os.getcwd()], expect=Process.RUNNING)"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "374053b62390ded77ddd563fef1b5bd6833e3d25",
        "msg": "DISPATH-775: Fix typo in error handling",
        "file": "system_tests_auth_service_plugin.py",
        "lang": "Python",
        "diff": [
        	" - print(\"ERROR: %s\" % error)",
            	" + print(\"ERROR: %s\" % self.error)"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "kgiusti@apache.org",
  "name": "Kenneth Giusti",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "778a9dd1f07389ca682469d31ad6834ecbea6612",
        "msg": "Merge branch 'master' into DISPATCH-731",
        "file": "command.py",
        "lang": "Python",
        "diff": [
        	" - mechs, user, password, sasl_password_file = opts.sasl_mechanisms, opts.sasl_username, opts.sasl_password, opts.sasl_password_file"
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "mgoulish@redhat.com",
  "name": "Michael Goulish",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "584a24cc74745e7f407fd5913ba3a0eec2b6b98c",
        "msg": "DISPATCH-209 : new 3-router pure linkroute tests",
        "file": "system_tests_distribution.py",
        "lang": "Python",
        "diff": [
        	" - elif abs(self.count_3 - self.expected_3) > self.slop:",
                " - self.bail ( \"count_3 %d is more than %d different from expectation %d\" % (self.count_3, self.slop, self.expected_3) )"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "35b1c3f83427e4fefa19a701650f0b2a8f49185a",
        "msg": "DISPATCH-209 : test disposition guarantee with spurious connection loss",
        "file": "system_tests_topology_disposition.py",
        "lang": "Python",
        "diff": [
        	" class TopologyDispositionTests ( TestCase ):",
    	" + \"\"\"",
    	" + The disposition guarantee is that the sender should shortly know",
    	" + how its messages have been disposed: whether they have been",
    	" + accepted, released, or modified.",
    	" + These tests ensure that the disposition guarantee survives",
    	" + disruptions in router network topology.",
    	" + \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "tross@apache.org",
  "name": "Ted Ross",
  "project": "Apache/Qpid-dispatch",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "a44289be587bf553e5342b929be94ceb77347f6b",
        "msg": "NO-JIRA - Remove all sleeps from the multi-tenant tests",
        "file": "system_tests_multi_tenancy.py",
        "lang": "Python",
        "diff": [
        	" - def __init__(self, sender_host, receiver_host, sender_address, receiver_address, lookup_host, lookup_address, anonymous=False):",
    	" + def __init__(self, sender_host, receiver_host, sender_address, receiver_address, lookup_host, lookup_address):"
        ]
      }
    },
    {
      "td_type": "Defect Debt",
      "td_issue": "Undefined variable",
      "commit": {
        "hash": "b6944e8af5d39823b75a6bad2d065fafac596b22",
        "msg": "DISPATCH-341 - Drain now propagates across link routes and behaves correctly for router-terminated links.",
        "file": "system_tests_drain_support.py",
        "lang": "Python",
        "diff": [
        	" - def on_drained(self, event):",
        	" - if sender.credit == 0:",
    	" + def on_link_flow(self, event):",
       	" + if self.receiver.credit == 0:"
        ]
      }
    },
    {
      "td_type": "Documentation Debt",
      "td_issue": "Docstrings should be defined",
      "commit": {
        "hash": "29e154dcbbc931e73adf1d0b60a970cd37c90d9d",
        "msg": "DISPATCH-357 - Patch from Ganesh Murthy - Expose link address for link-routed links.",
        "file": "system_tests_link_routes.py",
        "lang": "Python",
        "diff": [
        	" class CloseWithUnsettledTest(MessagingHandler):",
    	" + \"\"\"",
    	" + This test sends a message across an attach-routed link.  While the message",
    	" + is unsettled, the client link is closed.  The test is ensuring that the",
    	" + router does not crash during the closing of the links.",
    	" \"\"\""
        ]
      }
    }
  ]
},
{
  "code": "",
  "email": "kpvdr@apache.org",
  "name": "Kim van der Riet",
  "project": "Apache/Qpid-interop-test",
  "first_commit": "2015",
  "cqs": [
    {
      "td_type": "Defect Debt",
      "td_issue": "The \"print\" statement should not be used",
      "commit": {
        "hash": "703daa7196cdac240ad4306ae79ddd46f3d56aa3",
        "msg": "QPIDIT-109: Added Python 3 compatibility to Python shims",
        "file": "Receiver.py",
        "lang": "Python",
        "diff": [
        	" - print sys.argv[3]",
    	" - print dumps(RECEIVER.get_received_value_list())",
    	" + print(sys.argv[3])",
    	" + print(dumps(RECEIVER.get_received_value_list()))"
        ]
      }
    },
    {
      "td_type": "Code Debt",
      "td_issue": "Lines should not be too long",
      "commit": {
        "hash": "f93886f54aae1b085164f59e60397fb166fdf984",
        "msg": "QPIDIT-79: Fixed threading issues in shims, ctl+c now stops shims as they should.",
        "file": "Sender.py",
        "lang": "Python",
        "diff": [
        	" - raise InteropTestError('JmsMessagesTestSender._create_jms_message: Unknown or unsupported subtype \"%s\"' %",
                " -                   test_value_type)",
            	" + raise InteropTestError('JmsMessagesTestSender._create_jms_message: ' \",
                " +                   'Unknown or unsupported subtype "%s"' % test_value_type)"
        ]
      }
    }
  ]
}


